datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique
    username  String   @unique
    password  String
    clubs     ClubMember[]
    books     UserBook[]
    comments  Response[]
    createdOn DateTime @default(now())
    updatedOn DateTime @updatedAt
    profile   UserProfile?
}

model UserProfile {
    User            User        @relation(fields: [userId], references: [id])
    userId          String      @id
    firstName       String?     @db.VarChar(50)
    lastName        String?     @db.VarChar(50)
    bio             String?     @db.VarChar(500)
    imgUrl          String?     @db.VarChar(30)
}

model Book {
    id          Int     @id @default(autoincrement())
    isbn        String[]
    title       String
    imgUrl      String?
    bipocAuthor Boolean @default(false)
    femaleAuthor    Boolean @default(false)
    engagement  UserBook[]
    clubs       ClubBook[]
    createdOn   DateTime    @default(now())
    updatedOn   DateTime    @updatedAt
}

model Club {
    id              String      @id @default(uuid())
    clubName        String      @db.VarChar(100) @unique
    members         ClubMember[]
    books           ClubBook[]
    meetings        Meeting[]
    conversations   Conversation[]
    description     String? 
    createdOn       DateTime    @default(now())
    updatedOn       DateTime    @updatedAt    
}

model ClubMember {
    id          Int     @id @default(autoincrement())
    User        User    @relation(fields: [userId], references: [id])
    userId      String
    Club        Club    @relation(fields: [clubId], references: [id])
    clubId      String
    role        ClubMemberRole
}

model UserBook {
    id          Int     @id @default(autoincrement())
    Book        Book    @relation(fields: [bookId], references: [id])  
    bookId      Int
    User        User    @relation(fields: [userId], references: [id])
    userId      String
    upVote      Boolean @default(false)
    downVote    Boolean @default(false)
    read        Boolean @default(false)
    inProgress  Boolean @default(false)
}

model ClubBook {
    id              Int     @id @default(autoincrement())
    Book            Book    @relation(fields: [bookId], references: [id])  
    bookId          Int     
    Club            Club    @relation(fields: [clubId], references: [id]) 
    clubId          String 
    status          ClubBookStatus
    upVotes         Int
    downVotes       Int
    startedOn       DateTime
    completedOn     DateTime
    conversations   Conversation[]
    meetings        Meeting[]
    updatedOn       DateTime @updatedAt
}

model Meeting {
    id              Int             @id @default(autoincrement())
    title           String          @db.VarChar(200)
    club            Club            @relation(fields: [clubId], references: [id])
    clubId          String       
    conversation    Conversation    @relation(fields: [conversationId], references: [id])
    conversationId  Int             @unique
    clubBook        ClubBook?       @relation(fields: [bookId], references: [id])
    bookId          Int?
    time            DateTime
    location        String
    createdOn       DateTime        @default(now())
    updatedOn       DateTime        @updatedAt
}

model Conversation {
    id            Int             @id @default(autoincrement())
    club          Club            @relation(fields: [clubId], references: [id])
    clubId        String    
    private       Boolean
    clubBook      ClubBook?       @relation(fields: [bookId], references: [id])
    bookId        Int?      
    meeting       Meeting?
    title         String          @db.VarChar(200)
    body          String
    responses     Response[]
    createdOn     DateTime        @default(now())
    updatedOn     DateTime        @updatedAt      
}

model Response {
    id              Int             @id @default(autoincrement())
    user            User            @relation(fields: [userId], references: [id])
    userId          String  
    conversation    Conversation?   @relation(fields: [conversationId], references: [id])
    conversationId  Int?     
    replyTo         Response?       @relation("Replies", fields: [replyToId], references: [id])
    replyToId       Int?
    replies         Response[]      @relation("Replies")   
    body            String 
    createdOn       DateTime        @default(now())
    editedOn        DateTime        @updatedAt
}

model Reaction {
    reaction    String @id
}

enum ClubBookStatus {
    PROPOSED
    IN_QUEUE
    IN_PROGRESS
    COMPLETED
}

enum ClubMemberRole {
    ADMIN
    USER
}