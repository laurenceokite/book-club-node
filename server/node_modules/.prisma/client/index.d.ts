
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  username: string
  password: string
  createdOn: Date
  updatedOn: Date
}

/**
 * Model UserProfile
 * 
 */
export type UserProfile = {
  userId: string
  firstName: string | null
  lastName: string | null
  updatedOn: Date
}

/**
 * Model Author
 * 
 */
export type Author = {
  id: number
  firstName: string | null
  lastName: string | null
  bio: string | null
  bipoc: boolean
  lgbtq: boolean
}

/**
 * Model Book
 * 
 */
export type Book = {
  id: number
  authorId: number
  isbn: string[]
  synopsys: string
  imageUrl: string | null
  releaseDate: Date | null
}

/**
 * Model Club
 * 
 */
export type Club = {
  id: string
  clubName: string
}

/**
 * Model UserBook
 * 
 */
export type UserBook = {
  id: number
  bookId: number
  userId: string
  liked: boolean
  read: boolean
  inProgress: boolean
}

/**
 * Model ClubBook
 * 
 */
export type ClubBook = {
  id: number
  bookId: number
  clubId: string
  status: ClubBookStatus
  upVotes: number
  startedOn: Date
  completedOn: Date
}

/**
 * Model Meeting
 * 
 */
export type Meeting = {
  id: number
  title: string
  clubId: string
  conversationId: number
  bookId: number | null
  time: Date
  location: string
}

/**
 * Model Conversation
 * 
 */
export type Conversation = {
  id: number
  clubId: string
  private: boolean
  bookId: number | null
  title: string
  body: string
  createdOn: Date
  updatedOn: Date
}

/**
 * Model Response
 * 
 */
export type Response = {
  id: number
  userId: string
  conversationId: number | null
  replyToId: number | null
  body: string
  createdOn: Date
  editedOn: Date
}

/**
 * Model Reaction
 * 
 */
export type Reaction = {
  reaction: string
}

/**
 * Model Genre
 * 
 */
export type Genre = {
  genre: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ClubBookStatus: {
  PROPOSED: 'PROPOSED',
  INQUEUE: 'INQUEUE',
  INPROGRESS: 'INPROGRESS',
  COMPLETED: 'COMPLETED'
};

export type ClubBookStatus = (typeof ClubBookStatus)[keyof typeof ClubBookStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<GlobalReject>;

  /**
   * `prisma.author`: Exposes CRUD operations for the **Author** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.author.findMany()
    * ```
    */
  get author(): Prisma.AuthorDelegate<GlobalReject>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<GlobalReject>;

  /**
   * `prisma.club`: Exposes CRUD operations for the **Club** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clubs
    * const clubs = await prisma.club.findMany()
    * ```
    */
  get club(): Prisma.ClubDelegate<GlobalReject>;

  /**
   * `prisma.userBook`: Exposes CRUD operations for the **UserBook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBooks
    * const userBooks = await prisma.userBook.findMany()
    * ```
    */
  get userBook(): Prisma.UserBookDelegate<GlobalReject>;

  /**
   * `prisma.clubBook`: Exposes CRUD operations for the **ClubBook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClubBooks
    * const clubBooks = await prisma.clubBook.findMany()
    * ```
    */
  get clubBook(): Prisma.ClubBookDelegate<GlobalReject>;

  /**
   * `prisma.meeting`: Exposes CRUD operations for the **Meeting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meetings
    * const meetings = await prisma.meeting.findMany()
    * ```
    */
  get meeting(): Prisma.MeetingDelegate<GlobalReject>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<GlobalReject>;

  /**
   * `prisma.response`: Exposes CRUD operations for the **Response** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responses
    * const responses = await prisma.response.findMany()
    * ```
    */
  get response(): Prisma.ResponseDelegate<GlobalReject>;

  /**
   * `prisma.reaction`: Exposes CRUD operations for the **Reaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reactions
    * const reactions = await prisma.reaction.findMany()
    * ```
    */
  get reaction(): Prisma.ReactionDelegate<GlobalReject>;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **Genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): Prisma.GenreDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    UserProfile: 'UserProfile',
    Author: 'Author',
    Book: 'Book',
    Club: 'Club',
    UserBook: 'UserBook',
    ClubBook: 'ClubBook',
    Meeting: 'Meeting',
    Conversation: 'Conversation',
    Response: 'Response',
    Reaction: 'Reaction',
    Genre: 'Genre'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    clubs: number
    books: number
    comments: number
  }

  export type UserCountOutputTypeSelect = {
    clubs?: boolean
    books?: boolean
    comments?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AuthorCountOutputType
   */


  export type AuthorCountOutputType = {
    books: number
  }

  export type AuthorCountOutputTypeSelect = {
    books?: boolean
  }

  export type AuthorCountOutputTypeGetPayload<S extends boolean | null | undefined | AuthorCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AuthorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AuthorCountOutputTypeArgs)
    ? AuthorCountOutputType 
    : S extends { select: any } & (AuthorCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AuthorCountOutputType ? AuthorCountOutputType[P] : never
  } 
      : AuthorCountOutputType




  // Custom InputTypes

  /**
   * AuthorCountOutputType without action
   */
  export type AuthorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AuthorCountOutputType
     * 
    **/
    select?: AuthorCountOutputTypeSelect | null
  }



  /**
   * Count Type BookCountOutputType
   */


  export type BookCountOutputType = {
    genre: number
    engagement: number
    clubs: number
  }

  export type BookCountOutputTypeSelect = {
    genre?: boolean
    engagement?: boolean
    clubs?: boolean
  }

  export type BookCountOutputTypeGetPayload<S extends boolean | null | undefined | BookCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BookCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BookCountOutputTypeArgs)
    ? BookCountOutputType 
    : S extends { select: any } & (BookCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof BookCountOutputType ? BookCountOutputType[P] : never
  } 
      : BookCountOutputType




  // Custom InputTypes

  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BookCountOutputType
     * 
    **/
    select?: BookCountOutputTypeSelect | null
  }



  /**
   * Count Type ClubCountOutputType
   */


  export type ClubCountOutputType = {
    members: number
    books: number
    meetings: number
    conversations: number
  }

  export type ClubCountOutputTypeSelect = {
    members?: boolean
    books?: boolean
    meetings?: boolean
    conversations?: boolean
  }

  export type ClubCountOutputTypeGetPayload<S extends boolean | null | undefined | ClubCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClubCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClubCountOutputTypeArgs)
    ? ClubCountOutputType 
    : S extends { select: any } & (ClubCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ClubCountOutputType ? ClubCountOutputType[P] : never
  } 
      : ClubCountOutputType




  // Custom InputTypes

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClubCountOutputType
     * 
    **/
    select?: ClubCountOutputTypeSelect | null
  }



  /**
   * Count Type ClubBookCountOutputType
   */


  export type ClubBookCountOutputType = {
    conversations: number
    meetings: number
  }

  export type ClubBookCountOutputTypeSelect = {
    conversations?: boolean
    meetings?: boolean
  }

  export type ClubBookCountOutputTypeGetPayload<S extends boolean | null | undefined | ClubBookCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClubBookCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClubBookCountOutputTypeArgs)
    ? ClubBookCountOutputType 
    : S extends { select: any } & (ClubBookCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ClubBookCountOutputType ? ClubBookCountOutputType[P] : never
  } 
      : ClubBookCountOutputType




  // Custom InputTypes

  /**
   * ClubBookCountOutputType without action
   */
  export type ClubBookCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClubBookCountOutputType
     * 
    **/
    select?: ClubBookCountOutputTypeSelect | null
  }



  /**
   * Count Type ConversationCountOutputType
   */


  export type ConversationCountOutputType = {
    responses: number
  }

  export type ConversationCountOutputTypeSelect = {
    responses?: boolean
  }

  export type ConversationCountOutputTypeGetPayload<S extends boolean | null | undefined | ConversationCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ConversationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ConversationCountOutputTypeArgs)
    ? ConversationCountOutputType 
    : S extends { select: any } & (ConversationCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ConversationCountOutputType ? ConversationCountOutputType[P] : never
  } 
      : ConversationCountOutputType




  // Custom InputTypes

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ConversationCountOutputType
     * 
    **/
    select?: ConversationCountOutputTypeSelect | null
  }



  /**
   * Count Type ResponseCountOutputType
   */


  export type ResponseCountOutputType = {
    replies: number
  }

  export type ResponseCountOutputTypeSelect = {
    replies?: boolean
  }

  export type ResponseCountOutputTypeGetPayload<S extends boolean | null | undefined | ResponseCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ResponseCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ResponseCountOutputTypeArgs)
    ? ResponseCountOutputType 
    : S extends { select: any } & (ResponseCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ResponseCountOutputType ? ResponseCountOutputType[P] : never
  } 
      : ResponseCountOutputType




  // Custom InputTypes

  /**
   * ResponseCountOutputType without action
   */
  export type ResponseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ResponseCountOutputType
     * 
    **/
    select?: ResponseCountOutputTypeSelect | null
  }



  /**
   * Count Type GenreCountOutputType
   */


  export type GenreCountOutputType = {
    books: number
  }

  export type GenreCountOutputTypeSelect = {
    books?: boolean
  }

  export type GenreCountOutputTypeGetPayload<S extends boolean | null | undefined | GenreCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GenreCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GenreCountOutputTypeArgs)
    ? GenreCountOutputType 
    : S extends { select: any } & (GenreCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GenreCountOutputType ? GenreCountOutputType[P] : never
  } 
      : GenreCountOutputType




  // Custom InputTypes

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GenreCountOutputType
     * 
    **/
    select?: GenreCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    createdOn: Date | null
    updatedOn: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    createdOn: Date | null
    updatedOn: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    createdOn: number
    updatedOn: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    createdOn?: true
    updatedOn?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    createdOn?: true
    updatedOn?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    createdOn?: true
    updatedOn?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    createdOn: Date
    updatedOn: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    clubs?: boolean | ClubFindManyArgs
    books?: boolean | UserBookFindManyArgs
    comments?: boolean | ResponseFindManyArgs
    createdOn?: boolean
    updatedOn?: boolean
    profile?: boolean | UserProfileArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    clubs?: boolean | ClubFindManyArgs
    books?: boolean | UserBookFindManyArgs
    comments?: boolean | ResponseFindManyArgs
    profile?: boolean | UserProfileArgs
    _count?: boolean | UserCountOutputTypeArgs
  } 

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'clubs' ? Array < ClubGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'books' ? Array < UserBookGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'comments' ? Array < ResponseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'profile' ? UserProfileGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'clubs' ? Array < ClubGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'books' ? Array < UserBookGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'comments' ? Array < ResponseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'profile' ? UserProfileGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    clubs<T extends ClubFindManyArgs= {}>(args?: Subset<T, ClubFindManyArgs>): PrismaPromise<Array<ClubGetPayload<T>>| Null>;

    books<T extends UserBookFindManyArgs= {}>(args?: Subset<T, UserBookFindManyArgs>): PrismaPromise<Array<UserBookGetPayload<T>>| Null>;

    comments<T extends ResponseFindManyArgs= {}>(args?: Subset<T, ResponseFindManyArgs>): PrismaPromise<Array<ResponseGetPayload<T>>| Null>;

    profile<T extends UserProfileArgs= {}>(args?: Subset<T, UserProfileArgs>): Prisma__UserProfileClient<UserProfileGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserProfile
   */


  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileMinAggregateOutputType = {
    userId: string | null
    firstName: string | null
    lastName: string | null
    updatedOn: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    userId: string | null
    firstName: string | null
    lastName: string | null
    updatedOn: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    userId: number
    firstName: number
    lastName: number
    updatedOn: number
    _all: number
  }


  export type UserProfileMinAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    updatedOn?: true
  }

  export type UserProfileMaxAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    updatedOn?: true
  }

  export type UserProfileCountAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    updatedOn?: true
    _all?: true
  }

  export type UserProfileAggregateArgs = {
    /**
     * Filter which UserProfile to aggregate.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs = {
    where?: UserProfileWhereInput
    orderBy?: Enumerable<UserProfileOrderByWithAggregationInput>
    by: Array<UserProfileScalarFieldEnum>
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }


  export type UserProfileGroupByOutputType = {
    userId: string
    firstName: string | null
    lastName: string | null
    updatedOn: Date
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect = {
    User?: boolean | UserArgs
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    updatedOn?: boolean
  }


  export type UserProfileInclude = {
    User?: boolean | UserArgs
  } 

  export type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserProfile :
    S extends undefined ? never :
    S extends { include: any } & (UserProfileArgs | UserProfileFindManyArgs)
    ? UserProfile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (UserProfileArgs | UserProfileFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof UserProfile ? UserProfile[P] : never
  } 
      : UserProfile


  type UserProfileCountArgs = Merge<
    Omit<UserProfileFindManyArgs, 'select' | 'include'> & {
      select?: UserProfileCountAggregateInputType | true
    }
  >

  export interface UserProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserProfile'> extends True ? Prisma__UserProfileClient<UserProfileGetPayload<T>> : Prisma__UserProfileClient<UserProfileGetPayload<T> | null, null>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserProfile'> extends True ? Prisma__UserProfileClient<UserProfileGetPayload<T>> : Prisma__UserProfileClient<UserProfileGetPayload<T> | null, null>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userProfileWithUserIdOnly = await prisma.userProfile.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UserProfileFindManyArgs>(
      args?: SelectSubset<T, UserProfileFindManyArgs>
    ): PrismaPromise<Array<UserProfileGetPayload<T>>>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
    **/
    create<T extends UserProfileCreateArgs>(
      args: SelectSubset<T, UserProfileCreateArgs>
    ): Prisma__UserProfileClient<UserProfileGetPayload<T>>

    /**
     * Create many UserProfiles.
     *     @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     *     @example
     *     // Create many UserProfiles
     *     const userProfile = await prisma.userProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserProfileCreateManyArgs>(
      args?: SelectSubset<T, UserProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
    **/
    delete<T extends UserProfileDeleteArgs>(
      args: SelectSubset<T, UserProfileDeleteArgs>
    ): Prisma__UserProfileClient<UserProfileGetPayload<T>>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserProfileUpdateArgs>(
      args: SelectSubset<T, UserProfileUpdateArgs>
    ): Prisma__UserProfileClient<UserProfileGetPayload<T>>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserProfileDeleteManyArgs>(
      args?: SelectSubset<T, UserProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserProfileUpdateManyArgs>(
      args: SelectSubset<T, UserProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
    **/
    upsert<T extends UserProfileUpsertArgs>(
      args: SelectSubset<T, UserProfileUpsertArgs>
    ): Prisma__UserProfileClient<UserProfileGetPayload<T>>

    /**
     * Find one UserProfile that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserProfileFindUniqueOrThrowArgs>
    ): Prisma__UserProfileClient<UserProfileGetPayload<T>>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs>
    ): Prisma__UserProfileClient<UserProfileGetPayload<T>>

    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserProfileClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserProfile base type for findUnique actions
   */
  export type UserProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter, which UserProfile to fetch.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile: findUnique
   */
  export interface UserProfileFindUniqueArgs extends UserProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserProfile base type for findFirst actions
   */
  export type UserProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter, which UserProfile to fetch.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     * 
    **/
    distinct?: Enumerable<UserProfileScalarFieldEnum>
  }

  /**
   * UserProfile: findFirst
   */
  export interface UserProfileFindFirstArgs extends UserProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter, which UserProfiles to fetch.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserProfileScalarFieldEnum>
  }


  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The data needed to create a UserProfile.
     * 
    **/
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }


  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs = {
    /**
     * The data used to create many UserProfiles.
     * 
    **/
    data: Enumerable<UserProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The data needed to update a UserProfile.
     * 
    **/
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs = {
    /**
     * The data used to update UserProfiles.
     * 
    **/
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     * 
    **/
    where?: UserProfileWhereInput
  }


  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     * 
    **/
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     * 
    **/
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }


  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter which UserProfile to delete.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs = {
    /**
     * Filter which UserProfiles to delete
     * 
    **/
    where?: UserProfileWhereInput
  }


  /**
   * UserProfile: findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs = UserProfileFindUniqueArgsBase
      

  /**
   * UserProfile: findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs = UserProfileFindFirstArgsBase
      

  /**
   * UserProfile without action
   */
  export type UserProfileArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
  }



  /**
   * Model Author
   */


  export type AggregateAuthor = {
    _count: AuthorCountAggregateOutputType | null
    _avg: AuthorAvgAggregateOutputType | null
    _sum: AuthorSumAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  export type AuthorAvgAggregateOutputType = {
    id: number | null
  }

  export type AuthorSumAggregateOutputType = {
    id: number | null
  }

  export type AuthorMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    bio: string | null
    bipoc: boolean | null
    lgbtq: boolean | null
  }

  export type AuthorMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    bio: string | null
    bipoc: boolean | null
    lgbtq: boolean | null
  }

  export type AuthorCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    bio: number
    bipoc: number
    lgbtq: number
    _all: number
  }


  export type AuthorAvgAggregateInputType = {
    id?: true
  }

  export type AuthorSumAggregateInputType = {
    id?: true
  }

  export type AuthorMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    bio?: true
    bipoc?: true
    lgbtq?: true
  }

  export type AuthorMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    bio?: true
    bipoc?: true
    lgbtq?: true
  }

  export type AuthorCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    bio?: true
    bipoc?: true
    lgbtq?: true
    _all?: true
  }

  export type AuthorAggregateArgs = {
    /**
     * Filter which Author to aggregate.
     * 
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     * 
    **/
    orderBy?: Enumerable<AuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Authors
    **/
    _count?: true | AuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorMaxAggregateInputType
  }

  export type GetAuthorAggregateType<T extends AuthorAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthor[P]>
      : GetScalarType<T[P], AggregateAuthor[P]>
  }




  export type AuthorGroupByArgs = {
    where?: AuthorWhereInput
    orderBy?: Enumerable<AuthorOrderByWithAggregationInput>
    by: Array<AuthorScalarFieldEnum>
    having?: AuthorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorCountAggregateInputType | true
    _avg?: AuthorAvgAggregateInputType
    _sum?: AuthorSumAggregateInputType
    _min?: AuthorMinAggregateInputType
    _max?: AuthorMaxAggregateInputType
  }


  export type AuthorGroupByOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    bio: string | null
    bipoc: boolean
    lgbtq: boolean
    _count: AuthorCountAggregateOutputType | null
    _avg: AuthorAvgAggregateOutputType | null
    _sum: AuthorSumAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  type GetAuthorGroupByPayload<T extends AuthorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AuthorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorGroupByOutputType[P]>
        }
      >
    >


  export type AuthorSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    bio?: boolean
    bipoc?: boolean
    lgbtq?: boolean
    books?: boolean | BookFindManyArgs
    _count?: boolean | AuthorCountOutputTypeArgs
  }


  export type AuthorInclude = {
    books?: boolean | BookFindManyArgs
    _count?: boolean | AuthorCountOutputTypeArgs
  } 

  export type AuthorGetPayload<S extends boolean | null | undefined | AuthorArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Author :
    S extends undefined ? never :
    S extends { include: any } & (AuthorArgs | AuthorFindManyArgs)
    ? Author  & {
    [P in TrueKeys<S['include']>]:
        P extends 'books' ? Array < BookGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? AuthorCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (AuthorArgs | AuthorFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'books' ? Array < BookGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? AuthorCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Author ? Author[P] : never
  } 
      : Author


  type AuthorCountArgs = Merge<
    Omit<AuthorFindManyArgs, 'select' | 'include'> & {
      select?: AuthorCountAggregateInputType | true
    }
  >

  export interface AuthorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Author that matches the filter.
     * @param {AuthorFindUniqueArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuthorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuthorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Author'> extends True ? Prisma__AuthorClient<AuthorGetPayload<T>> : Prisma__AuthorClient<AuthorGetPayload<T> | null, null>

    /**
     * Find the first Author that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindFirstArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuthorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuthorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Author'> extends True ? Prisma__AuthorClient<AuthorGetPayload<T>> : Prisma__AuthorClient<AuthorGetPayload<T> | null, null>

    /**
     * Find zero or more Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authors
     * const authors = await prisma.author.findMany()
     * 
     * // Get first 10 Authors
     * const authors = await prisma.author.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorWithIdOnly = await prisma.author.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuthorFindManyArgs>(
      args?: SelectSubset<T, AuthorFindManyArgs>
    ): PrismaPromise<Array<AuthorGetPayload<T>>>

    /**
     * Create a Author.
     * @param {AuthorCreateArgs} args - Arguments to create a Author.
     * @example
     * // Create one Author
     * const Author = await prisma.author.create({
     *   data: {
     *     // ... data to create a Author
     *   }
     * })
     * 
    **/
    create<T extends AuthorCreateArgs>(
      args: SelectSubset<T, AuthorCreateArgs>
    ): Prisma__AuthorClient<AuthorGetPayload<T>>

    /**
     * Create many Authors.
     *     @param {AuthorCreateManyArgs} args - Arguments to create many Authors.
     *     @example
     *     // Create many Authors
     *     const author = await prisma.author.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuthorCreateManyArgs>(
      args?: SelectSubset<T, AuthorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Author.
     * @param {AuthorDeleteArgs} args - Arguments to delete one Author.
     * @example
     * // Delete one Author
     * const Author = await prisma.author.delete({
     *   where: {
     *     // ... filter to delete one Author
     *   }
     * })
     * 
    **/
    delete<T extends AuthorDeleteArgs>(
      args: SelectSubset<T, AuthorDeleteArgs>
    ): Prisma__AuthorClient<AuthorGetPayload<T>>

    /**
     * Update one Author.
     * @param {AuthorUpdateArgs} args - Arguments to update one Author.
     * @example
     * // Update one Author
     * const author = await prisma.author.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuthorUpdateArgs>(
      args: SelectSubset<T, AuthorUpdateArgs>
    ): Prisma__AuthorClient<AuthorGetPayload<T>>

    /**
     * Delete zero or more Authors.
     * @param {AuthorDeleteManyArgs} args - Arguments to filter Authors to delete.
     * @example
     * // Delete a few Authors
     * const { count } = await prisma.author.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuthorDeleteManyArgs>(
      args?: SelectSubset<T, AuthorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authors
     * const author = await prisma.author.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuthorUpdateManyArgs>(
      args: SelectSubset<T, AuthorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Author.
     * @param {AuthorUpsertArgs} args - Arguments to update or create a Author.
     * @example
     * // Update or create a Author
     * const author = await prisma.author.upsert({
     *   create: {
     *     // ... data to create a Author
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Author we want to update
     *   }
     * })
    **/
    upsert<T extends AuthorUpsertArgs>(
      args: SelectSubset<T, AuthorUpsertArgs>
    ): Prisma__AuthorClient<AuthorGetPayload<T>>

    /**
     * Find one Author that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AuthorFindUniqueOrThrowArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuthorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AuthorFindUniqueOrThrowArgs>
    ): Prisma__AuthorClient<AuthorGetPayload<T>>

    /**
     * Find the first Author that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindFirstOrThrowArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuthorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AuthorFindFirstOrThrowArgs>
    ): Prisma__AuthorClient<AuthorGetPayload<T>>

    /**
     * Count the number of Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorCountArgs} args - Arguments to filter Authors to count.
     * @example
     * // Count the number of Authors
     * const count = await prisma.author.count({
     *   where: {
     *     // ... the filter for the Authors we want to count
     *   }
     * })
    **/
    count<T extends AuthorCountArgs>(
      args?: Subset<T, AuthorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorAggregateArgs>(args: Subset<T, AuthorAggregateArgs>): PrismaPromise<GetAuthorAggregateType<T>>

    /**
     * Group by Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorGroupByArgs['orderBy'] }
        : { orderBy?: AuthorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Author.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuthorClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends BookFindManyArgs= {}>(args?: Subset<T, BookFindManyArgs>): PrismaPromise<Array<BookGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Author base type for findUnique actions
   */
  export type AuthorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * Filter, which Author to fetch.
     * 
    **/
    where: AuthorWhereUniqueInput
  }

  /**
   * Author: findUnique
   */
  export interface AuthorFindUniqueArgs extends AuthorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Author base type for findFirst actions
   */
  export type AuthorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * Filter, which Author to fetch.
     * 
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     * 
    **/
    orderBy?: Enumerable<AuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authors.
     * 
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authors.
     * 
    **/
    distinct?: Enumerable<AuthorScalarFieldEnum>
  }

  /**
   * Author: findFirst
   */
  export interface AuthorFindFirstArgs extends AuthorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Author findMany
   */
  export type AuthorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * Filter, which Authors to fetch.
     * 
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     * 
    **/
    orderBy?: Enumerable<AuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Authors.
     * 
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AuthorScalarFieldEnum>
  }


  /**
   * Author create
   */
  export type AuthorCreateArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * The data needed to create a Author.
     * 
    **/
    data: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
  }


  /**
   * Author createMany
   */
  export type AuthorCreateManyArgs = {
    /**
     * The data used to create many Authors.
     * 
    **/
    data: Enumerable<AuthorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Author update
   */
  export type AuthorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * The data needed to update a Author.
     * 
    **/
    data: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
    /**
     * Choose, which Author to update.
     * 
    **/
    where: AuthorWhereUniqueInput
  }


  /**
   * Author updateMany
   */
  export type AuthorUpdateManyArgs = {
    /**
     * The data used to update Authors.
     * 
    **/
    data: XOR<AuthorUpdateManyMutationInput, AuthorUncheckedUpdateManyInput>
    /**
     * Filter which Authors to update
     * 
    **/
    where?: AuthorWhereInput
  }


  /**
   * Author upsert
   */
  export type AuthorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * The filter to search for the Author to update in case it exists.
     * 
    **/
    where: AuthorWhereUniqueInput
    /**
     * In case the Author found by the `where` argument doesn't exist, create a new Author with this data.
     * 
    **/
    create: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
    /**
     * In case the Author was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
  }


  /**
   * Author delete
   */
  export type AuthorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * Filter which Author to delete.
     * 
    **/
    where: AuthorWhereUniqueInput
  }


  /**
   * Author deleteMany
   */
  export type AuthorDeleteManyArgs = {
    /**
     * Filter which Authors to delete
     * 
    **/
    where?: AuthorWhereInput
  }


  /**
   * Author: findUniqueOrThrow
   */
  export type AuthorFindUniqueOrThrowArgs = AuthorFindUniqueArgsBase
      

  /**
   * Author: findFirstOrThrow
   */
  export type AuthorFindFirstOrThrowArgs = AuthorFindFirstArgsBase
      

  /**
   * Author without action
   */
  export type AuthorArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
  }



  /**
   * Model Book
   */


  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type BookSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type BookMinAggregateOutputType = {
    id: number | null
    authorId: number | null
    synopsys: string | null
    imageUrl: string | null
    releaseDate: Date | null
  }

  export type BookMaxAggregateOutputType = {
    id: number | null
    authorId: number | null
    synopsys: string | null
    imageUrl: string | null
    releaseDate: Date | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    authorId: number
    isbn: number
    synopsys: number
    imageUrl: number
    releaseDate: number
    _all: number
  }


  export type BookAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type BookSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type BookMinAggregateInputType = {
    id?: true
    authorId?: true
    synopsys?: true
    imageUrl?: true
    releaseDate?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    authorId?: true
    synopsys?: true
    imageUrl?: true
    releaseDate?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    authorId?: true
    isbn?: true
    synopsys?: true
    imageUrl?: true
    releaseDate?: true
    _all?: true
  }

  export type BookAggregateArgs = {
    /**
     * Filter which Book to aggregate.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }




  export type BookGroupByArgs = {
    where?: BookWhereInput
    orderBy?: Enumerable<BookOrderByWithAggregationInput>
    by: Array<BookScalarFieldEnum>
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _avg?: BookAvgAggregateInputType
    _sum?: BookSumAggregateInputType
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }


  export type BookGroupByOutputType = {
    id: number
    authorId: number
    isbn: string[]
    synopsys: string
    imageUrl: string | null
    releaseDate: Date | null
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGroupByOutputType[P]>
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      >
    >


  export type BookSelect = {
    id?: boolean
    Author?: boolean | AuthorArgs
    authorId?: boolean
    isbn?: boolean
    synopsys?: boolean
    imageUrl?: boolean
    genre?: boolean | GenreFindManyArgs
    releaseDate?: boolean
    engagement?: boolean | UserBookFindManyArgs
    clubs?: boolean | ClubBookFindManyArgs
    _count?: boolean | BookCountOutputTypeArgs
  }


  export type BookInclude = {
    Author?: boolean | AuthorArgs
    genre?: boolean | GenreFindManyArgs
    engagement?: boolean | UserBookFindManyArgs
    clubs?: boolean | ClubBookFindManyArgs
    _count?: boolean | BookCountOutputTypeArgs
  } 

  export type BookGetPayload<S extends boolean | null | undefined | BookArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Book :
    S extends undefined ? never :
    S extends { include: any } & (BookArgs | BookFindManyArgs)
    ? Book  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Author' ? AuthorGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'genre' ? Array < GenreGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'engagement' ? Array < UserBookGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'clubs' ? Array < ClubBookGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? BookCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (BookArgs | BookFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Author' ? AuthorGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'genre' ? Array < GenreGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'engagement' ? Array < UserBookGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'clubs' ? Array < ClubBookGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? BookCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Book ? Book[P] : never
  } 
      : Book


  type BookCountArgs = Merge<
    Omit<BookFindManyArgs, 'select' | 'include'> & {
      select?: BookCountAggregateInputType | true
    }
  >

  export interface BookDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Book'> extends True ? Prisma__BookClient<BookGetPayload<T>> : Prisma__BookClient<BookGetPayload<T> | null, null>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Book'> extends True ? Prisma__BookClient<BookGetPayload<T>> : Prisma__BookClient<BookGetPayload<T> | null, null>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookFindManyArgs>(
      args?: SelectSubset<T, BookFindManyArgs>
    ): PrismaPromise<Array<BookGetPayload<T>>>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
    **/
    create<T extends BookCreateArgs>(
      args: SelectSubset<T, BookCreateArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Create many Books.
     *     @param {BookCreateManyArgs} args - Arguments to create many Books.
     *     @example
     *     // Create many Books
     *     const book = await prisma.book.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookCreateManyArgs>(
      args?: SelectSubset<T, BookCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
    **/
    delete<T extends BookDeleteArgs>(
      args: SelectSubset<T, BookDeleteArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookUpdateArgs>(
      args: SelectSubset<T, BookUpdateArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookDeleteManyArgs>(
      args?: SelectSubset<T, BookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookUpdateManyArgs>(
      args: SelectSubset<T, BookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
    **/
    upsert<T extends BookUpsertArgs>(
      args: SelectSubset<T, BookUpsertArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Find one Book that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookFindUniqueOrThrowArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Find the first Book that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookFindFirstOrThrowArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Author<T extends AuthorArgs= {}>(args?: Subset<T, AuthorArgs>): Prisma__AuthorClient<AuthorGetPayload<T> | Null>;

    genre<T extends GenreFindManyArgs= {}>(args?: Subset<T, GenreFindManyArgs>): PrismaPromise<Array<GenreGetPayload<T>>| Null>;

    engagement<T extends UserBookFindManyArgs= {}>(args?: Subset<T, UserBookFindManyArgs>): PrismaPromise<Array<UserBookGetPayload<T>>| Null>;

    clubs<T extends ClubBookFindManyArgs= {}>(args?: Subset<T, ClubBookFindManyArgs>): PrismaPromise<Array<ClubBookGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Book base type for findUnique actions
   */
  export type BookFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Book to fetch.
     * 
    **/
    where: BookWhereUniqueInput
  }

  /**
   * Book: findUnique
   */
  export interface BookFindUniqueArgs extends BookFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Book base type for findFirst actions
   */
  export type BookFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Book to fetch.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     * 
    **/
    distinct?: Enumerable<BookScalarFieldEnum>
  }

  /**
   * Book: findFirst
   */
  export interface BookFindFirstArgs extends BookFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Book findMany
   */
  export type BookFindManyArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Books to fetch.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookScalarFieldEnum>
  }


  /**
   * Book create
   */
  export type BookCreateArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The data needed to create a Book.
     * 
    **/
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }


  /**
   * Book createMany
   */
  export type BookCreateManyArgs = {
    /**
     * The data used to create many Books.
     * 
    **/
    data: Enumerable<BookCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Book update
   */
  export type BookUpdateArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The data needed to update a Book.
     * 
    **/
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs = {
    /**
     * The data used to update Books.
     * 
    **/
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     * 
    **/
    where?: BookWhereInput
  }


  /**
   * Book upsert
   */
  export type BookUpsertArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The filter to search for the Book to update in case it exists.
     * 
    **/
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     * 
    **/
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }


  /**
   * Book delete
   */
  export type BookDeleteArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter which Book to delete.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs = {
    /**
     * Filter which Books to delete
     * 
    **/
    where?: BookWhereInput
  }


  /**
   * Book: findUniqueOrThrow
   */
  export type BookFindUniqueOrThrowArgs = BookFindUniqueArgsBase
      

  /**
   * Book: findFirstOrThrow
   */
  export type BookFindFirstOrThrowArgs = BookFindFirstArgsBase
      

  /**
   * Book without action
   */
  export type BookArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
  }



  /**
   * Model Club
   */


  export type AggregateClub = {
    _count: ClubCountAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  export type ClubMinAggregateOutputType = {
    id: string | null
    clubName: string | null
  }

  export type ClubMaxAggregateOutputType = {
    id: string | null
    clubName: string | null
  }

  export type ClubCountAggregateOutputType = {
    id: number
    clubName: number
    _all: number
  }


  export type ClubMinAggregateInputType = {
    id?: true
    clubName?: true
  }

  export type ClubMaxAggregateInputType = {
    id?: true
    clubName?: true
  }

  export type ClubCountAggregateInputType = {
    id?: true
    clubName?: true
    _all?: true
  }

  export type ClubAggregateArgs = {
    /**
     * Filter which Club to aggregate.
     * 
    **/
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     * 
    **/
    orderBy?: Enumerable<ClubOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clubs
    **/
    _count?: true | ClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubMaxAggregateInputType
  }

  export type GetClubAggregateType<T extends ClubAggregateArgs> = {
        [P in keyof T & keyof AggregateClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClub[P]>
      : GetScalarType<T[P], AggregateClub[P]>
  }




  export type ClubGroupByArgs = {
    where?: ClubWhereInput
    orderBy?: Enumerable<ClubOrderByWithAggregationInput>
    by: Array<ClubScalarFieldEnum>
    having?: ClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubCountAggregateInputType | true
    _min?: ClubMinAggregateInputType
    _max?: ClubMaxAggregateInputType
  }


  export type ClubGroupByOutputType = {
    id: string
    clubName: string
    _count: ClubCountAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  type GetClubGroupByPayload<T extends ClubGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubGroupByOutputType[P]>
            : GetScalarType<T[P], ClubGroupByOutputType[P]>
        }
      >
    >


  export type ClubSelect = {
    id?: boolean
    clubName?: boolean
    members?: boolean | UserFindManyArgs
    books?: boolean | ClubBookFindManyArgs
    meetings?: boolean | MeetingFindManyArgs
    conversations?: boolean | ConversationFindManyArgs
    _count?: boolean | ClubCountOutputTypeArgs
  }


  export type ClubInclude = {
    members?: boolean | UserFindManyArgs
    books?: boolean | ClubBookFindManyArgs
    meetings?: boolean | MeetingFindManyArgs
    conversations?: boolean | ConversationFindManyArgs
    _count?: boolean | ClubCountOutputTypeArgs
  } 

  export type ClubGetPayload<S extends boolean | null | undefined | ClubArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Club :
    S extends undefined ? never :
    S extends { include: any } & (ClubArgs | ClubFindManyArgs)
    ? Club  & {
    [P in TrueKeys<S['include']>]:
        P extends 'members' ? Array < UserGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'books' ? Array < ClubBookGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'meetings' ? Array < MeetingGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'conversations' ? Array < ConversationGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ClubCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ClubArgs | ClubFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'members' ? Array < UserGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'books' ? Array < ClubBookGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'meetings' ? Array < MeetingGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'conversations' ? Array < ConversationGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ClubCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Club ? Club[P] : never
  } 
      : Club


  type ClubCountArgs = Merge<
    Omit<ClubFindManyArgs, 'select' | 'include'> & {
      select?: ClubCountAggregateInputType | true
    }
  >

  export interface ClubDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Club that matches the filter.
     * @param {ClubFindUniqueArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClubFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClubFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Club'> extends True ? Prisma__ClubClient<ClubGetPayload<T>> : Prisma__ClubClient<ClubGetPayload<T> | null, null>

    /**
     * Find the first Club that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClubFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClubFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Club'> extends True ? Prisma__ClubClient<ClubGetPayload<T>> : Prisma__ClubClient<ClubGetPayload<T> | null, null>

    /**
     * Find zero or more Clubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clubs
     * const clubs = await prisma.club.findMany()
     * 
     * // Get first 10 Clubs
     * const clubs = await prisma.club.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubWithIdOnly = await prisma.club.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClubFindManyArgs>(
      args?: SelectSubset<T, ClubFindManyArgs>
    ): PrismaPromise<Array<ClubGetPayload<T>>>

    /**
     * Create a Club.
     * @param {ClubCreateArgs} args - Arguments to create a Club.
     * @example
     * // Create one Club
     * const Club = await prisma.club.create({
     *   data: {
     *     // ... data to create a Club
     *   }
     * })
     * 
    **/
    create<T extends ClubCreateArgs>(
      args: SelectSubset<T, ClubCreateArgs>
    ): Prisma__ClubClient<ClubGetPayload<T>>

    /**
     * Create many Clubs.
     *     @param {ClubCreateManyArgs} args - Arguments to create many Clubs.
     *     @example
     *     // Create many Clubs
     *     const club = await prisma.club.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClubCreateManyArgs>(
      args?: SelectSubset<T, ClubCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Club.
     * @param {ClubDeleteArgs} args - Arguments to delete one Club.
     * @example
     * // Delete one Club
     * const Club = await prisma.club.delete({
     *   where: {
     *     // ... filter to delete one Club
     *   }
     * })
     * 
    **/
    delete<T extends ClubDeleteArgs>(
      args: SelectSubset<T, ClubDeleteArgs>
    ): Prisma__ClubClient<ClubGetPayload<T>>

    /**
     * Update one Club.
     * @param {ClubUpdateArgs} args - Arguments to update one Club.
     * @example
     * // Update one Club
     * const club = await prisma.club.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClubUpdateArgs>(
      args: SelectSubset<T, ClubUpdateArgs>
    ): Prisma__ClubClient<ClubGetPayload<T>>

    /**
     * Delete zero or more Clubs.
     * @param {ClubDeleteManyArgs} args - Arguments to filter Clubs to delete.
     * @example
     * // Delete a few Clubs
     * const { count } = await prisma.club.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClubDeleteManyArgs>(
      args?: SelectSubset<T, ClubDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClubUpdateManyArgs>(
      args: SelectSubset<T, ClubUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Club.
     * @param {ClubUpsertArgs} args - Arguments to update or create a Club.
     * @example
     * // Update or create a Club
     * const club = await prisma.club.upsert({
     *   create: {
     *     // ... data to create a Club
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Club we want to update
     *   }
     * })
    **/
    upsert<T extends ClubUpsertArgs>(
      args: SelectSubset<T, ClubUpsertArgs>
    ): Prisma__ClubClient<ClubGetPayload<T>>

    /**
     * Find one Club that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ClubFindUniqueOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClubFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClubFindUniqueOrThrowArgs>
    ): Prisma__ClubClient<ClubGetPayload<T>>

    /**
     * Find the first Club that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClubFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClubFindFirstOrThrowArgs>
    ): Prisma__ClubClient<ClubGetPayload<T>>

    /**
     * Count the number of Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubCountArgs} args - Arguments to filter Clubs to count.
     * @example
     * // Count the number of Clubs
     * const count = await prisma.club.count({
     *   where: {
     *     // ... the filter for the Clubs we want to count
     *   }
     * })
    **/
    count<T extends ClubCountArgs>(
      args?: Subset<T, ClubCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubAggregateArgs>(args: Subset<T, ClubAggregateArgs>): PrismaPromise<GetClubAggregateType<T>>

    /**
     * Group by Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubGroupByArgs['orderBy'] }
        : { orderBy?: ClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Club.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClubClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    members<T extends UserFindManyArgs= {}>(args?: Subset<T, UserFindManyArgs>): PrismaPromise<Array<UserGetPayload<T>>| Null>;

    books<T extends ClubBookFindManyArgs= {}>(args?: Subset<T, ClubBookFindManyArgs>): PrismaPromise<Array<ClubBookGetPayload<T>>| Null>;

    meetings<T extends MeetingFindManyArgs= {}>(args?: Subset<T, MeetingFindManyArgs>): PrismaPromise<Array<MeetingGetPayload<T>>| Null>;

    conversations<T extends ConversationFindManyArgs= {}>(args?: Subset<T, ConversationFindManyArgs>): PrismaPromise<Array<ConversationGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Club base type for findUnique actions
   */
  export type ClubFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Club
     * 
    **/
    select?: ClubSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubInclude | null
    /**
     * Filter, which Club to fetch.
     * 
    **/
    where: ClubWhereUniqueInput
  }

  /**
   * Club: findUnique
   */
  export interface ClubFindUniqueArgs extends ClubFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Club base type for findFirst actions
   */
  export type ClubFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Club
     * 
    **/
    select?: ClubSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubInclude | null
    /**
     * Filter, which Club to fetch.
     * 
    **/
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     * 
    **/
    orderBy?: Enumerable<ClubOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     * 
    **/
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     * 
    **/
    distinct?: Enumerable<ClubScalarFieldEnum>
  }

  /**
   * Club: findFirst
   */
  export interface ClubFindFirstArgs extends ClubFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Club findMany
   */
  export type ClubFindManyArgs = {
    /**
     * Select specific fields to fetch from the Club
     * 
    **/
    select?: ClubSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubInclude | null
    /**
     * Filter, which Clubs to fetch.
     * 
    **/
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     * 
    **/
    orderBy?: Enumerable<ClubOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clubs.
     * 
    **/
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClubScalarFieldEnum>
  }


  /**
   * Club create
   */
  export type ClubCreateArgs = {
    /**
     * Select specific fields to fetch from the Club
     * 
    **/
    select?: ClubSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubInclude | null
    /**
     * The data needed to create a Club.
     * 
    **/
    data: XOR<ClubCreateInput, ClubUncheckedCreateInput>
  }


  /**
   * Club createMany
   */
  export type ClubCreateManyArgs = {
    /**
     * The data used to create many Clubs.
     * 
    **/
    data: Enumerable<ClubCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Club update
   */
  export type ClubUpdateArgs = {
    /**
     * Select specific fields to fetch from the Club
     * 
    **/
    select?: ClubSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubInclude | null
    /**
     * The data needed to update a Club.
     * 
    **/
    data: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
    /**
     * Choose, which Club to update.
     * 
    **/
    where: ClubWhereUniqueInput
  }


  /**
   * Club updateMany
   */
  export type ClubUpdateManyArgs = {
    /**
     * The data used to update Clubs.
     * 
    **/
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     * 
    **/
    where?: ClubWhereInput
  }


  /**
   * Club upsert
   */
  export type ClubUpsertArgs = {
    /**
     * Select specific fields to fetch from the Club
     * 
    **/
    select?: ClubSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubInclude | null
    /**
     * The filter to search for the Club to update in case it exists.
     * 
    **/
    where: ClubWhereUniqueInput
    /**
     * In case the Club found by the `where` argument doesn't exist, create a new Club with this data.
     * 
    **/
    create: XOR<ClubCreateInput, ClubUncheckedCreateInput>
    /**
     * In case the Club was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
  }


  /**
   * Club delete
   */
  export type ClubDeleteArgs = {
    /**
     * Select specific fields to fetch from the Club
     * 
    **/
    select?: ClubSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubInclude | null
    /**
     * Filter which Club to delete.
     * 
    **/
    where: ClubWhereUniqueInput
  }


  /**
   * Club deleteMany
   */
  export type ClubDeleteManyArgs = {
    /**
     * Filter which Clubs to delete
     * 
    **/
    where?: ClubWhereInput
  }


  /**
   * Club: findUniqueOrThrow
   */
  export type ClubFindUniqueOrThrowArgs = ClubFindUniqueArgsBase
      

  /**
   * Club: findFirstOrThrow
   */
  export type ClubFindFirstOrThrowArgs = ClubFindFirstArgsBase
      

  /**
   * Club without action
   */
  export type ClubArgs = {
    /**
     * Select specific fields to fetch from the Club
     * 
    **/
    select?: ClubSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubInclude | null
  }



  /**
   * Model UserBook
   */


  export type AggregateUserBook = {
    _count: UserBookCountAggregateOutputType | null
    _avg: UserBookAvgAggregateOutputType | null
    _sum: UserBookSumAggregateOutputType | null
    _min: UserBookMinAggregateOutputType | null
    _max: UserBookMaxAggregateOutputType | null
  }

  export type UserBookAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
  }

  export type UserBookSumAggregateOutputType = {
    id: number | null
    bookId: number | null
  }

  export type UserBookMinAggregateOutputType = {
    id: number | null
    bookId: number | null
    userId: string | null
    liked: boolean | null
    read: boolean | null
    inProgress: boolean | null
  }

  export type UserBookMaxAggregateOutputType = {
    id: number | null
    bookId: number | null
    userId: string | null
    liked: boolean | null
    read: boolean | null
    inProgress: boolean | null
  }

  export type UserBookCountAggregateOutputType = {
    id: number
    bookId: number
    userId: number
    liked: number
    read: number
    inProgress: number
    _all: number
  }


  export type UserBookAvgAggregateInputType = {
    id?: true
    bookId?: true
  }

  export type UserBookSumAggregateInputType = {
    id?: true
    bookId?: true
  }

  export type UserBookMinAggregateInputType = {
    id?: true
    bookId?: true
    userId?: true
    liked?: true
    read?: true
    inProgress?: true
  }

  export type UserBookMaxAggregateInputType = {
    id?: true
    bookId?: true
    userId?: true
    liked?: true
    read?: true
    inProgress?: true
  }

  export type UserBookCountAggregateInputType = {
    id?: true
    bookId?: true
    userId?: true
    liked?: true
    read?: true
    inProgress?: true
    _all?: true
  }

  export type UserBookAggregateArgs = {
    /**
     * Filter which UserBook to aggregate.
     * 
    **/
    where?: UserBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBooks to fetch.
     * 
    **/
    orderBy?: Enumerable<UserBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBooks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBooks
    **/
    _count?: true | UserBookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBookMaxAggregateInputType
  }

  export type GetUserBookAggregateType<T extends UserBookAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBook[P]>
      : GetScalarType<T[P], AggregateUserBook[P]>
  }




  export type UserBookGroupByArgs = {
    where?: UserBookWhereInput
    orderBy?: Enumerable<UserBookOrderByWithAggregationInput>
    by: Array<UserBookScalarFieldEnum>
    having?: UserBookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBookCountAggregateInputType | true
    _avg?: UserBookAvgAggregateInputType
    _sum?: UserBookSumAggregateInputType
    _min?: UserBookMinAggregateInputType
    _max?: UserBookMaxAggregateInputType
  }


  export type UserBookGroupByOutputType = {
    id: number
    bookId: number
    userId: string
    liked: boolean
    read: boolean
    inProgress: boolean
    _count: UserBookCountAggregateOutputType | null
    _avg: UserBookAvgAggregateOutputType | null
    _sum: UserBookSumAggregateOutputType | null
    _min: UserBookMinAggregateOutputType | null
    _max: UserBookMaxAggregateOutputType | null
  }

  type GetUserBookGroupByPayload<T extends UserBookGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserBookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBookGroupByOutputType[P]>
            : GetScalarType<T[P], UserBookGroupByOutputType[P]>
        }
      >
    >


  export type UserBookSelect = {
    id?: boolean
    Book?: boolean | BookArgs
    bookId?: boolean
    User?: boolean | UserArgs
    userId?: boolean
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }


  export type UserBookInclude = {
    Book?: boolean | BookArgs
    User?: boolean | UserArgs
  } 

  export type UserBookGetPayload<S extends boolean | null | undefined | UserBookArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserBook :
    S extends undefined ? never :
    S extends { include: any } & (UserBookArgs | UserBookFindManyArgs)
    ? UserBook  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'User' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (UserBookArgs | UserBookFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'User' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof UserBook ? UserBook[P] : never
  } 
      : UserBook


  type UserBookCountArgs = Merge<
    Omit<UserBookFindManyArgs, 'select' | 'include'> & {
      select?: UserBookCountAggregateInputType | true
    }
  >

  export interface UserBookDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserBook that matches the filter.
     * @param {UserBookFindUniqueArgs} args - Arguments to find a UserBook
     * @example
     * // Get one UserBook
     * const userBook = await prisma.userBook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserBookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserBookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserBook'> extends True ? Prisma__UserBookClient<UserBookGetPayload<T>> : Prisma__UserBookClient<UserBookGetPayload<T> | null, null>

    /**
     * Find the first UserBook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFindFirstArgs} args - Arguments to find a UserBook
     * @example
     * // Get one UserBook
     * const userBook = await prisma.userBook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserBookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserBookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserBook'> extends True ? Prisma__UserBookClient<UserBookGetPayload<T>> : Prisma__UserBookClient<UserBookGetPayload<T> | null, null>

    /**
     * Find zero or more UserBooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBooks
     * const userBooks = await prisma.userBook.findMany()
     * 
     * // Get first 10 UserBooks
     * const userBooks = await prisma.userBook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBookWithIdOnly = await prisma.userBook.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserBookFindManyArgs>(
      args?: SelectSubset<T, UserBookFindManyArgs>
    ): PrismaPromise<Array<UserBookGetPayload<T>>>

    /**
     * Create a UserBook.
     * @param {UserBookCreateArgs} args - Arguments to create a UserBook.
     * @example
     * // Create one UserBook
     * const UserBook = await prisma.userBook.create({
     *   data: {
     *     // ... data to create a UserBook
     *   }
     * })
     * 
    **/
    create<T extends UserBookCreateArgs>(
      args: SelectSubset<T, UserBookCreateArgs>
    ): Prisma__UserBookClient<UserBookGetPayload<T>>

    /**
     * Create many UserBooks.
     *     @param {UserBookCreateManyArgs} args - Arguments to create many UserBooks.
     *     @example
     *     // Create many UserBooks
     *     const userBook = await prisma.userBook.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserBookCreateManyArgs>(
      args?: SelectSubset<T, UserBookCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserBook.
     * @param {UserBookDeleteArgs} args - Arguments to delete one UserBook.
     * @example
     * // Delete one UserBook
     * const UserBook = await prisma.userBook.delete({
     *   where: {
     *     // ... filter to delete one UserBook
     *   }
     * })
     * 
    **/
    delete<T extends UserBookDeleteArgs>(
      args: SelectSubset<T, UserBookDeleteArgs>
    ): Prisma__UserBookClient<UserBookGetPayload<T>>

    /**
     * Update one UserBook.
     * @param {UserBookUpdateArgs} args - Arguments to update one UserBook.
     * @example
     * // Update one UserBook
     * const userBook = await prisma.userBook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserBookUpdateArgs>(
      args: SelectSubset<T, UserBookUpdateArgs>
    ): Prisma__UserBookClient<UserBookGetPayload<T>>

    /**
     * Delete zero or more UserBooks.
     * @param {UserBookDeleteManyArgs} args - Arguments to filter UserBooks to delete.
     * @example
     * // Delete a few UserBooks
     * const { count } = await prisma.userBook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserBookDeleteManyArgs>(
      args?: SelectSubset<T, UserBookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBooks
     * const userBook = await prisma.userBook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserBookUpdateManyArgs>(
      args: SelectSubset<T, UserBookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBook.
     * @param {UserBookUpsertArgs} args - Arguments to update or create a UserBook.
     * @example
     * // Update or create a UserBook
     * const userBook = await prisma.userBook.upsert({
     *   create: {
     *     // ... data to create a UserBook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBook we want to update
     *   }
     * })
    **/
    upsert<T extends UserBookUpsertArgs>(
      args: SelectSubset<T, UserBookUpsertArgs>
    ): Prisma__UserBookClient<UserBookGetPayload<T>>

    /**
     * Find one UserBook that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserBookFindUniqueOrThrowArgs} args - Arguments to find a UserBook
     * @example
     * // Get one UserBook
     * const userBook = await prisma.userBook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserBookFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserBookFindUniqueOrThrowArgs>
    ): Prisma__UserBookClient<UserBookGetPayload<T>>

    /**
     * Find the first UserBook that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFindFirstOrThrowArgs} args - Arguments to find a UserBook
     * @example
     * // Get one UserBook
     * const userBook = await prisma.userBook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserBookFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserBookFindFirstOrThrowArgs>
    ): Prisma__UserBookClient<UserBookGetPayload<T>>

    /**
     * Count the number of UserBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookCountArgs} args - Arguments to filter UserBooks to count.
     * @example
     * // Count the number of UserBooks
     * const count = await prisma.userBook.count({
     *   where: {
     *     // ... the filter for the UserBooks we want to count
     *   }
     * })
    **/
    count<T extends UserBookCountArgs>(
      args?: Subset<T, UserBookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBookAggregateArgs>(args: Subset<T, UserBookAggregateArgs>): PrismaPromise<GetUserBookAggregateType<T>>

    /**
     * Group by UserBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBookGroupByArgs['orderBy'] }
        : { orderBy?: UserBookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBookGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserBookClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Book<T extends BookArgs= {}>(args?: Subset<T, BookArgs>): Prisma__BookClient<BookGetPayload<T> | Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserBook base type for findUnique actions
   */
  export type UserBookFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserBook
     * 
    **/
    select?: UserBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookInclude | null
    /**
     * Filter, which UserBook to fetch.
     * 
    **/
    where: UserBookWhereUniqueInput
  }

  /**
   * UserBook: findUnique
   */
  export interface UserBookFindUniqueArgs extends UserBookFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserBook base type for findFirst actions
   */
  export type UserBookFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserBook
     * 
    **/
    select?: UserBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookInclude | null
    /**
     * Filter, which UserBook to fetch.
     * 
    **/
    where?: UserBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBooks to fetch.
     * 
    **/
    orderBy?: Enumerable<UserBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBooks.
     * 
    **/
    cursor?: UserBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBooks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBooks.
     * 
    **/
    distinct?: Enumerable<UserBookScalarFieldEnum>
  }

  /**
   * UserBook: findFirst
   */
  export interface UserBookFindFirstArgs extends UserBookFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserBook findMany
   */
  export type UserBookFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserBook
     * 
    **/
    select?: UserBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookInclude | null
    /**
     * Filter, which UserBooks to fetch.
     * 
    **/
    where?: UserBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBooks to fetch.
     * 
    **/
    orderBy?: Enumerable<UserBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBooks.
     * 
    **/
    cursor?: UserBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBooks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserBookScalarFieldEnum>
  }


  /**
   * UserBook create
   */
  export type UserBookCreateArgs = {
    /**
     * Select specific fields to fetch from the UserBook
     * 
    **/
    select?: UserBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookInclude | null
    /**
     * The data needed to create a UserBook.
     * 
    **/
    data: XOR<UserBookCreateInput, UserBookUncheckedCreateInput>
  }


  /**
   * UserBook createMany
   */
  export type UserBookCreateManyArgs = {
    /**
     * The data used to create many UserBooks.
     * 
    **/
    data: Enumerable<UserBookCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserBook update
   */
  export type UserBookUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserBook
     * 
    **/
    select?: UserBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookInclude | null
    /**
     * The data needed to update a UserBook.
     * 
    **/
    data: XOR<UserBookUpdateInput, UserBookUncheckedUpdateInput>
    /**
     * Choose, which UserBook to update.
     * 
    **/
    where: UserBookWhereUniqueInput
  }


  /**
   * UserBook updateMany
   */
  export type UserBookUpdateManyArgs = {
    /**
     * The data used to update UserBooks.
     * 
    **/
    data: XOR<UserBookUpdateManyMutationInput, UserBookUncheckedUpdateManyInput>
    /**
     * Filter which UserBooks to update
     * 
    **/
    where?: UserBookWhereInput
  }


  /**
   * UserBook upsert
   */
  export type UserBookUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserBook
     * 
    **/
    select?: UserBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookInclude | null
    /**
     * The filter to search for the UserBook to update in case it exists.
     * 
    **/
    where: UserBookWhereUniqueInput
    /**
     * In case the UserBook found by the `where` argument doesn't exist, create a new UserBook with this data.
     * 
    **/
    create: XOR<UserBookCreateInput, UserBookUncheckedCreateInput>
    /**
     * In case the UserBook was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserBookUpdateInput, UserBookUncheckedUpdateInput>
  }


  /**
   * UserBook delete
   */
  export type UserBookDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserBook
     * 
    **/
    select?: UserBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookInclude | null
    /**
     * Filter which UserBook to delete.
     * 
    **/
    where: UserBookWhereUniqueInput
  }


  /**
   * UserBook deleteMany
   */
  export type UserBookDeleteManyArgs = {
    /**
     * Filter which UserBooks to delete
     * 
    **/
    where?: UserBookWhereInput
  }


  /**
   * UserBook: findUniqueOrThrow
   */
  export type UserBookFindUniqueOrThrowArgs = UserBookFindUniqueArgsBase
      

  /**
   * UserBook: findFirstOrThrow
   */
  export type UserBookFindFirstOrThrowArgs = UserBookFindFirstArgsBase
      

  /**
   * UserBook without action
   */
  export type UserBookArgs = {
    /**
     * Select specific fields to fetch from the UserBook
     * 
    **/
    select?: UserBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookInclude | null
  }



  /**
   * Model ClubBook
   */


  export type AggregateClubBook = {
    _count: ClubBookCountAggregateOutputType | null
    _avg: ClubBookAvgAggregateOutputType | null
    _sum: ClubBookSumAggregateOutputType | null
    _min: ClubBookMinAggregateOutputType | null
    _max: ClubBookMaxAggregateOutputType | null
  }

  export type ClubBookAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    upVotes: number | null
  }

  export type ClubBookSumAggregateOutputType = {
    id: number | null
    bookId: number | null
    upVotes: number | null
  }

  export type ClubBookMinAggregateOutputType = {
    id: number | null
    bookId: number | null
    clubId: string | null
    status: ClubBookStatus | null
    upVotes: number | null
    startedOn: Date | null
    completedOn: Date | null
  }

  export type ClubBookMaxAggregateOutputType = {
    id: number | null
    bookId: number | null
    clubId: string | null
    status: ClubBookStatus | null
    upVotes: number | null
    startedOn: Date | null
    completedOn: Date | null
  }

  export type ClubBookCountAggregateOutputType = {
    id: number
    bookId: number
    clubId: number
    status: number
    upVotes: number
    startedOn: number
    completedOn: number
    _all: number
  }


  export type ClubBookAvgAggregateInputType = {
    id?: true
    bookId?: true
    upVotes?: true
  }

  export type ClubBookSumAggregateInputType = {
    id?: true
    bookId?: true
    upVotes?: true
  }

  export type ClubBookMinAggregateInputType = {
    id?: true
    bookId?: true
    clubId?: true
    status?: true
    upVotes?: true
    startedOn?: true
    completedOn?: true
  }

  export type ClubBookMaxAggregateInputType = {
    id?: true
    bookId?: true
    clubId?: true
    status?: true
    upVotes?: true
    startedOn?: true
    completedOn?: true
  }

  export type ClubBookCountAggregateInputType = {
    id?: true
    bookId?: true
    clubId?: true
    status?: true
    upVotes?: true
    startedOn?: true
    completedOn?: true
    _all?: true
  }

  export type ClubBookAggregateArgs = {
    /**
     * Filter which ClubBook to aggregate.
     * 
    **/
    where?: ClubBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubBooks to fetch.
     * 
    **/
    orderBy?: Enumerable<ClubBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClubBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubBooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubBooks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClubBooks
    **/
    _count?: true | ClubBookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClubBookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClubBookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubBookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubBookMaxAggregateInputType
  }

  export type GetClubBookAggregateType<T extends ClubBookAggregateArgs> = {
        [P in keyof T & keyof AggregateClubBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClubBook[P]>
      : GetScalarType<T[P], AggregateClubBook[P]>
  }




  export type ClubBookGroupByArgs = {
    where?: ClubBookWhereInput
    orderBy?: Enumerable<ClubBookOrderByWithAggregationInput>
    by: Array<ClubBookScalarFieldEnum>
    having?: ClubBookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubBookCountAggregateInputType | true
    _avg?: ClubBookAvgAggregateInputType
    _sum?: ClubBookSumAggregateInputType
    _min?: ClubBookMinAggregateInputType
    _max?: ClubBookMaxAggregateInputType
  }


  export type ClubBookGroupByOutputType = {
    id: number
    bookId: number
    clubId: string
    status: ClubBookStatus
    upVotes: number
    startedOn: Date
    completedOn: Date
    _count: ClubBookCountAggregateOutputType | null
    _avg: ClubBookAvgAggregateOutputType | null
    _sum: ClubBookSumAggregateOutputType | null
    _min: ClubBookMinAggregateOutputType | null
    _max: ClubBookMaxAggregateOutputType | null
  }

  type GetClubBookGroupByPayload<T extends ClubBookGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClubBookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubBookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubBookGroupByOutputType[P]>
            : GetScalarType<T[P], ClubBookGroupByOutputType[P]>
        }
      >
    >


  export type ClubBookSelect = {
    id?: boolean
    Book?: boolean | BookArgs
    bookId?: boolean
    Club?: boolean | ClubArgs
    clubId?: boolean
    status?: boolean
    upVotes?: boolean
    startedOn?: boolean
    completedOn?: boolean
    conversations?: boolean | ConversationFindManyArgs
    meetings?: boolean | MeetingFindManyArgs
    _count?: boolean | ClubBookCountOutputTypeArgs
  }


  export type ClubBookInclude = {
    Book?: boolean | BookArgs
    Club?: boolean | ClubArgs
    conversations?: boolean | ConversationFindManyArgs
    meetings?: boolean | MeetingFindManyArgs
    _count?: boolean | ClubBookCountOutputTypeArgs
  } 

  export type ClubBookGetPayload<S extends boolean | null | undefined | ClubBookArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClubBook :
    S extends undefined ? never :
    S extends { include: any } & (ClubBookArgs | ClubBookFindManyArgs)
    ? ClubBook  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Club' ? ClubGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'conversations' ? Array < ConversationGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'meetings' ? Array < MeetingGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ClubBookCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ClubBookArgs | ClubBookFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Club' ? ClubGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'conversations' ? Array < ConversationGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'meetings' ? Array < MeetingGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ClubBookCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof ClubBook ? ClubBook[P] : never
  } 
      : ClubBook


  type ClubBookCountArgs = Merge<
    Omit<ClubBookFindManyArgs, 'select' | 'include'> & {
      select?: ClubBookCountAggregateInputType | true
    }
  >

  export interface ClubBookDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ClubBook that matches the filter.
     * @param {ClubBookFindUniqueArgs} args - Arguments to find a ClubBook
     * @example
     * // Get one ClubBook
     * const clubBook = await prisma.clubBook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClubBookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClubBookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ClubBook'> extends True ? Prisma__ClubBookClient<ClubBookGetPayload<T>> : Prisma__ClubBookClient<ClubBookGetPayload<T> | null, null>

    /**
     * Find the first ClubBook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubBookFindFirstArgs} args - Arguments to find a ClubBook
     * @example
     * // Get one ClubBook
     * const clubBook = await prisma.clubBook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClubBookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClubBookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ClubBook'> extends True ? Prisma__ClubBookClient<ClubBookGetPayload<T>> : Prisma__ClubBookClient<ClubBookGetPayload<T> | null, null>

    /**
     * Find zero or more ClubBooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubBookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClubBooks
     * const clubBooks = await prisma.clubBook.findMany()
     * 
     * // Get first 10 ClubBooks
     * const clubBooks = await prisma.clubBook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubBookWithIdOnly = await prisma.clubBook.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClubBookFindManyArgs>(
      args?: SelectSubset<T, ClubBookFindManyArgs>
    ): PrismaPromise<Array<ClubBookGetPayload<T>>>

    /**
     * Create a ClubBook.
     * @param {ClubBookCreateArgs} args - Arguments to create a ClubBook.
     * @example
     * // Create one ClubBook
     * const ClubBook = await prisma.clubBook.create({
     *   data: {
     *     // ... data to create a ClubBook
     *   }
     * })
     * 
    **/
    create<T extends ClubBookCreateArgs>(
      args: SelectSubset<T, ClubBookCreateArgs>
    ): Prisma__ClubBookClient<ClubBookGetPayload<T>>

    /**
     * Create many ClubBooks.
     *     @param {ClubBookCreateManyArgs} args - Arguments to create many ClubBooks.
     *     @example
     *     // Create many ClubBooks
     *     const clubBook = await prisma.clubBook.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClubBookCreateManyArgs>(
      args?: SelectSubset<T, ClubBookCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ClubBook.
     * @param {ClubBookDeleteArgs} args - Arguments to delete one ClubBook.
     * @example
     * // Delete one ClubBook
     * const ClubBook = await prisma.clubBook.delete({
     *   where: {
     *     // ... filter to delete one ClubBook
     *   }
     * })
     * 
    **/
    delete<T extends ClubBookDeleteArgs>(
      args: SelectSubset<T, ClubBookDeleteArgs>
    ): Prisma__ClubBookClient<ClubBookGetPayload<T>>

    /**
     * Update one ClubBook.
     * @param {ClubBookUpdateArgs} args - Arguments to update one ClubBook.
     * @example
     * // Update one ClubBook
     * const clubBook = await prisma.clubBook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClubBookUpdateArgs>(
      args: SelectSubset<T, ClubBookUpdateArgs>
    ): Prisma__ClubBookClient<ClubBookGetPayload<T>>

    /**
     * Delete zero or more ClubBooks.
     * @param {ClubBookDeleteManyArgs} args - Arguments to filter ClubBooks to delete.
     * @example
     * // Delete a few ClubBooks
     * const { count } = await prisma.clubBook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClubBookDeleteManyArgs>(
      args?: SelectSubset<T, ClubBookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClubBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubBookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClubBooks
     * const clubBook = await prisma.clubBook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClubBookUpdateManyArgs>(
      args: SelectSubset<T, ClubBookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ClubBook.
     * @param {ClubBookUpsertArgs} args - Arguments to update or create a ClubBook.
     * @example
     * // Update or create a ClubBook
     * const clubBook = await prisma.clubBook.upsert({
     *   create: {
     *     // ... data to create a ClubBook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClubBook we want to update
     *   }
     * })
    **/
    upsert<T extends ClubBookUpsertArgs>(
      args: SelectSubset<T, ClubBookUpsertArgs>
    ): Prisma__ClubBookClient<ClubBookGetPayload<T>>

    /**
     * Find one ClubBook that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ClubBookFindUniqueOrThrowArgs} args - Arguments to find a ClubBook
     * @example
     * // Get one ClubBook
     * const clubBook = await prisma.clubBook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClubBookFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClubBookFindUniqueOrThrowArgs>
    ): Prisma__ClubBookClient<ClubBookGetPayload<T>>

    /**
     * Find the first ClubBook that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubBookFindFirstOrThrowArgs} args - Arguments to find a ClubBook
     * @example
     * // Get one ClubBook
     * const clubBook = await prisma.clubBook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClubBookFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClubBookFindFirstOrThrowArgs>
    ): Prisma__ClubBookClient<ClubBookGetPayload<T>>

    /**
     * Count the number of ClubBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubBookCountArgs} args - Arguments to filter ClubBooks to count.
     * @example
     * // Count the number of ClubBooks
     * const count = await prisma.clubBook.count({
     *   where: {
     *     // ... the filter for the ClubBooks we want to count
     *   }
     * })
    **/
    count<T extends ClubBookCountArgs>(
      args?: Subset<T, ClubBookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubBookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClubBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubBookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubBookAggregateArgs>(args: Subset<T, ClubBookAggregateArgs>): PrismaPromise<GetClubBookAggregateType<T>>

    /**
     * Group by ClubBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubBookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubBookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubBookGroupByArgs['orderBy'] }
        : { orderBy?: ClubBookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubBookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubBookGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ClubBook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClubBookClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Book<T extends BookArgs= {}>(args?: Subset<T, BookArgs>): Prisma__BookClient<BookGetPayload<T> | Null>;

    Club<T extends ClubArgs= {}>(args?: Subset<T, ClubArgs>): Prisma__ClubClient<ClubGetPayload<T> | Null>;

    conversations<T extends ConversationFindManyArgs= {}>(args?: Subset<T, ConversationFindManyArgs>): PrismaPromise<Array<ConversationGetPayload<T>>| Null>;

    meetings<T extends MeetingFindManyArgs= {}>(args?: Subset<T, MeetingFindManyArgs>): PrismaPromise<Array<MeetingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ClubBook base type for findUnique actions
   */
  export type ClubBookFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ClubBook
     * 
    **/
    select?: ClubBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubBookInclude | null
    /**
     * Filter, which ClubBook to fetch.
     * 
    **/
    where: ClubBookWhereUniqueInput
  }

  /**
   * ClubBook: findUnique
   */
  export interface ClubBookFindUniqueArgs extends ClubBookFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClubBook base type for findFirst actions
   */
  export type ClubBookFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ClubBook
     * 
    **/
    select?: ClubBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubBookInclude | null
    /**
     * Filter, which ClubBook to fetch.
     * 
    **/
    where?: ClubBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubBooks to fetch.
     * 
    **/
    orderBy?: Enumerable<ClubBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClubBooks.
     * 
    **/
    cursor?: ClubBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubBooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubBooks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClubBooks.
     * 
    **/
    distinct?: Enumerable<ClubBookScalarFieldEnum>
  }

  /**
   * ClubBook: findFirst
   */
  export interface ClubBookFindFirstArgs extends ClubBookFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClubBook findMany
   */
  export type ClubBookFindManyArgs = {
    /**
     * Select specific fields to fetch from the ClubBook
     * 
    **/
    select?: ClubBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubBookInclude | null
    /**
     * Filter, which ClubBooks to fetch.
     * 
    **/
    where?: ClubBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubBooks to fetch.
     * 
    **/
    orderBy?: Enumerable<ClubBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClubBooks.
     * 
    **/
    cursor?: ClubBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubBooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubBooks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClubBookScalarFieldEnum>
  }


  /**
   * ClubBook create
   */
  export type ClubBookCreateArgs = {
    /**
     * Select specific fields to fetch from the ClubBook
     * 
    **/
    select?: ClubBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubBookInclude | null
    /**
     * The data needed to create a ClubBook.
     * 
    **/
    data: XOR<ClubBookCreateInput, ClubBookUncheckedCreateInput>
  }


  /**
   * ClubBook createMany
   */
  export type ClubBookCreateManyArgs = {
    /**
     * The data used to create many ClubBooks.
     * 
    **/
    data: Enumerable<ClubBookCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ClubBook update
   */
  export type ClubBookUpdateArgs = {
    /**
     * Select specific fields to fetch from the ClubBook
     * 
    **/
    select?: ClubBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubBookInclude | null
    /**
     * The data needed to update a ClubBook.
     * 
    **/
    data: XOR<ClubBookUpdateInput, ClubBookUncheckedUpdateInput>
    /**
     * Choose, which ClubBook to update.
     * 
    **/
    where: ClubBookWhereUniqueInput
  }


  /**
   * ClubBook updateMany
   */
  export type ClubBookUpdateManyArgs = {
    /**
     * The data used to update ClubBooks.
     * 
    **/
    data: XOR<ClubBookUpdateManyMutationInput, ClubBookUncheckedUpdateManyInput>
    /**
     * Filter which ClubBooks to update
     * 
    **/
    where?: ClubBookWhereInput
  }


  /**
   * ClubBook upsert
   */
  export type ClubBookUpsertArgs = {
    /**
     * Select specific fields to fetch from the ClubBook
     * 
    **/
    select?: ClubBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubBookInclude | null
    /**
     * The filter to search for the ClubBook to update in case it exists.
     * 
    **/
    where: ClubBookWhereUniqueInput
    /**
     * In case the ClubBook found by the `where` argument doesn't exist, create a new ClubBook with this data.
     * 
    **/
    create: XOR<ClubBookCreateInput, ClubBookUncheckedCreateInput>
    /**
     * In case the ClubBook was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClubBookUpdateInput, ClubBookUncheckedUpdateInput>
  }


  /**
   * ClubBook delete
   */
  export type ClubBookDeleteArgs = {
    /**
     * Select specific fields to fetch from the ClubBook
     * 
    **/
    select?: ClubBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubBookInclude | null
    /**
     * Filter which ClubBook to delete.
     * 
    **/
    where: ClubBookWhereUniqueInput
  }


  /**
   * ClubBook deleteMany
   */
  export type ClubBookDeleteManyArgs = {
    /**
     * Filter which ClubBooks to delete
     * 
    **/
    where?: ClubBookWhereInput
  }


  /**
   * ClubBook: findUniqueOrThrow
   */
  export type ClubBookFindUniqueOrThrowArgs = ClubBookFindUniqueArgsBase
      

  /**
   * ClubBook: findFirstOrThrow
   */
  export type ClubBookFindFirstOrThrowArgs = ClubBookFindFirstArgsBase
      

  /**
   * ClubBook without action
   */
  export type ClubBookArgs = {
    /**
     * Select specific fields to fetch from the ClubBook
     * 
    **/
    select?: ClubBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClubBookInclude | null
  }



  /**
   * Model Meeting
   */


  export type AggregateMeeting = {
    _count: MeetingCountAggregateOutputType | null
    _avg: MeetingAvgAggregateOutputType | null
    _sum: MeetingSumAggregateOutputType | null
    _min: MeetingMinAggregateOutputType | null
    _max: MeetingMaxAggregateOutputType | null
  }

  export type MeetingAvgAggregateOutputType = {
    id: number | null
    conversationId: number | null
    bookId: number | null
  }

  export type MeetingSumAggregateOutputType = {
    id: number | null
    conversationId: number | null
    bookId: number | null
  }

  export type MeetingMinAggregateOutputType = {
    id: number | null
    title: string | null
    clubId: string | null
    conversationId: number | null
    bookId: number | null
    time: Date | null
    location: string | null
  }

  export type MeetingMaxAggregateOutputType = {
    id: number | null
    title: string | null
    clubId: string | null
    conversationId: number | null
    bookId: number | null
    time: Date | null
    location: string | null
  }

  export type MeetingCountAggregateOutputType = {
    id: number
    title: number
    clubId: number
    conversationId: number
    bookId: number
    time: number
    location: number
    _all: number
  }


  export type MeetingAvgAggregateInputType = {
    id?: true
    conversationId?: true
    bookId?: true
  }

  export type MeetingSumAggregateInputType = {
    id?: true
    conversationId?: true
    bookId?: true
  }

  export type MeetingMinAggregateInputType = {
    id?: true
    title?: true
    clubId?: true
    conversationId?: true
    bookId?: true
    time?: true
    location?: true
  }

  export type MeetingMaxAggregateInputType = {
    id?: true
    title?: true
    clubId?: true
    conversationId?: true
    bookId?: true
    time?: true
    location?: true
  }

  export type MeetingCountAggregateInputType = {
    id?: true
    title?: true
    clubId?: true
    conversationId?: true
    bookId?: true
    time?: true
    location?: true
    _all?: true
  }

  export type MeetingAggregateArgs = {
    /**
     * Filter which Meeting to aggregate.
     * 
    **/
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     * 
    **/
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meetings
    **/
    _count?: true | MeetingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingMaxAggregateInputType
  }

  export type GetMeetingAggregateType<T extends MeetingAggregateArgs> = {
        [P in keyof T & keyof AggregateMeeting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeeting[P]>
      : GetScalarType<T[P], AggregateMeeting[P]>
  }




  export type MeetingGroupByArgs = {
    where?: MeetingWhereInput
    orderBy?: Enumerable<MeetingOrderByWithAggregationInput>
    by: Array<MeetingScalarFieldEnum>
    having?: MeetingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingCountAggregateInputType | true
    _avg?: MeetingAvgAggregateInputType
    _sum?: MeetingSumAggregateInputType
    _min?: MeetingMinAggregateInputType
    _max?: MeetingMaxAggregateInputType
  }


  export type MeetingGroupByOutputType = {
    id: number
    title: string
    clubId: string
    conversationId: number
    bookId: number | null
    time: Date
    location: string
    _count: MeetingCountAggregateOutputType | null
    _avg: MeetingAvgAggregateOutputType | null
    _sum: MeetingSumAggregateOutputType | null
    _min: MeetingMinAggregateOutputType | null
    _max: MeetingMaxAggregateOutputType | null
  }

  type GetMeetingGroupByPayload<T extends MeetingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MeetingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingGroupByOutputType[P]>
        }
      >
    >


  export type MeetingSelect = {
    id?: boolean
    title?: boolean
    club?: boolean | ClubArgs
    clubId?: boolean
    conversation?: boolean | ConversationArgs
    conversationId?: boolean
    clubBook?: boolean | ClubBookArgs
    bookId?: boolean
    time?: boolean
    location?: boolean
  }


  export type MeetingInclude = {
    club?: boolean | ClubArgs
    conversation?: boolean | ConversationArgs
    clubBook?: boolean | ClubBookArgs
  } 

  export type MeetingGetPayload<S extends boolean | null | undefined | MeetingArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Meeting :
    S extends undefined ? never :
    S extends { include: any } & (MeetingArgs | MeetingFindManyArgs)
    ? Meeting  & {
    [P in TrueKeys<S['include']>]:
        P extends 'club' ? ClubGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'conversation' ? ConversationGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'clubBook' ? ClubBookGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : S extends { select: any } & (MeetingArgs | MeetingFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'club' ? ClubGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'conversation' ? ConversationGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'clubBook' ? ClubBookGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Meeting ? Meeting[P] : never
  } 
      : Meeting


  type MeetingCountArgs = Merge<
    Omit<MeetingFindManyArgs, 'select' | 'include'> & {
      select?: MeetingCountAggregateInputType | true
    }
  >

  export interface MeetingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Meeting that matches the filter.
     * @param {MeetingFindUniqueArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeetingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Meeting'> extends True ? Prisma__MeetingClient<MeetingGetPayload<T>> : Prisma__MeetingClient<MeetingGetPayload<T> | null, null>

    /**
     * Find the first Meeting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindFirstArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeetingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Meeting'> extends True ? Prisma__MeetingClient<MeetingGetPayload<T>> : Prisma__MeetingClient<MeetingGetPayload<T> | null, null>

    /**
     * Find zero or more Meetings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meetings
     * const meetings = await prisma.meeting.findMany()
     * 
     * // Get first 10 Meetings
     * const meetings = await prisma.meeting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingWithIdOnly = await prisma.meeting.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetingFindManyArgs>(
      args?: SelectSubset<T, MeetingFindManyArgs>
    ): PrismaPromise<Array<MeetingGetPayload<T>>>

    /**
     * Create a Meeting.
     * @param {MeetingCreateArgs} args - Arguments to create a Meeting.
     * @example
     * // Create one Meeting
     * const Meeting = await prisma.meeting.create({
     *   data: {
     *     // ... data to create a Meeting
     *   }
     * })
     * 
    **/
    create<T extends MeetingCreateArgs>(
      args: SelectSubset<T, MeetingCreateArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Create many Meetings.
     *     @param {MeetingCreateManyArgs} args - Arguments to create many Meetings.
     *     @example
     *     // Create many Meetings
     *     const meeting = await prisma.meeting.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetingCreateManyArgs>(
      args?: SelectSubset<T, MeetingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Meeting.
     * @param {MeetingDeleteArgs} args - Arguments to delete one Meeting.
     * @example
     * // Delete one Meeting
     * const Meeting = await prisma.meeting.delete({
     *   where: {
     *     // ... filter to delete one Meeting
     *   }
     * })
     * 
    **/
    delete<T extends MeetingDeleteArgs>(
      args: SelectSubset<T, MeetingDeleteArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Update one Meeting.
     * @param {MeetingUpdateArgs} args - Arguments to update one Meeting.
     * @example
     * // Update one Meeting
     * const meeting = await prisma.meeting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetingUpdateArgs>(
      args: SelectSubset<T, MeetingUpdateArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Delete zero or more Meetings.
     * @param {MeetingDeleteManyArgs} args - Arguments to filter Meetings to delete.
     * @example
     * // Delete a few Meetings
     * const { count } = await prisma.meeting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetingDeleteManyArgs>(
      args?: SelectSubset<T, MeetingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meetings
     * const meeting = await prisma.meeting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetingUpdateManyArgs>(
      args: SelectSubset<T, MeetingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Meeting.
     * @param {MeetingUpsertArgs} args - Arguments to update or create a Meeting.
     * @example
     * // Update or create a Meeting
     * const meeting = await prisma.meeting.upsert({
     *   create: {
     *     // ... data to create a Meeting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meeting we want to update
     *   }
     * })
    **/
    upsert<T extends MeetingUpsertArgs>(
      args: SelectSubset<T, MeetingUpsertArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Find one Meeting that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {MeetingFindUniqueOrThrowArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MeetingFindUniqueOrThrowArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Find the first Meeting that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindFirstOrThrowArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MeetingFindFirstOrThrowArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Count the number of Meetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingCountArgs} args - Arguments to filter Meetings to count.
     * @example
     * // Count the number of Meetings
     * const count = await prisma.meeting.count({
     *   where: {
     *     // ... the filter for the Meetings we want to count
     *   }
     * })
    **/
    count<T extends MeetingCountArgs>(
      args?: Subset<T, MeetingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingAggregateArgs>(args: Subset<T, MeetingAggregateArgs>): PrismaPromise<GetMeetingAggregateType<T>>

    /**
     * Group by Meeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingGroupByArgs['orderBy'] }
        : { orderBy?: MeetingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Meeting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeetingClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    club<T extends ClubArgs= {}>(args?: Subset<T, ClubArgs>): Prisma__ClubClient<ClubGetPayload<T> | Null>;

    conversation<T extends ConversationArgs= {}>(args?: Subset<T, ConversationArgs>): Prisma__ConversationClient<ConversationGetPayload<T> | Null>;

    clubBook<T extends ClubBookArgs= {}>(args?: Subset<T, ClubBookArgs>): Prisma__ClubBookClient<ClubBookGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Meeting base type for findUnique actions
   */
  export type MeetingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Meeting
     * 
    **/
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeetingInclude | null
    /**
     * Filter, which Meeting to fetch.
     * 
    **/
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting: findUnique
   */
  export interface MeetingFindUniqueArgs extends MeetingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Meeting base type for findFirst actions
   */
  export type MeetingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Meeting
     * 
    **/
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeetingInclude | null
    /**
     * Filter, which Meeting to fetch.
     * 
    **/
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     * 
    **/
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetings.
     * 
    **/
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetings.
     * 
    **/
    distinct?: Enumerable<MeetingScalarFieldEnum>
  }

  /**
   * Meeting: findFirst
   */
  export interface MeetingFindFirstArgs extends MeetingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Meeting findMany
   */
  export type MeetingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     * 
    **/
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeetingInclude | null
    /**
     * Filter, which Meetings to fetch.
     * 
    **/
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     * 
    **/
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meetings.
     * 
    **/
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MeetingScalarFieldEnum>
  }


  /**
   * Meeting create
   */
  export type MeetingCreateArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     * 
    **/
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeetingInclude | null
    /**
     * The data needed to create a Meeting.
     * 
    **/
    data: XOR<MeetingCreateInput, MeetingUncheckedCreateInput>
  }


  /**
   * Meeting createMany
   */
  export type MeetingCreateManyArgs = {
    /**
     * The data used to create many Meetings.
     * 
    **/
    data: Enumerable<MeetingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Meeting update
   */
  export type MeetingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     * 
    **/
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeetingInclude | null
    /**
     * The data needed to update a Meeting.
     * 
    **/
    data: XOR<MeetingUpdateInput, MeetingUncheckedUpdateInput>
    /**
     * Choose, which Meeting to update.
     * 
    **/
    where: MeetingWhereUniqueInput
  }


  /**
   * Meeting updateMany
   */
  export type MeetingUpdateManyArgs = {
    /**
     * The data used to update Meetings.
     * 
    **/
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyInput>
    /**
     * Filter which Meetings to update
     * 
    **/
    where?: MeetingWhereInput
  }


  /**
   * Meeting upsert
   */
  export type MeetingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     * 
    **/
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeetingInclude | null
    /**
     * The filter to search for the Meeting to update in case it exists.
     * 
    **/
    where: MeetingWhereUniqueInput
    /**
     * In case the Meeting found by the `where` argument doesn't exist, create a new Meeting with this data.
     * 
    **/
    create: XOR<MeetingCreateInput, MeetingUncheckedCreateInput>
    /**
     * In case the Meeting was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MeetingUpdateInput, MeetingUncheckedUpdateInput>
  }


  /**
   * Meeting delete
   */
  export type MeetingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     * 
    **/
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeetingInclude | null
    /**
     * Filter which Meeting to delete.
     * 
    **/
    where: MeetingWhereUniqueInput
  }


  /**
   * Meeting deleteMany
   */
  export type MeetingDeleteManyArgs = {
    /**
     * Filter which Meetings to delete
     * 
    **/
    where?: MeetingWhereInput
  }


  /**
   * Meeting: findUniqueOrThrow
   */
  export type MeetingFindUniqueOrThrowArgs = MeetingFindUniqueArgsBase
      

  /**
   * Meeting: findFirstOrThrow
   */
  export type MeetingFindFirstOrThrowArgs = MeetingFindFirstArgsBase
      

  /**
   * Meeting without action
   */
  export type MeetingArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     * 
    **/
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MeetingInclude | null
  }



  /**
   * Model Conversation
   */


  export type AggregateConversation = {
    _count: ConversationCountAggregateOutputType | null
    _avg: ConversationAvgAggregateOutputType | null
    _sum: ConversationSumAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
  }

  export type ConversationSumAggregateOutputType = {
    id: number | null
    bookId: number | null
  }

  export type ConversationMinAggregateOutputType = {
    id: number | null
    clubId: string | null
    private: boolean | null
    bookId: number | null
    title: string | null
    body: string | null
    createdOn: Date | null
    updatedOn: Date | null
  }

  export type ConversationMaxAggregateOutputType = {
    id: number | null
    clubId: string | null
    private: boolean | null
    bookId: number | null
    title: string | null
    body: string | null
    createdOn: Date | null
    updatedOn: Date | null
  }

  export type ConversationCountAggregateOutputType = {
    id: number
    clubId: number
    private: number
    bookId: number
    title: number
    body: number
    createdOn: number
    updatedOn: number
    _all: number
  }


  export type ConversationAvgAggregateInputType = {
    id?: true
    bookId?: true
  }

  export type ConversationSumAggregateInputType = {
    id?: true
    bookId?: true
  }

  export type ConversationMinAggregateInputType = {
    id?: true
    clubId?: true
    private?: true
    bookId?: true
    title?: true
    body?: true
    createdOn?: true
    updatedOn?: true
  }

  export type ConversationMaxAggregateInputType = {
    id?: true
    clubId?: true
    private?: true
    bookId?: true
    title?: true
    body?: true
    createdOn?: true
    updatedOn?: true
  }

  export type ConversationCountAggregateInputType = {
    id?: true
    clubId?: true
    private?: true
    bookId?: true
    title?: true
    body?: true
    createdOn?: true
    updatedOn?: true
    _all?: true
  }

  export type ConversationAggregateArgs = {
    /**
     * Filter which Conversation to aggregate.
     * 
    **/
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     * 
    **/
    orderBy?: Enumerable<ConversationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    _count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConversationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConversationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }




  export type ConversationGroupByArgs = {
    where?: ConversationWhereInput
    orderBy?: Enumerable<ConversationOrderByWithAggregationInput>
    by: Array<ConversationScalarFieldEnum>
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationCountAggregateInputType | true
    _avg?: ConversationAvgAggregateInputType
    _sum?: ConversationSumAggregateInputType
    _min?: ConversationMinAggregateInputType
    _max?: ConversationMaxAggregateInputType
  }


  export type ConversationGroupByOutputType = {
    id: number
    clubId: string
    private: boolean
    bookId: number | null
    title: string
    body: string
    createdOn: Date
    updatedOn: Date
    _count: ConversationCountAggregateOutputType | null
    _avg: ConversationAvgAggregateOutputType | null
    _sum: ConversationSumAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationGroupByOutputType[P]>
        }
      >
    >


  export type ConversationSelect = {
    id?: boolean
    club?: boolean | ClubArgs
    clubId?: boolean
    private?: boolean
    clubBook?: boolean | ClubBookArgs
    bookId?: boolean
    meeting?: boolean | MeetingArgs
    title?: boolean
    body?: boolean
    responses?: boolean | ResponseFindManyArgs
    createdOn?: boolean
    updatedOn?: boolean
    _count?: boolean | ConversationCountOutputTypeArgs
  }


  export type ConversationInclude = {
    club?: boolean | ClubArgs
    clubBook?: boolean | ClubBookArgs
    meeting?: boolean | MeetingArgs
    responses?: boolean | ResponseFindManyArgs
    _count?: boolean | ConversationCountOutputTypeArgs
  } 

  export type ConversationGetPayload<S extends boolean | null | undefined | ConversationArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Conversation :
    S extends undefined ? never :
    S extends { include: any } & (ConversationArgs | ConversationFindManyArgs)
    ? Conversation  & {
    [P in TrueKeys<S['include']>]:
        P extends 'club' ? ClubGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'clubBook' ? ClubBookGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'meeting' ? MeetingGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'responses' ? Array < ResponseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ConversationCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ConversationArgs | ConversationFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'club' ? ClubGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'clubBook' ? ClubBookGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'meeting' ? MeetingGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'responses' ? Array < ResponseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ConversationCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Conversation ? Conversation[P] : never
  } 
      : Conversation


  type ConversationCountArgs = Merge<
    Omit<ConversationFindManyArgs, 'select' | 'include'> & {
      select?: ConversationCountAggregateInputType | true
    }
  >

  export interface ConversationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConversationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ConversationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Conversation'> extends True ? Prisma__ConversationClient<ConversationGetPayload<T>> : Prisma__ConversationClient<ConversationGetPayload<T> | null, null>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConversationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ConversationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Conversation'> extends True ? Prisma__ConversationClient<ConversationGetPayload<T>> : Prisma__ConversationClient<ConversationGetPayload<T> | null, null>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationWithIdOnly = await prisma.conversation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConversationFindManyArgs>(
      args?: SelectSubset<T, ConversationFindManyArgs>
    ): PrismaPromise<Array<ConversationGetPayload<T>>>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
    **/
    create<T extends ConversationCreateArgs>(
      args: SelectSubset<T, ConversationCreateArgs>
    ): Prisma__ConversationClient<ConversationGetPayload<T>>

    /**
     * Create many Conversations.
     *     @param {ConversationCreateManyArgs} args - Arguments to create many Conversations.
     *     @example
     *     // Create many Conversations
     *     const conversation = await prisma.conversation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConversationCreateManyArgs>(
      args?: SelectSubset<T, ConversationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
    **/
    delete<T extends ConversationDeleteArgs>(
      args: SelectSubset<T, ConversationDeleteArgs>
    ): Prisma__ConversationClient<ConversationGetPayload<T>>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConversationUpdateArgs>(
      args: SelectSubset<T, ConversationUpdateArgs>
    ): Prisma__ConversationClient<ConversationGetPayload<T>>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConversationDeleteManyArgs>(
      args?: SelectSubset<T, ConversationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConversationUpdateManyArgs>(
      args: SelectSubset<T, ConversationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
    **/
    upsert<T extends ConversationUpsertArgs>(
      args: SelectSubset<T, ConversationUpsertArgs>
    ): Prisma__ConversationClient<ConversationGetPayload<T>>

    /**
     * Find one Conversation that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ConversationFindUniqueOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConversationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ConversationFindUniqueOrThrowArgs>
    ): Prisma__ConversationClient<ConversationGetPayload<T>>

    /**
     * Find the first Conversation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConversationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ConversationFindFirstOrThrowArgs>
    ): Prisma__ConversationClient<ConversationGetPayload<T>>

    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ConversationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    club<T extends ClubArgs= {}>(args?: Subset<T, ClubArgs>): Prisma__ClubClient<ClubGetPayload<T> | Null>;

    clubBook<T extends ClubBookArgs= {}>(args?: Subset<T, ClubBookArgs>): Prisma__ClubBookClient<ClubBookGetPayload<T> | Null>;

    meeting<T extends MeetingArgs= {}>(args?: Subset<T, MeetingArgs>): Prisma__MeetingClient<MeetingGetPayload<T> | Null>;

    responses<T extends ResponseFindManyArgs= {}>(args?: Subset<T, ResponseFindManyArgs>): PrismaPromise<Array<ResponseGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Conversation base type for findUnique actions
   */
  export type ConversationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Conversation
     * 
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConversationInclude | null
    /**
     * Filter, which Conversation to fetch.
     * 
    **/
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation: findUnique
   */
  export interface ConversationFindUniqueArgs extends ConversationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Conversation base type for findFirst actions
   */
  export type ConversationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Conversation
     * 
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConversationInclude | null
    /**
     * Filter, which Conversation to fetch.
     * 
    **/
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     * 
    **/
    orderBy?: Enumerable<ConversationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     * 
    **/
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     * 
    **/
    distinct?: Enumerable<ConversationScalarFieldEnum>
  }

  /**
   * Conversation: findFirst
   */
  export interface ConversationFindFirstArgs extends ConversationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Conversation
     * 
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConversationInclude | null
    /**
     * Filter, which Conversations to fetch.
     * 
    **/
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     * 
    **/
    orderBy?: Enumerable<ConversationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
     * 
    **/
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ConversationScalarFieldEnum>
  }


  /**
   * Conversation create
   */
  export type ConversationCreateArgs = {
    /**
     * Select specific fields to fetch from the Conversation
     * 
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConversationInclude | null
    /**
     * The data needed to create a Conversation.
     * 
    **/
    data: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }


  /**
   * Conversation createMany
   */
  export type ConversationCreateManyArgs = {
    /**
     * The data used to create many Conversations.
     * 
    **/
    data: Enumerable<ConversationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Conversation update
   */
  export type ConversationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Conversation
     * 
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConversationInclude | null
    /**
     * The data needed to update a Conversation.
     * 
    **/
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
     * 
    **/
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs = {
    /**
     * The data used to update Conversations.
     * 
    **/
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     * 
    **/
    where?: ConversationWhereInput
  }


  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Conversation
     * 
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConversationInclude | null
    /**
     * The filter to search for the Conversation to update in case it exists.
     * 
    **/
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
     * 
    **/
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }


  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Conversation
     * 
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConversationInclude | null
    /**
     * Filter which Conversation to delete.
     * 
    **/
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs = {
    /**
     * Filter which Conversations to delete
     * 
    **/
    where?: ConversationWhereInput
  }


  /**
   * Conversation: findUniqueOrThrow
   */
  export type ConversationFindUniqueOrThrowArgs = ConversationFindUniqueArgsBase
      

  /**
   * Conversation: findFirstOrThrow
   */
  export type ConversationFindFirstOrThrowArgs = ConversationFindFirstArgsBase
      

  /**
   * Conversation without action
   */
  export type ConversationArgs = {
    /**
     * Select specific fields to fetch from the Conversation
     * 
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConversationInclude | null
  }



  /**
   * Model Response
   */


  export type AggregateResponse = {
    _count: ResponseCountAggregateOutputType | null
    _avg: ResponseAvgAggregateOutputType | null
    _sum: ResponseSumAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  export type ResponseAvgAggregateOutputType = {
    id: number | null
    conversationId: number | null
    replyToId: number | null
  }

  export type ResponseSumAggregateOutputType = {
    id: number | null
    conversationId: number | null
    replyToId: number | null
  }

  export type ResponseMinAggregateOutputType = {
    id: number | null
    userId: string | null
    conversationId: number | null
    replyToId: number | null
    body: string | null
    createdOn: Date | null
    editedOn: Date | null
  }

  export type ResponseMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    conversationId: number | null
    replyToId: number | null
    body: string | null
    createdOn: Date | null
    editedOn: Date | null
  }

  export type ResponseCountAggregateOutputType = {
    id: number
    userId: number
    conversationId: number
    replyToId: number
    body: number
    createdOn: number
    editedOn: number
    _all: number
  }


  export type ResponseAvgAggregateInputType = {
    id?: true
    conversationId?: true
    replyToId?: true
  }

  export type ResponseSumAggregateInputType = {
    id?: true
    conversationId?: true
    replyToId?: true
  }

  export type ResponseMinAggregateInputType = {
    id?: true
    userId?: true
    conversationId?: true
    replyToId?: true
    body?: true
    createdOn?: true
    editedOn?: true
  }

  export type ResponseMaxAggregateInputType = {
    id?: true
    userId?: true
    conversationId?: true
    replyToId?: true
    body?: true
    createdOn?: true
    editedOn?: true
  }

  export type ResponseCountAggregateInputType = {
    id?: true
    userId?: true
    conversationId?: true
    replyToId?: true
    body?: true
    createdOn?: true
    editedOn?: true
    _all?: true
  }

  export type ResponseAggregateArgs = {
    /**
     * Filter which Response to aggregate.
     * 
    **/
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     * 
    **/
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Responses
    **/
    _count?: true | ResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponseMaxAggregateInputType
  }

  export type GetResponseAggregateType<T extends ResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponse[P]>
      : GetScalarType<T[P], AggregateResponse[P]>
  }




  export type ResponseGroupByArgs = {
    where?: ResponseWhereInput
    orderBy?: Enumerable<ResponseOrderByWithAggregationInput>
    by: Array<ResponseScalarFieldEnum>
    having?: ResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponseCountAggregateInputType | true
    _avg?: ResponseAvgAggregateInputType
    _sum?: ResponseSumAggregateInputType
    _min?: ResponseMinAggregateInputType
    _max?: ResponseMaxAggregateInputType
  }


  export type ResponseGroupByOutputType = {
    id: number
    userId: string
    conversationId: number | null
    replyToId: number | null
    body: string
    createdOn: Date
    editedOn: Date
    _count: ResponseCountAggregateOutputType | null
    _avg: ResponseAvgAggregateOutputType | null
    _sum: ResponseSumAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  type GetResponseGroupByPayload<T extends ResponseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponseGroupByOutputType[P]>
            : GetScalarType<T[P], ResponseGroupByOutputType[P]>
        }
      >
    >


  export type ResponseSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    conversation?: boolean | ConversationArgs
    conversationId?: boolean
    replyTo?: boolean | ResponseArgs
    replyToId?: boolean
    replies?: boolean | ResponseFindManyArgs
    body?: boolean
    createdOn?: boolean
    editedOn?: boolean
    _count?: boolean | ResponseCountOutputTypeArgs
  }


  export type ResponseInclude = {
    user?: boolean | UserArgs
    conversation?: boolean | ConversationArgs
    replyTo?: boolean | ResponseArgs
    replies?: boolean | ResponseFindManyArgs
    _count?: boolean | ResponseCountOutputTypeArgs
  } 

  export type ResponseGetPayload<S extends boolean | null | undefined | ResponseArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Response :
    S extends undefined ? never :
    S extends { include: any } & (ResponseArgs | ResponseFindManyArgs)
    ? Response  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'conversation' ? ConversationGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'replyTo' ? ResponseGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'replies' ? Array < ResponseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ResponseCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ResponseArgs | ResponseFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'conversation' ? ConversationGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'replyTo' ? ResponseGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'replies' ? Array < ResponseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ResponseCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Response ? Response[P] : never
  } 
      : Response


  type ResponseCountArgs = Merge<
    Omit<ResponseFindManyArgs, 'select' | 'include'> & {
      select?: ResponseCountAggregateInputType | true
    }
  >

  export interface ResponseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Response that matches the filter.
     * @param {ResponseFindUniqueArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResponseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResponseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Response'> extends True ? Prisma__ResponseClient<ResponseGetPayload<T>> : Prisma__ResponseClient<ResponseGetPayload<T> | null, null>

    /**
     * Find the first Response that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResponseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResponseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Response'> extends True ? Prisma__ResponseClient<ResponseGetPayload<T>> : Prisma__ResponseClient<ResponseGetPayload<T> | null, null>

    /**
     * Find zero or more Responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responses
     * const responses = await prisma.response.findMany()
     * 
     * // Get first 10 Responses
     * const responses = await prisma.response.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responseWithIdOnly = await prisma.response.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResponseFindManyArgs>(
      args?: SelectSubset<T, ResponseFindManyArgs>
    ): PrismaPromise<Array<ResponseGetPayload<T>>>

    /**
     * Create a Response.
     * @param {ResponseCreateArgs} args - Arguments to create a Response.
     * @example
     * // Create one Response
     * const Response = await prisma.response.create({
     *   data: {
     *     // ... data to create a Response
     *   }
     * })
     * 
    **/
    create<T extends ResponseCreateArgs>(
      args: SelectSubset<T, ResponseCreateArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Create many Responses.
     *     @param {ResponseCreateManyArgs} args - Arguments to create many Responses.
     *     @example
     *     // Create many Responses
     *     const response = await prisma.response.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResponseCreateManyArgs>(
      args?: SelectSubset<T, ResponseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Response.
     * @param {ResponseDeleteArgs} args - Arguments to delete one Response.
     * @example
     * // Delete one Response
     * const Response = await prisma.response.delete({
     *   where: {
     *     // ... filter to delete one Response
     *   }
     * })
     * 
    **/
    delete<T extends ResponseDeleteArgs>(
      args: SelectSubset<T, ResponseDeleteArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Update one Response.
     * @param {ResponseUpdateArgs} args - Arguments to update one Response.
     * @example
     * // Update one Response
     * const response = await prisma.response.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResponseUpdateArgs>(
      args: SelectSubset<T, ResponseUpdateArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Delete zero or more Responses.
     * @param {ResponseDeleteManyArgs} args - Arguments to filter Responses to delete.
     * @example
     * // Delete a few Responses
     * const { count } = await prisma.response.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResponseDeleteManyArgs>(
      args?: SelectSubset<T, ResponseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responses
     * const response = await prisma.response.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResponseUpdateManyArgs>(
      args: SelectSubset<T, ResponseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Response.
     * @param {ResponseUpsertArgs} args - Arguments to update or create a Response.
     * @example
     * // Update or create a Response
     * const response = await prisma.response.upsert({
     *   create: {
     *     // ... data to create a Response
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Response we want to update
     *   }
     * })
    **/
    upsert<T extends ResponseUpsertArgs>(
      args: SelectSubset<T, ResponseUpsertArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Find one Response that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ResponseFindUniqueOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResponseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ResponseFindUniqueOrThrowArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Find the first Response that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResponseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ResponseFindFirstOrThrowArgs>
    ): Prisma__ResponseClient<ResponseGetPayload<T>>

    /**
     * Count the number of Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseCountArgs} args - Arguments to filter Responses to count.
     * @example
     * // Count the number of Responses
     * const count = await prisma.response.count({
     *   where: {
     *     // ... the filter for the Responses we want to count
     *   }
     * })
    **/
    count<T extends ResponseCountArgs>(
      args?: Subset<T, ResponseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponseAggregateArgs>(args: Subset<T, ResponseAggregateArgs>): PrismaPromise<GetResponseAggregateType<T>>

    /**
     * Group by Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResponseGroupByArgs['orderBy'] }
        : { orderBy?: ResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponseGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Response.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResponseClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    conversation<T extends ConversationArgs= {}>(args?: Subset<T, ConversationArgs>): Prisma__ConversationClient<ConversationGetPayload<T> | Null>;

    replyTo<T extends ResponseArgs= {}>(args?: Subset<T, ResponseArgs>): Prisma__ResponseClient<ResponseGetPayload<T> | Null>;

    replies<T extends ResponseFindManyArgs= {}>(args?: Subset<T, ResponseFindManyArgs>): PrismaPromise<Array<ResponseGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Response base type for findUnique actions
   */
  export type ResponseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * Filter, which Response to fetch.
     * 
    **/
    where: ResponseWhereUniqueInput
  }

  /**
   * Response: findUnique
   */
  export interface ResponseFindUniqueArgs extends ResponseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Response base type for findFirst actions
   */
  export type ResponseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * Filter, which Response to fetch.
     * 
    **/
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     * 
    **/
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Responses.
     * 
    **/
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Responses.
     * 
    **/
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }

  /**
   * Response: findFirst
   */
  export interface ResponseFindFirstArgs extends ResponseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Response findMany
   */
  export type ResponseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * Filter, which Responses to fetch.
     * 
    **/
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     * 
    **/
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Responses.
     * 
    **/
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }


  /**
   * Response create
   */
  export type ResponseCreateArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * The data needed to create a Response.
     * 
    **/
    data: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
  }


  /**
   * Response createMany
   */
  export type ResponseCreateManyArgs = {
    /**
     * The data used to create many Responses.
     * 
    **/
    data: Enumerable<ResponseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Response update
   */
  export type ResponseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * The data needed to update a Response.
     * 
    **/
    data: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
    /**
     * Choose, which Response to update.
     * 
    **/
    where: ResponseWhereUniqueInput
  }


  /**
   * Response updateMany
   */
  export type ResponseUpdateManyArgs = {
    /**
     * The data used to update Responses.
     * 
    **/
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyInput>
    /**
     * Filter which Responses to update
     * 
    **/
    where?: ResponseWhereInput
  }


  /**
   * Response upsert
   */
  export type ResponseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * The filter to search for the Response to update in case it exists.
     * 
    **/
    where: ResponseWhereUniqueInput
    /**
     * In case the Response found by the `where` argument doesn't exist, create a new Response with this data.
     * 
    **/
    create: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
    /**
     * In case the Response was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
  }


  /**
   * Response delete
   */
  export type ResponseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * Filter which Response to delete.
     * 
    **/
    where: ResponseWhereUniqueInput
  }


  /**
   * Response deleteMany
   */
  export type ResponseDeleteManyArgs = {
    /**
     * Filter which Responses to delete
     * 
    **/
    where?: ResponseWhereInput
  }


  /**
   * Response: findUniqueOrThrow
   */
  export type ResponseFindUniqueOrThrowArgs = ResponseFindUniqueArgsBase
      

  /**
   * Response: findFirstOrThrow
   */
  export type ResponseFindFirstOrThrowArgs = ResponseFindFirstArgsBase
      

  /**
   * Response without action
   */
  export type ResponseArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
  }



  /**
   * Model Reaction
   */


  export type AggregateReaction = {
    _count: ReactionCountAggregateOutputType | null
    _min: ReactionMinAggregateOutputType | null
    _max: ReactionMaxAggregateOutputType | null
  }

  export type ReactionMinAggregateOutputType = {
    reaction: string | null
  }

  export type ReactionMaxAggregateOutputType = {
    reaction: string | null
  }

  export type ReactionCountAggregateOutputType = {
    reaction: number
    _all: number
  }


  export type ReactionMinAggregateInputType = {
    reaction?: true
  }

  export type ReactionMaxAggregateInputType = {
    reaction?: true
  }

  export type ReactionCountAggregateInputType = {
    reaction?: true
    _all?: true
  }

  export type ReactionAggregateArgs = {
    /**
     * Filter which Reaction to aggregate.
     * 
    **/
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reactions
    **/
    _count?: true | ReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReactionMaxAggregateInputType
  }

  export type GetReactionAggregateType<T extends ReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReaction[P]>
      : GetScalarType<T[P], AggregateReaction[P]>
  }




  export type ReactionGroupByArgs = {
    where?: ReactionWhereInput
    orderBy?: Enumerable<ReactionOrderByWithAggregationInput>
    by: Array<ReactionScalarFieldEnum>
    having?: ReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReactionCountAggregateInputType | true
    _min?: ReactionMinAggregateInputType
    _max?: ReactionMaxAggregateInputType
  }


  export type ReactionGroupByOutputType = {
    reaction: string
    _count: ReactionCountAggregateOutputType | null
    _min: ReactionMinAggregateOutputType | null
    _max: ReactionMaxAggregateOutputType | null
  }

  type GetReactionGroupByPayload<T extends ReactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReactionGroupByOutputType[P]>
            : GetScalarType<T[P], ReactionGroupByOutputType[P]>
        }
      >
    >


  export type ReactionSelect = {
    reaction?: boolean
  }


  export type ReactionGetPayload<S extends boolean | null | undefined | ReactionArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Reaction :
    S extends undefined ? never :
    S extends { include: any } & (ReactionArgs | ReactionFindManyArgs)
    ? Reaction 
    : S extends { select: any } & (ReactionArgs | ReactionFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Reaction ? Reaction[P] : never
  } 
      : Reaction


  type ReactionCountArgs = Merge<
    Omit<ReactionFindManyArgs, 'select' | 'include'> & {
      select?: ReactionCountAggregateInputType | true
    }
  >

  export interface ReactionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Reaction that matches the filter.
     * @param {ReactionFindUniqueArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reaction'> extends True ? Prisma__ReactionClient<ReactionGetPayload<T>> : Prisma__ReactionClient<ReactionGetPayload<T> | null, null>

    /**
     * Find the first Reaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindFirstArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reaction'> extends True ? Prisma__ReactionClient<ReactionGetPayload<T>> : Prisma__ReactionClient<ReactionGetPayload<T> | null, null>

    /**
     * Find zero or more Reactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reactions
     * const reactions = await prisma.reaction.findMany()
     * 
     * // Get first 10 Reactions
     * const reactions = await prisma.reaction.findMany({ take: 10 })
     * 
     * // Only select the `reaction`
     * const reactionWithReactionOnly = await prisma.reaction.findMany({ select: { reaction: true } })
     * 
    **/
    findMany<T extends ReactionFindManyArgs>(
      args?: SelectSubset<T, ReactionFindManyArgs>
    ): PrismaPromise<Array<ReactionGetPayload<T>>>

    /**
     * Create a Reaction.
     * @param {ReactionCreateArgs} args - Arguments to create a Reaction.
     * @example
     * // Create one Reaction
     * const Reaction = await prisma.reaction.create({
     *   data: {
     *     // ... data to create a Reaction
     *   }
     * })
     * 
    **/
    create<T extends ReactionCreateArgs>(
      args: SelectSubset<T, ReactionCreateArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Create many Reactions.
     *     @param {ReactionCreateManyArgs} args - Arguments to create many Reactions.
     *     @example
     *     // Create many Reactions
     *     const reaction = await prisma.reaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReactionCreateManyArgs>(
      args?: SelectSubset<T, ReactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reaction.
     * @param {ReactionDeleteArgs} args - Arguments to delete one Reaction.
     * @example
     * // Delete one Reaction
     * const Reaction = await prisma.reaction.delete({
     *   where: {
     *     // ... filter to delete one Reaction
     *   }
     * })
     * 
    **/
    delete<T extends ReactionDeleteArgs>(
      args: SelectSubset<T, ReactionDeleteArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Update one Reaction.
     * @param {ReactionUpdateArgs} args - Arguments to update one Reaction.
     * @example
     * // Update one Reaction
     * const reaction = await prisma.reaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReactionUpdateArgs>(
      args: SelectSubset<T, ReactionUpdateArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Delete zero or more Reactions.
     * @param {ReactionDeleteManyArgs} args - Arguments to filter Reactions to delete.
     * @example
     * // Delete a few Reactions
     * const { count } = await prisma.reaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReactionDeleteManyArgs>(
      args?: SelectSubset<T, ReactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reactions
     * const reaction = await prisma.reaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReactionUpdateManyArgs>(
      args: SelectSubset<T, ReactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reaction.
     * @param {ReactionUpsertArgs} args - Arguments to update or create a Reaction.
     * @example
     * // Update or create a Reaction
     * const reaction = await prisma.reaction.upsert({
     *   create: {
     *     // ... data to create a Reaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reaction we want to update
     *   }
     * })
    **/
    upsert<T extends ReactionUpsertArgs>(
      args: SelectSubset<T, ReactionUpsertArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Find one Reaction that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ReactionFindUniqueOrThrowArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReactionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReactionFindUniqueOrThrowArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Find the first Reaction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindFirstOrThrowArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReactionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReactionFindFirstOrThrowArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Count the number of Reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionCountArgs} args - Arguments to filter Reactions to count.
     * @example
     * // Count the number of Reactions
     * const count = await prisma.reaction.count({
     *   where: {
     *     // ... the filter for the Reactions we want to count
     *   }
     * })
    **/
    count<T extends ReactionCountArgs>(
      args?: Subset<T, ReactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReactionAggregateArgs>(args: Subset<T, ReactionAggregateArgs>): PrismaPromise<GetReactionAggregateType<T>>

    /**
     * Group by Reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReactionGroupByArgs['orderBy'] }
        : { orderBy?: ReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReactionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Reaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReactionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Reaction base type for findUnique actions
   */
  export type ReactionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Filter, which Reaction to fetch.
     * 
    **/
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction: findUnique
   */
  export interface ReactionFindUniqueArgs extends ReactionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reaction base type for findFirst actions
   */
  export type ReactionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Filter, which Reaction to fetch.
     * 
    **/
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reactions.
     * 
    **/
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reactions.
     * 
    **/
    distinct?: Enumerable<ReactionScalarFieldEnum>
  }

  /**
   * Reaction: findFirst
   */
  export interface ReactionFindFirstArgs extends ReactionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reaction findMany
   */
  export type ReactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Filter, which Reactions to fetch.
     * 
    **/
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reactions.
     * 
    **/
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReactionScalarFieldEnum>
  }


  /**
   * Reaction create
   */
  export type ReactionCreateArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * The data needed to create a Reaction.
     * 
    **/
    data: XOR<ReactionCreateInput, ReactionUncheckedCreateInput>
  }


  /**
   * Reaction createMany
   */
  export type ReactionCreateManyArgs = {
    /**
     * The data used to create many Reactions.
     * 
    **/
    data: Enumerable<ReactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reaction update
   */
  export type ReactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * The data needed to update a Reaction.
     * 
    **/
    data: XOR<ReactionUpdateInput, ReactionUncheckedUpdateInput>
    /**
     * Choose, which Reaction to update.
     * 
    **/
    where: ReactionWhereUniqueInput
  }


  /**
   * Reaction updateMany
   */
  export type ReactionUpdateManyArgs = {
    /**
     * The data used to update Reactions.
     * 
    **/
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyInput>
    /**
     * Filter which Reactions to update
     * 
    **/
    where?: ReactionWhereInput
  }


  /**
   * Reaction upsert
   */
  export type ReactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * The filter to search for the Reaction to update in case it exists.
     * 
    **/
    where: ReactionWhereUniqueInput
    /**
     * In case the Reaction found by the `where` argument doesn't exist, create a new Reaction with this data.
     * 
    **/
    create: XOR<ReactionCreateInput, ReactionUncheckedCreateInput>
    /**
     * In case the Reaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReactionUpdateInput, ReactionUncheckedUpdateInput>
  }


  /**
   * Reaction delete
   */
  export type ReactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Filter which Reaction to delete.
     * 
    **/
    where: ReactionWhereUniqueInput
  }


  /**
   * Reaction deleteMany
   */
  export type ReactionDeleteManyArgs = {
    /**
     * Filter which Reactions to delete
     * 
    **/
    where?: ReactionWhereInput
  }


  /**
   * Reaction: findUniqueOrThrow
   */
  export type ReactionFindUniqueOrThrowArgs = ReactionFindUniqueArgsBase
      

  /**
   * Reaction: findFirstOrThrow
   */
  export type ReactionFindFirstOrThrowArgs = ReactionFindFirstArgsBase
      

  /**
   * Reaction without action
   */
  export type ReactionArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
  }



  /**
   * Model Genre
   */


  export type AggregateGenre = {
    _count: GenreCountAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  export type GenreMinAggregateOutputType = {
    genre: string | null
  }

  export type GenreMaxAggregateOutputType = {
    genre: string | null
  }

  export type GenreCountAggregateOutputType = {
    genre: number
    _all: number
  }


  export type GenreMinAggregateInputType = {
    genre?: true
  }

  export type GenreMaxAggregateInputType = {
    genre?: true
  }

  export type GenreCountAggregateInputType = {
    genre?: true
    _all?: true
  }

  export type GenreAggregateArgs = {
    /**
     * Filter which Genre to aggregate.
     * 
    **/
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     * 
    **/
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genres
    **/
    _count?: true | GenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenreMaxAggregateInputType
  }

  export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenre[P]>
      : GetScalarType<T[P], AggregateGenre[P]>
  }




  export type GenreGroupByArgs = {
    where?: GenreWhereInput
    orderBy?: Enumerable<GenreOrderByWithAggregationInput>
    by: Array<GenreScalarFieldEnum>
    having?: GenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenreCountAggregateInputType | true
    _min?: GenreMinAggregateInputType
    _max?: GenreMaxAggregateInputType
  }


  export type GenreGroupByOutputType = {
    genre: string
    _count: GenreCountAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  type GetGenreGroupByPayload<T extends GenreGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenreGroupByOutputType[P]>
            : GetScalarType<T[P], GenreGroupByOutputType[P]>
        }
      >
    >


  export type GenreSelect = {
    genre?: boolean
    books?: boolean | BookFindManyArgs
    _count?: boolean | GenreCountOutputTypeArgs
  }


  export type GenreInclude = {
    books?: boolean | BookFindManyArgs
    _count?: boolean | GenreCountOutputTypeArgs
  } 

  export type GenreGetPayload<S extends boolean | null | undefined | GenreArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Genre :
    S extends undefined ? never :
    S extends { include: any } & (GenreArgs | GenreFindManyArgs)
    ? Genre  & {
    [P in TrueKeys<S['include']>]:
        P extends 'books' ? Array < BookGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? GenreCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (GenreArgs | GenreFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'books' ? Array < BookGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? GenreCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Genre ? Genre[P] : never
  } 
      : Genre


  type GenreCountArgs = Merge<
    Omit<GenreFindManyArgs, 'select' | 'include'> & {
      select?: GenreCountAggregateInputType | true
    }
  >

  export interface GenreDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Genre that matches the filter.
     * @param {GenreFindUniqueArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GenreFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GenreFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Genre'> extends True ? Prisma__GenreClient<GenreGetPayload<T>> : Prisma__GenreClient<GenreGetPayload<T> | null, null>

    /**
     * Find the first Genre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GenreFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GenreFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Genre'> extends True ? Prisma__GenreClient<GenreGetPayload<T>> : Prisma__GenreClient<GenreGetPayload<T> | null, null>

    /**
     * Find zero or more Genres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genres
     * const genres = await prisma.genre.findMany()
     * 
     * // Get first 10 Genres
     * const genres = await prisma.genre.findMany({ take: 10 })
     * 
     * // Only select the `genre`
     * const genreWithGenreOnly = await prisma.genre.findMany({ select: { genre: true } })
     * 
    **/
    findMany<T extends GenreFindManyArgs>(
      args?: SelectSubset<T, GenreFindManyArgs>
    ): PrismaPromise<Array<GenreGetPayload<T>>>

    /**
     * Create a Genre.
     * @param {GenreCreateArgs} args - Arguments to create a Genre.
     * @example
     * // Create one Genre
     * const Genre = await prisma.genre.create({
     *   data: {
     *     // ... data to create a Genre
     *   }
     * })
     * 
    **/
    create<T extends GenreCreateArgs>(
      args: SelectSubset<T, GenreCreateArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Create many Genres.
     *     @param {GenreCreateManyArgs} args - Arguments to create many Genres.
     *     @example
     *     // Create many Genres
     *     const genre = await prisma.genre.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GenreCreateManyArgs>(
      args?: SelectSubset<T, GenreCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Genre.
     * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
     * @example
     * // Delete one Genre
     * const Genre = await prisma.genre.delete({
     *   where: {
     *     // ... filter to delete one Genre
     *   }
     * })
     * 
    **/
    delete<T extends GenreDeleteArgs>(
      args: SelectSubset<T, GenreDeleteArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Update one Genre.
     * @param {GenreUpdateArgs} args - Arguments to update one Genre.
     * @example
     * // Update one Genre
     * const genre = await prisma.genre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GenreUpdateArgs>(
      args: SelectSubset<T, GenreUpdateArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Delete zero or more Genres.
     * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
     * @example
     * // Delete a few Genres
     * const { count } = await prisma.genre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GenreDeleteManyArgs>(
      args?: SelectSubset<T, GenreDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GenreUpdateManyArgs>(
      args: SelectSubset<T, GenreUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Genre.
     * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
     * @example
     * // Update or create a Genre
     * const genre = await prisma.genre.upsert({
     *   create: {
     *     // ... data to create a Genre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genre we want to update
     *   }
     * })
    **/
    upsert<T extends GenreUpsertArgs>(
      args: SelectSubset<T, GenreUpsertArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Find one Genre that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GenreFindUniqueOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GenreFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GenreFindUniqueOrThrowArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Find the first Genre that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GenreFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GenreFindFirstOrThrowArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Count the number of Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreCountArgs} args - Arguments to filter Genres to count.
     * @example
     * // Count the number of Genres
     * const count = await prisma.genre.count({
     *   where: {
     *     // ... the filter for the Genres we want to count
     *   }
     * })
    **/
    count<T extends GenreCountArgs>(
      args?: Subset<T, GenreCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenreAggregateArgs>(args: Subset<T, GenreAggregateArgs>): PrismaPromise<GetGenreAggregateType<T>>

    /**
     * Group by Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenreGroupByArgs['orderBy'] }
        : { orderBy?: GenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Genre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GenreClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends BookFindManyArgs= {}>(args?: Subset<T, BookFindManyArgs>): PrismaPromise<Array<BookGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Genre base type for findUnique actions
   */
  export type GenreFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     * 
    **/
    where: GenreWhereUniqueInput
  }

  /**
   * Genre: findUnique
   */
  export interface GenreFindUniqueArgs extends GenreFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Genre base type for findFirst actions
   */
  export type GenreFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     * 
    **/
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     * 
    **/
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     * 
    **/
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     * 
    **/
    distinct?: Enumerable<GenreScalarFieldEnum>
  }

  /**
   * Genre: findFirst
   */
  export interface GenreFindFirstArgs extends GenreFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Genre findMany
   */
  export type GenreFindManyArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * Filter, which Genres to fetch.
     * 
    **/
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     * 
    **/
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genres.
     * 
    **/
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GenreScalarFieldEnum>
  }


  /**
   * Genre create
   */
  export type GenreCreateArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * The data needed to create a Genre.
     * 
    **/
    data: XOR<GenreCreateInput, GenreUncheckedCreateInput>
  }


  /**
   * Genre createMany
   */
  export type GenreCreateManyArgs = {
    /**
     * The data used to create many Genres.
     * 
    **/
    data: Enumerable<GenreCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Genre update
   */
  export type GenreUpdateArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * The data needed to update a Genre.
     * 
    **/
    data: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
    /**
     * Choose, which Genre to update.
     * 
    **/
    where: GenreWhereUniqueInput
  }


  /**
   * Genre updateMany
   */
  export type GenreUpdateManyArgs = {
    /**
     * The data used to update Genres.
     * 
    **/
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     * 
    **/
    where?: GenreWhereInput
  }


  /**
   * Genre upsert
   */
  export type GenreUpsertArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * The filter to search for the Genre to update in case it exists.
     * 
    **/
    where: GenreWhereUniqueInput
    /**
     * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
     * 
    **/
    create: XOR<GenreCreateInput, GenreUncheckedCreateInput>
    /**
     * In case the Genre was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
  }


  /**
   * Genre delete
   */
  export type GenreDeleteArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * Filter which Genre to delete.
     * 
    **/
    where: GenreWhereUniqueInput
  }


  /**
   * Genre deleteMany
   */
  export type GenreDeleteManyArgs = {
    /**
     * Filter which Genres to delete
     * 
    **/
    where?: GenreWhereInput
  }


  /**
   * Genre: findUniqueOrThrow
   */
  export type GenreFindUniqueOrThrowArgs = GenreFindUniqueArgsBase
      

  /**
   * Genre: findFirstOrThrow
   */
  export type GenreFindFirstOrThrowArgs = GenreFindFirstArgsBase
      

  /**
   * Genre without action
   */
  export type GenreArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AuthorScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    bio: 'bio',
    bipoc: 'bipoc',
    lgbtq: 'lgbtq'
  };

  export type AuthorScalarFieldEnum = (typeof AuthorScalarFieldEnum)[keyof typeof AuthorScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    isbn: 'isbn',
    synopsys: 'synopsys',
    imageUrl: 'imageUrl',
    releaseDate: 'releaseDate'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const ClubBookScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    clubId: 'clubId',
    status: 'status',
    upVotes: 'upVotes',
    startedOn: 'startedOn',
    completedOn: 'completedOn'
  };

  export type ClubBookScalarFieldEnum = (typeof ClubBookScalarFieldEnum)[keyof typeof ClubBookScalarFieldEnum]


  export const ClubScalarFieldEnum: {
    id: 'id',
    clubName: 'clubName'
  };

  export type ClubScalarFieldEnum = (typeof ClubScalarFieldEnum)[keyof typeof ClubScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    id: 'id',
    clubId: 'clubId',
    private: 'private',
    bookId: 'bookId',
    title: 'title',
    body: 'body',
    createdOn: 'createdOn',
    updatedOn: 'updatedOn'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const GenreScalarFieldEnum: {
    genre: 'genre'
  };

  export type GenreScalarFieldEnum = (typeof GenreScalarFieldEnum)[keyof typeof GenreScalarFieldEnum]


  export const MeetingScalarFieldEnum: {
    id: 'id',
    title: 'title',
    clubId: 'clubId',
    conversationId: 'conversationId',
    bookId: 'bookId',
    time: 'time',
    location: 'location'
  };

  export type MeetingScalarFieldEnum = (typeof MeetingScalarFieldEnum)[keyof typeof MeetingScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReactionScalarFieldEnum: {
    reaction: 'reaction'
  };

  export type ReactionScalarFieldEnum = (typeof ReactionScalarFieldEnum)[keyof typeof ReactionScalarFieldEnum]


  export const ResponseScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    conversationId: 'conversationId',
    replyToId: 'replyToId',
    body: 'body',
    createdOn: 'createdOn',
    editedOn: 'editedOn'
  };

  export type ResponseScalarFieldEnum = (typeof ResponseScalarFieldEnum)[keyof typeof ResponseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserBookScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    userId: 'userId',
    liked: 'liked',
    read: 'read',
    inProgress: 'inProgress'
  };

  export type UserBookScalarFieldEnum = (typeof UserBookScalarFieldEnum)[keyof typeof UserBookScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    updatedOn: 'updatedOn'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    createdOn: 'createdOn',
    updatedOn: 'updatedOn'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    clubs?: ClubListRelationFilter
    books?: UserBookListRelationFilter
    comments?: ResponseListRelationFilter
    createdOn?: DateTimeFilter | Date | string
    updatedOn?: DateTimeFilter | Date | string
    profile?: XOR<UserProfileRelationFilter, UserProfileWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    clubs?: ClubOrderByRelationAggregateInput
    books?: UserBookOrderByRelationAggregateInput
    comments?: ResponseOrderByRelationAggregateInput
    createdOn?: SortOrder
    updatedOn?: SortOrder
    profile?: UserProfileOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    createdOn?: DateTimeWithAggregatesFilter | Date | string
    updatedOn?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: Enumerable<UserProfileWhereInput>
    OR?: Enumerable<UserProfileWhereInput>
    NOT?: Enumerable<UserProfileWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    updatedOn?: DateTimeFilter | Date | string
  }

  export type UserProfileOrderByWithRelationInput = {
    User?: UserOrderByWithRelationInput
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    updatedOn?: SortOrder
  }

  export type UserProfileWhereUniqueInput = {
    userId?: string
  }

  export type UserProfileOrderByWithAggregationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    updatedOn?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
    updatedOn?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AuthorWhereInput = {
    AND?: Enumerable<AuthorWhereInput>
    OR?: Enumerable<AuthorWhereInput>
    NOT?: Enumerable<AuthorWhereInput>
    id?: IntFilter | number
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    bio?: StringNullableFilter | string | null
    bipoc?: BoolFilter | boolean
    lgbtq?: BoolFilter | boolean
    books?: BookListRelationFilter
  }

  export type AuthorOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    bio?: SortOrder
    bipoc?: SortOrder
    lgbtq?: SortOrder
    books?: BookOrderByRelationAggregateInput
  }

  export type AuthorWhereUniqueInput = {
    id?: number
  }

  export type AuthorOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    bio?: SortOrder
    bipoc?: SortOrder
    lgbtq?: SortOrder
    _count?: AuthorCountOrderByAggregateInput
    _avg?: AuthorAvgOrderByAggregateInput
    _max?: AuthorMaxOrderByAggregateInput
    _min?: AuthorMinOrderByAggregateInput
    _sum?: AuthorSumOrderByAggregateInput
  }

  export type AuthorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AuthorScalarWhereWithAggregatesInput>
    OR?: Enumerable<AuthorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AuthorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
    bio?: StringNullableWithAggregatesFilter | string | null
    bipoc?: BoolWithAggregatesFilter | boolean
    lgbtq?: BoolWithAggregatesFilter | boolean
  }

  export type BookWhereInput = {
    AND?: Enumerable<BookWhereInput>
    OR?: Enumerable<BookWhereInput>
    NOT?: Enumerable<BookWhereInput>
    id?: IntFilter | number
    Author?: XOR<AuthorRelationFilter, AuthorWhereInput>
    authorId?: IntFilter | number
    isbn?: StringNullableListFilter
    synopsys?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    genre?: GenreListRelationFilter
    releaseDate?: DateTimeNullableFilter | Date | string | null
    engagement?: UserBookListRelationFilter
    clubs?: ClubBookListRelationFilter
  }

  export type BookOrderByWithRelationInput = {
    id?: SortOrder
    Author?: AuthorOrderByWithRelationInput
    authorId?: SortOrder
    isbn?: SortOrder
    synopsys?: SortOrder
    imageUrl?: SortOrder
    genre?: GenreOrderByRelationAggregateInput
    releaseDate?: SortOrder
    engagement?: UserBookOrderByRelationAggregateInput
    clubs?: ClubBookOrderByRelationAggregateInput
  }

  export type BookWhereUniqueInput = {
    id?: number
  }

  export type BookOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    isbn?: SortOrder
    synopsys?: SortOrder
    imageUrl?: SortOrder
    releaseDate?: SortOrder
    _count?: BookCountOrderByAggregateInput
    _avg?: BookAvgOrderByAggregateInput
    _max?: BookMaxOrderByAggregateInput
    _min?: BookMinOrderByAggregateInput
    _sum?: BookSumOrderByAggregateInput
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    authorId?: IntWithAggregatesFilter | number
    isbn?: StringNullableListFilter
    synopsys?: StringWithAggregatesFilter | string
    imageUrl?: StringNullableWithAggregatesFilter | string | null
    releaseDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ClubWhereInput = {
    AND?: Enumerable<ClubWhereInput>
    OR?: Enumerable<ClubWhereInput>
    NOT?: Enumerable<ClubWhereInput>
    id?: StringFilter | string
    clubName?: StringFilter | string
    members?: UserListRelationFilter
    books?: ClubBookListRelationFilter
    meetings?: MeetingListRelationFilter
    conversations?: ConversationListRelationFilter
  }

  export type ClubOrderByWithRelationInput = {
    id?: SortOrder
    clubName?: SortOrder
    members?: UserOrderByRelationAggregateInput
    books?: ClubBookOrderByRelationAggregateInput
    meetings?: MeetingOrderByRelationAggregateInput
    conversations?: ConversationOrderByRelationAggregateInput
  }

  export type ClubWhereUniqueInput = {
    id?: string
  }

  export type ClubOrderByWithAggregationInput = {
    id?: SortOrder
    clubName?: SortOrder
    _count?: ClubCountOrderByAggregateInput
    _max?: ClubMaxOrderByAggregateInput
    _min?: ClubMinOrderByAggregateInput
  }

  export type ClubScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClubScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClubScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClubScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    clubName?: StringWithAggregatesFilter | string
  }

  export type UserBookWhereInput = {
    AND?: Enumerable<UserBookWhereInput>
    OR?: Enumerable<UserBookWhereInput>
    NOT?: Enumerable<UserBookWhereInput>
    id?: IntFilter | number
    Book?: XOR<BookRelationFilter, BookWhereInput>
    bookId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    liked?: BoolFilter | boolean
    read?: BoolFilter | boolean
    inProgress?: BoolFilter | boolean
  }

  export type UserBookOrderByWithRelationInput = {
    id?: SortOrder
    Book?: BookOrderByWithRelationInput
    bookId?: SortOrder
    User?: UserOrderByWithRelationInput
    userId?: SortOrder
    liked?: SortOrder
    read?: SortOrder
    inProgress?: SortOrder
  }

  export type UserBookWhereUniqueInput = {
    id?: number
  }

  export type UserBookOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
    liked?: SortOrder
    read?: SortOrder
    inProgress?: SortOrder
    _count?: UserBookCountOrderByAggregateInput
    _avg?: UserBookAvgOrderByAggregateInput
    _max?: UserBookMaxOrderByAggregateInput
    _min?: UserBookMinOrderByAggregateInput
    _sum?: UserBookSumOrderByAggregateInput
  }

  export type UserBookScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserBookScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserBookScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserBookScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookId?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    liked?: BoolWithAggregatesFilter | boolean
    read?: BoolWithAggregatesFilter | boolean
    inProgress?: BoolWithAggregatesFilter | boolean
  }

  export type ClubBookWhereInput = {
    AND?: Enumerable<ClubBookWhereInput>
    OR?: Enumerable<ClubBookWhereInput>
    NOT?: Enumerable<ClubBookWhereInput>
    id?: IntFilter | number
    Book?: XOR<BookRelationFilter, BookWhereInput>
    bookId?: IntFilter | number
    Club?: XOR<ClubRelationFilter, ClubWhereInput>
    clubId?: StringFilter | string
    status?: EnumClubBookStatusFilter | ClubBookStatus
    upVotes?: IntFilter | number
    startedOn?: DateTimeFilter | Date | string
    completedOn?: DateTimeFilter | Date | string
    conversations?: ConversationListRelationFilter
    meetings?: MeetingListRelationFilter
  }

  export type ClubBookOrderByWithRelationInput = {
    id?: SortOrder
    Book?: BookOrderByWithRelationInput
    bookId?: SortOrder
    Club?: ClubOrderByWithRelationInput
    clubId?: SortOrder
    status?: SortOrder
    upVotes?: SortOrder
    startedOn?: SortOrder
    completedOn?: SortOrder
    conversations?: ConversationOrderByRelationAggregateInput
    meetings?: MeetingOrderByRelationAggregateInput
  }

  export type ClubBookWhereUniqueInput = {
    id?: number
  }

  export type ClubBookOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    clubId?: SortOrder
    status?: SortOrder
    upVotes?: SortOrder
    startedOn?: SortOrder
    completedOn?: SortOrder
    _count?: ClubBookCountOrderByAggregateInput
    _avg?: ClubBookAvgOrderByAggregateInput
    _max?: ClubBookMaxOrderByAggregateInput
    _min?: ClubBookMinOrderByAggregateInput
    _sum?: ClubBookSumOrderByAggregateInput
  }

  export type ClubBookScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClubBookScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClubBookScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClubBookScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookId?: IntWithAggregatesFilter | number
    clubId?: StringWithAggregatesFilter | string
    status?: EnumClubBookStatusWithAggregatesFilter | ClubBookStatus
    upVotes?: IntWithAggregatesFilter | number
    startedOn?: DateTimeWithAggregatesFilter | Date | string
    completedOn?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MeetingWhereInput = {
    AND?: Enumerable<MeetingWhereInput>
    OR?: Enumerable<MeetingWhereInput>
    NOT?: Enumerable<MeetingWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    club?: XOR<ClubRelationFilter, ClubWhereInput>
    clubId?: StringFilter | string
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    conversationId?: IntFilter | number
    clubBook?: XOR<ClubBookRelationFilter, ClubBookWhereInput> | null
    bookId?: IntNullableFilter | number | null
    time?: DateTimeFilter | Date | string
    location?: StringFilter | string
  }

  export type MeetingOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    club?: ClubOrderByWithRelationInput
    clubId?: SortOrder
    conversation?: ConversationOrderByWithRelationInput
    conversationId?: SortOrder
    clubBook?: ClubBookOrderByWithRelationInput
    bookId?: SortOrder
    time?: SortOrder
    location?: SortOrder
  }

  export type MeetingWhereUniqueInput = {
    id?: number
    conversationId?: number
  }

  export type MeetingOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    clubId?: SortOrder
    conversationId?: SortOrder
    bookId?: SortOrder
    time?: SortOrder
    location?: SortOrder
    _count?: MeetingCountOrderByAggregateInput
    _avg?: MeetingAvgOrderByAggregateInput
    _max?: MeetingMaxOrderByAggregateInput
    _min?: MeetingMinOrderByAggregateInput
    _sum?: MeetingSumOrderByAggregateInput
  }

  export type MeetingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeetingScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeetingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeetingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    clubId?: StringWithAggregatesFilter | string
    conversationId?: IntWithAggregatesFilter | number
    bookId?: IntNullableWithAggregatesFilter | number | null
    time?: DateTimeWithAggregatesFilter | Date | string
    location?: StringWithAggregatesFilter | string
  }

  export type ConversationWhereInput = {
    AND?: Enumerable<ConversationWhereInput>
    OR?: Enumerable<ConversationWhereInput>
    NOT?: Enumerable<ConversationWhereInput>
    id?: IntFilter | number
    club?: XOR<ClubRelationFilter, ClubWhereInput>
    clubId?: StringFilter | string
    private?: BoolFilter | boolean
    clubBook?: XOR<ClubBookRelationFilter, ClubBookWhereInput> | null
    bookId?: IntNullableFilter | number | null
    meeting?: XOR<MeetingRelationFilter, MeetingWhereInput> | null
    title?: StringFilter | string
    body?: StringFilter | string
    responses?: ResponseListRelationFilter
    createdOn?: DateTimeFilter | Date | string
    updatedOn?: DateTimeFilter | Date | string
  }

  export type ConversationOrderByWithRelationInput = {
    id?: SortOrder
    club?: ClubOrderByWithRelationInput
    clubId?: SortOrder
    private?: SortOrder
    clubBook?: ClubBookOrderByWithRelationInput
    bookId?: SortOrder
    meeting?: MeetingOrderByWithRelationInput
    title?: SortOrder
    body?: SortOrder
    responses?: ResponseOrderByRelationAggregateInput
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type ConversationWhereUniqueInput = {
    id?: number
  }

  export type ConversationOrderByWithAggregationInput = {
    id?: SortOrder
    clubId?: SortOrder
    private?: SortOrder
    bookId?: SortOrder
    title?: SortOrder
    body?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
    _count?: ConversationCountOrderByAggregateInput
    _avg?: ConversationAvgOrderByAggregateInput
    _max?: ConversationMaxOrderByAggregateInput
    _min?: ConversationMinOrderByAggregateInput
    _sum?: ConversationSumOrderByAggregateInput
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ConversationScalarWhereWithAggregatesInput>
    OR?: Enumerable<ConversationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ConversationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clubId?: StringWithAggregatesFilter | string
    private?: BoolWithAggregatesFilter | boolean
    bookId?: IntNullableWithAggregatesFilter | number | null
    title?: StringWithAggregatesFilter | string
    body?: StringWithAggregatesFilter | string
    createdOn?: DateTimeWithAggregatesFilter | Date | string
    updatedOn?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ResponseWhereInput = {
    AND?: Enumerable<ResponseWhereInput>
    OR?: Enumerable<ResponseWhereInput>
    NOT?: Enumerable<ResponseWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput> | null
    conversationId?: IntNullableFilter | number | null
    replyTo?: XOR<ResponseRelationFilter, ResponseWhereInput> | null
    replyToId?: IntNullableFilter | number | null
    replies?: ResponseListRelationFilter
    body?: StringFilter | string
    createdOn?: DateTimeFilter | Date | string
    editedOn?: DateTimeFilter | Date | string
  }

  export type ResponseOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    conversation?: ConversationOrderByWithRelationInput
    conversationId?: SortOrder
    replyTo?: ResponseOrderByWithRelationInput
    replyToId?: SortOrder
    replies?: ResponseOrderByRelationAggregateInput
    body?: SortOrder
    createdOn?: SortOrder
    editedOn?: SortOrder
  }

  export type ResponseWhereUniqueInput = {
    id?: number
  }

  export type ResponseOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    conversationId?: SortOrder
    replyToId?: SortOrder
    body?: SortOrder
    createdOn?: SortOrder
    editedOn?: SortOrder
    _count?: ResponseCountOrderByAggregateInput
    _avg?: ResponseAvgOrderByAggregateInput
    _max?: ResponseMaxOrderByAggregateInput
    _min?: ResponseMinOrderByAggregateInput
    _sum?: ResponseSumOrderByAggregateInput
  }

  export type ResponseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    conversationId?: IntNullableWithAggregatesFilter | number | null
    replyToId?: IntNullableWithAggregatesFilter | number | null
    body?: StringWithAggregatesFilter | string
    createdOn?: DateTimeWithAggregatesFilter | Date | string
    editedOn?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ReactionWhereInput = {
    AND?: Enumerable<ReactionWhereInput>
    OR?: Enumerable<ReactionWhereInput>
    NOT?: Enumerable<ReactionWhereInput>
    reaction?: StringFilter | string
  }

  export type ReactionOrderByWithRelationInput = {
    reaction?: SortOrder
  }

  export type ReactionWhereUniqueInput = {
    reaction?: string
  }

  export type ReactionOrderByWithAggregationInput = {
    reaction?: SortOrder
    _count?: ReactionCountOrderByAggregateInput
    _max?: ReactionMaxOrderByAggregateInput
    _min?: ReactionMinOrderByAggregateInput
  }

  export type ReactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReactionScalarWhereWithAggregatesInput>
    reaction?: StringWithAggregatesFilter | string
  }

  export type GenreWhereInput = {
    AND?: Enumerable<GenreWhereInput>
    OR?: Enumerable<GenreWhereInput>
    NOT?: Enumerable<GenreWhereInput>
    genre?: StringFilter | string
    books?: BookListRelationFilter
  }

  export type GenreOrderByWithRelationInput = {
    genre?: SortOrder
    books?: BookOrderByRelationAggregateInput
  }

  export type GenreWhereUniqueInput = {
    genre?: string
  }

  export type GenreOrderByWithAggregationInput = {
    genre?: SortOrder
    _count?: GenreCountOrderByAggregateInput
    _max?: GenreMaxOrderByAggregateInput
    _min?: GenreMinOrderByAggregateInput
  }

  export type GenreScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GenreScalarWhereWithAggregatesInput>
    OR?: Enumerable<GenreScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GenreScalarWhereWithAggregatesInput>
    genre?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    clubs?: ClubCreateNestedManyWithoutMembersInput
    books?: UserBookCreateNestedManyWithoutUserInput
    comments?: ResponseCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    clubs?: ClubUncheckedCreateNestedManyWithoutMembersInput
    books?: UserBookUncheckedCreateNestedManyWithoutUserInput
    comments?: ResponseUncheckedCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clubs?: ClubUpdateManyWithoutMembersNestedInput
    books?: UserBookUpdateManyWithoutUserNestedInput
    comments?: ResponseUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clubs?: ClubUncheckedUpdateManyWithoutMembersNestedInput
    books?: UserBookUncheckedUpdateManyWithoutUserNestedInput
    comments?: ResponseUncheckedUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    User: UserCreateNestedOneWithoutProfileInput
    firstName?: string | null
    lastName?: string | null
    updatedOn?: Date | string
  }

  export type UserProfileUncheckedCreateInput = {
    userId: string
    firstName?: string | null
    lastName?: string | null
    updatedOn?: Date | string
  }

  export type UserProfileUpdateInput = {
    User?: UserUpdateOneRequiredWithoutProfileNestedInput
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateManyInput = {
    userId: string
    firstName?: string | null
    lastName?: string | null
    updatedOn?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorCreateInput = {
    firstName?: string | null
    lastName?: string | null
    bio?: string | null
    bipoc?: boolean
    lgbtq?: boolean
    books?: BookCreateNestedManyWithoutAuthorInput
  }

  export type AuthorUncheckedCreateInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    bio?: string | null
    bipoc?: boolean
    lgbtq?: boolean
    books?: BookUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type AuthorUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    bipoc?: BoolFieldUpdateOperationsInput | boolean
    lgbtq?: BoolFieldUpdateOperationsInput | boolean
    books?: BookUpdateManyWithoutAuthorNestedInput
  }

  export type AuthorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    bipoc?: BoolFieldUpdateOperationsInput | boolean
    lgbtq?: BoolFieldUpdateOperationsInput | boolean
    books?: BookUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type AuthorCreateManyInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    bio?: string | null
    bipoc?: boolean
    lgbtq?: boolean
  }

  export type AuthorUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    bipoc?: BoolFieldUpdateOperationsInput | boolean
    lgbtq?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AuthorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    bipoc?: BoolFieldUpdateOperationsInput | boolean
    lgbtq?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BookCreateInput = {
    Author: AuthorCreateNestedOneWithoutBooksInput
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    genre?: GenreCreateNestedManyWithoutBooksInput
    releaseDate?: Date | string | null
    engagement?: UserBookCreateNestedManyWithoutBookInput
    clubs?: ClubBookCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateInput = {
    id?: number
    authorId: number
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    genre?: GenreUncheckedCreateNestedManyWithoutBooksInput
    releaseDate?: Date | string | null
    engagement?: UserBookUncheckedCreateNestedManyWithoutBookInput
    clubs?: ClubBookUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookUpdateInput = {
    Author?: AuthorUpdateOneRequiredWithoutBooksNestedInput
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: GenreUpdateManyWithoutBooksNestedInput
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    engagement?: UserBookUpdateManyWithoutBookNestedInput
    clubs?: ClubBookUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: GenreUncheckedUpdateManyWithoutBooksNestedInput
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    engagement?: UserBookUncheckedUpdateManyWithoutBookNestedInput
    clubs?: ClubBookUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookCreateManyInput = {
    id?: number
    authorId: number
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    releaseDate?: Date | string | null
  }

  export type BookUpdateManyMutationInput = {
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClubCreateInput = {
    id?: string
    clubName: string
    members?: UserCreateNestedManyWithoutClubsInput
    books?: ClubBookCreateNestedManyWithoutClubInput
    meetings?: MeetingCreateNestedManyWithoutClubInput
    conversations?: ConversationCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateInput = {
    id?: string
    clubName: string
    members?: UserUncheckedCreateNestedManyWithoutClubsInput
    books?: ClubBookUncheckedCreateNestedManyWithoutClubInput
    meetings?: MeetingUncheckedCreateNestedManyWithoutClubInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    members?: UserUpdateManyWithoutClubsNestedInput
    books?: ClubBookUpdateManyWithoutClubNestedInput
    meetings?: MeetingUpdateManyWithoutClubNestedInput
    conversations?: ConversationUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    members?: UserUncheckedUpdateManyWithoutClubsNestedInput
    books?: ClubBookUncheckedUpdateManyWithoutClubNestedInput
    meetings?: MeetingUncheckedUpdateManyWithoutClubNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubCreateManyInput = {
    id?: string
    clubName: string
  }

  export type ClubUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
  }

  export type ClubUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
  }

  export type UserBookCreateInput = {
    Book: BookCreateNestedOneWithoutEngagementInput
    User: UserCreateNestedOneWithoutBooksInput
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type UserBookUncheckedCreateInput = {
    id?: number
    bookId: number
    userId: string
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type UserBookUpdateInput = {
    Book?: BookUpdateOneRequiredWithoutEngagementNestedInput
    User?: UserUpdateOneRequiredWithoutBooksNestedInput
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBookCreateManyInput = {
    id?: number
    bookId: number
    userId: string
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type UserBookUpdateManyMutationInput = {
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClubBookCreateInput = {
    Book: BookCreateNestedOneWithoutClubsInput
    Club: ClubCreateNestedOneWithoutBooksInput
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    conversations?: ConversationCreateNestedManyWithoutClubBookInput
    meetings?: MeetingCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookUncheckedCreateInput = {
    id?: number
    bookId: number
    clubId: string
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    conversations?: ConversationUncheckedCreateNestedManyWithoutClubBookInput
    meetings?: MeetingUncheckedCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookUpdateInput = {
    Book?: BookUpdateOneRequiredWithoutClubsNestedInput
    Club?: ClubUpdateOneRequiredWithoutBooksNestedInput
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUpdateManyWithoutClubBookNestedInput
    meetings?: MeetingUpdateManyWithoutClubBookNestedInput
  }

  export type ClubBookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUncheckedUpdateManyWithoutClubBookNestedInput
    meetings?: MeetingUncheckedUpdateManyWithoutClubBookNestedInput
  }

  export type ClubBookCreateManyInput = {
    id?: number
    bookId: number
    clubId: string
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
  }

  export type ClubBookUpdateManyMutationInput = {
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubBookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingCreateInput = {
    title: string
    club: ClubCreateNestedOneWithoutMeetingsInput
    conversation: ConversationCreateNestedOneWithoutMeetingInput
    clubBook?: ClubBookCreateNestedOneWithoutMeetingsInput
    time: Date | string
    location: string
  }

  export type MeetingUncheckedCreateInput = {
    id?: number
    title: string
    clubId: string
    conversationId: number
    bookId?: number | null
    time: Date | string
    location: string
  }

  export type MeetingUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    club?: ClubUpdateOneRequiredWithoutMeetingsNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMeetingNestedInput
    clubBook?: ClubBookUpdateOneWithoutMeetingsNestedInput
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type MeetingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    conversationId?: IntFieldUpdateOperationsInput | number
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type MeetingCreateManyInput = {
    id?: number
    title: string
    clubId: string
    conversationId: number
    bookId?: number | null
    time: Date | string
    location: string
  }

  export type MeetingUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type MeetingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    conversationId?: IntFieldUpdateOperationsInput | number
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ConversationCreateInput = {
    club: ClubCreateNestedOneWithoutConversationsInput
    private: boolean
    clubBook?: ClubBookCreateNestedOneWithoutConversationsInput
    meeting?: MeetingCreateNestedOneWithoutConversationInput
    title: string
    body: string
    responses?: ResponseCreateNestedManyWithoutConversationInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationUncheckedCreateInput = {
    id?: number
    clubId: string
    private: boolean
    bookId?: number | null
    meeting?: MeetingUncheckedCreateNestedOneWithoutConversationInput
    title: string
    body: string
    responses?: ResponseUncheckedCreateNestedManyWithoutConversationInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationUpdateInput = {
    club?: ClubUpdateOneRequiredWithoutConversationsNestedInput
    private?: BoolFieldUpdateOperationsInput | boolean
    clubBook?: ClubBookUpdateOneWithoutConversationsNestedInput
    meeting?: MeetingUpdateOneWithoutConversationNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUpdateManyWithoutConversationNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    meeting?: MeetingUncheckedUpdateOneWithoutConversationNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUncheckedUpdateManyWithoutConversationNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationCreateManyInput = {
    id?: number
    clubId: string
    private: boolean
    bookId?: number | null
    title: string
    body: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationUpdateManyMutationInput = {
    private?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseCreateInput = {
    user: UserCreateNestedOneWithoutCommentsInput
    conversation?: ConversationCreateNestedOneWithoutResponsesInput
    replyTo?: ResponseCreateNestedOneWithoutRepliesInput
    replies?: ResponseCreateNestedManyWithoutReplyToInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUncheckedCreateInput = {
    id?: number
    userId: string
    conversationId?: number | null
    replyToId?: number | null
    replies?: ResponseUncheckedCreateNestedManyWithoutReplyToInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUpdateInput = {
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    conversation?: ConversationUpdateOneWithoutResponsesNestedInput
    replyTo?: ResponseUpdateOneWithoutRepliesNestedInput
    replies?: ResponseUpdateManyWithoutReplyToNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    replyToId?: NullableIntFieldUpdateOperationsInput | number | null
    replies?: ResponseUncheckedUpdateManyWithoutReplyToNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseCreateManyInput = {
    id?: number
    userId: string
    conversationId?: number | null
    replyToId?: number | null
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUpdateManyMutationInput = {
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    replyToId?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReactionCreateInput = {
    reaction: string
  }

  export type ReactionUncheckedCreateInput = {
    reaction: string
  }

  export type ReactionUpdateInput = {
    reaction?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionUncheckedUpdateInput = {
    reaction?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionCreateManyInput = {
    reaction: string
  }

  export type ReactionUpdateManyMutationInput = {
    reaction?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionUncheckedUpdateManyInput = {
    reaction?: StringFieldUpdateOperationsInput | string
  }

  export type GenreCreateInput = {
    genre: string
    books?: BookCreateNestedManyWithoutGenreInput
  }

  export type GenreUncheckedCreateInput = {
    genre: string
    books?: BookUncheckedCreateNestedManyWithoutGenreInput
  }

  export type GenreUpdateInput = {
    genre?: StringFieldUpdateOperationsInput | string
    books?: BookUpdateManyWithoutGenreNestedInput
  }

  export type GenreUncheckedUpdateInput = {
    genre?: StringFieldUpdateOperationsInput | string
    books?: BookUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type GenreCreateManyInput = {
    genre: string
  }

  export type GenreUpdateManyMutationInput = {
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateManyInput = {
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type ClubListRelationFilter = {
    every?: ClubWhereInput
    some?: ClubWhereInput
    none?: ClubWhereInput
  }

  export type UserBookListRelationFilter = {
    every?: UserBookWhereInput
    some?: UserBookWhereInput
    none?: UserBookWhereInput
  }

  export type ResponseListRelationFilter = {
    every?: ResponseWhereInput
    some?: ResponseWhereInput
    none?: ResponseWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserProfileRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type ClubOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type UserProfileCountOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    updatedOn?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    updatedOn?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    updatedOn?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BookListRelationFilter = {
    every?: BookWhereInput
    some?: BookWhereInput
    none?: BookWhereInput
  }

  export type BookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthorCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    bio?: SortOrder
    bipoc?: SortOrder
    lgbtq?: SortOrder
  }

  export type AuthorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuthorMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    bio?: SortOrder
    bipoc?: SortOrder
    lgbtq?: SortOrder
  }

  export type AuthorMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    bio?: SortOrder
    bipoc?: SortOrder
    lgbtq?: SortOrder
  }

  export type AuthorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type AuthorRelationFilter = {
    is?: AuthorWhereInput
    isNot?: AuthorWhereInput
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type GenreListRelationFilter = {
    every?: GenreWhereInput
    some?: GenreWhereInput
    none?: GenreWhereInput
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type ClubBookListRelationFilter = {
    every?: ClubBookWhereInput
    some?: ClubBookWhereInput
    none?: ClubBookWhereInput
  }

  export type GenreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubBookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    isbn?: SortOrder
    synopsys?: SortOrder
    imageUrl?: SortOrder
    releaseDate?: SortOrder
  }

  export type BookAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type BookMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    synopsys?: SortOrder
    imageUrl?: SortOrder
    releaseDate?: SortOrder
  }

  export type BookMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    synopsys?: SortOrder
    imageUrl?: SortOrder
    releaseDate?: SortOrder
  }

  export type BookSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type MeetingListRelationFilter = {
    every?: MeetingWhereInput
    some?: MeetingWhereInput
    none?: MeetingWhereInput
  }

  export type ConversationListRelationFilter = {
    every?: ConversationWhereInput
    some?: ConversationWhereInput
    none?: ConversationWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubCountOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
  }

  export type ClubMaxOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
  }

  export type ClubMinOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
  }

  export type BookRelationFilter = {
    is?: BookWhereInput
    isNot?: BookWhereInput
  }

  export type UserBookCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
    liked?: SortOrder
    read?: SortOrder
    inProgress?: SortOrder
  }

  export type UserBookAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
  }

  export type UserBookMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
    liked?: SortOrder
    read?: SortOrder
    inProgress?: SortOrder
  }

  export type UserBookMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
    liked?: SortOrder
    read?: SortOrder
    inProgress?: SortOrder
  }

  export type UserBookSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
  }

  export type ClubRelationFilter = {
    is?: ClubWhereInput
    isNot?: ClubWhereInput
  }

  export type EnumClubBookStatusFilter = {
    equals?: ClubBookStatus
    in?: Enumerable<ClubBookStatus>
    notIn?: Enumerable<ClubBookStatus>
    not?: NestedEnumClubBookStatusFilter | ClubBookStatus
  }

  export type ClubBookCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    clubId?: SortOrder
    status?: SortOrder
    upVotes?: SortOrder
    startedOn?: SortOrder
    completedOn?: SortOrder
  }

  export type ClubBookAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    upVotes?: SortOrder
  }

  export type ClubBookMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    clubId?: SortOrder
    status?: SortOrder
    upVotes?: SortOrder
    startedOn?: SortOrder
    completedOn?: SortOrder
  }

  export type ClubBookMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    clubId?: SortOrder
    status?: SortOrder
    upVotes?: SortOrder
    startedOn?: SortOrder
    completedOn?: SortOrder
  }

  export type ClubBookSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    upVotes?: SortOrder
  }

  export type EnumClubBookStatusWithAggregatesFilter = {
    equals?: ClubBookStatus
    in?: Enumerable<ClubBookStatus>
    notIn?: Enumerable<ClubBookStatus>
    not?: NestedEnumClubBookStatusWithAggregatesFilter | ClubBookStatus
    _count?: NestedIntFilter
    _min?: NestedEnumClubBookStatusFilter
    _max?: NestedEnumClubBookStatusFilter
  }

  export type ConversationRelationFilter = {
    is?: ConversationWhereInput
    isNot?: ConversationWhereInput
  }

  export type ClubBookRelationFilter = {
    is?: ClubBookWhereInput | null
    isNot?: ClubBookWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type MeetingCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    clubId?: SortOrder
    conversationId?: SortOrder
    bookId?: SortOrder
    time?: SortOrder
    location?: SortOrder
  }

  export type MeetingAvgOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    bookId?: SortOrder
  }

  export type MeetingMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    clubId?: SortOrder
    conversationId?: SortOrder
    bookId?: SortOrder
    time?: SortOrder
    location?: SortOrder
  }

  export type MeetingMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    clubId?: SortOrder
    conversationId?: SortOrder
    bookId?: SortOrder
    time?: SortOrder
    location?: SortOrder
  }

  export type MeetingSumOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    bookId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type MeetingRelationFilter = {
    is?: MeetingWhereInput | null
    isNot?: MeetingWhereInput | null
  }

  export type ConversationCountOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    private?: SortOrder
    bookId?: SortOrder
    title?: SortOrder
    body?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type ConversationAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
  }

  export type ConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    private?: SortOrder
    bookId?: SortOrder
    title?: SortOrder
    body?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type ConversationMinOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    private?: SortOrder
    bookId?: SortOrder
    title?: SortOrder
    body?: SortOrder
    createdOn?: SortOrder
    updatedOn?: SortOrder
  }

  export type ConversationSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
  }

  export type ResponseRelationFilter = {
    is?: ResponseWhereInput | null
    isNot?: ResponseWhereInput | null
  }

  export type ResponseCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    conversationId?: SortOrder
    replyToId?: SortOrder
    body?: SortOrder
    createdOn?: SortOrder
    editedOn?: SortOrder
  }

  export type ResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    replyToId?: SortOrder
  }

  export type ResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    conversationId?: SortOrder
    replyToId?: SortOrder
    body?: SortOrder
    createdOn?: SortOrder
    editedOn?: SortOrder
  }

  export type ResponseMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    conversationId?: SortOrder
    replyToId?: SortOrder
    body?: SortOrder
    createdOn?: SortOrder
    editedOn?: SortOrder
  }

  export type ResponseSumOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    replyToId?: SortOrder
  }

  export type ReactionCountOrderByAggregateInput = {
    reaction?: SortOrder
  }

  export type ReactionMaxOrderByAggregateInput = {
    reaction?: SortOrder
  }

  export type ReactionMinOrderByAggregateInput = {
    reaction?: SortOrder
  }

  export type GenreCountOrderByAggregateInput = {
    genre?: SortOrder
  }

  export type GenreMaxOrderByAggregateInput = {
    genre?: SortOrder
  }

  export type GenreMinOrderByAggregateInput = {
    genre?: SortOrder
  }

  export type ClubCreateNestedManyWithoutMembersInput = {
    create?: XOR<Enumerable<ClubCreateWithoutMembersInput>, Enumerable<ClubUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<ClubCreateOrConnectWithoutMembersInput>
    connect?: Enumerable<ClubWhereUniqueInput>
  }

  export type UserBookCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserBookCreateWithoutUserInput>, Enumerable<UserBookUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserBookCreateOrConnectWithoutUserInput>
    createMany?: UserBookCreateManyUserInputEnvelope
    connect?: Enumerable<UserBookWhereUniqueInput>
  }

  export type ResponseCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type ClubUncheckedCreateNestedManyWithoutMembersInput = {
    create?: XOR<Enumerable<ClubCreateWithoutMembersInput>, Enumerable<ClubUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<ClubCreateOrConnectWithoutMembersInput>
    connect?: Enumerable<ClubWhereUniqueInput>
  }

  export type UserBookUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserBookCreateWithoutUserInput>, Enumerable<UserBookUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserBookCreateOrConnectWithoutUserInput>
    createMany?: UserBookCreateManyUserInputEnvelope
    connect?: Enumerable<UserBookWhereUniqueInput>
  }

  export type ResponseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ClubUpdateManyWithoutMembersNestedInput = {
    create?: XOR<Enumerable<ClubCreateWithoutMembersInput>, Enumerable<ClubUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<ClubCreateOrConnectWithoutMembersInput>
    upsert?: Enumerable<ClubUpsertWithWhereUniqueWithoutMembersInput>
    set?: Enumerable<ClubWhereUniqueInput>
    disconnect?: Enumerable<ClubWhereUniqueInput>
    delete?: Enumerable<ClubWhereUniqueInput>
    connect?: Enumerable<ClubWhereUniqueInput>
    update?: Enumerable<ClubUpdateWithWhereUniqueWithoutMembersInput>
    updateMany?: Enumerable<ClubUpdateManyWithWhereWithoutMembersInput>
    deleteMany?: Enumerable<ClubScalarWhereInput>
  }

  export type UserBookUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserBookCreateWithoutUserInput>, Enumerable<UserBookUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserBookCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserBookUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserBookCreateManyUserInputEnvelope
    set?: Enumerable<UserBookWhereUniqueInput>
    disconnect?: Enumerable<UserBookWhereUniqueInput>
    delete?: Enumerable<UserBookWhereUniqueInput>
    connect?: Enumerable<UserBookWhereUniqueInput>
    update?: Enumerable<UserBookUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserBookUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserBookScalarWhereInput>
  }

  export type ResponseUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type ClubUncheckedUpdateManyWithoutMembersNestedInput = {
    create?: XOR<Enumerable<ClubCreateWithoutMembersInput>, Enumerable<ClubUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<ClubCreateOrConnectWithoutMembersInput>
    upsert?: Enumerable<ClubUpsertWithWhereUniqueWithoutMembersInput>
    set?: Enumerable<ClubWhereUniqueInput>
    disconnect?: Enumerable<ClubWhereUniqueInput>
    delete?: Enumerable<ClubWhereUniqueInput>
    connect?: Enumerable<ClubWhereUniqueInput>
    update?: Enumerable<ClubUpdateWithWhereUniqueWithoutMembersInput>
    updateMany?: Enumerable<ClubUpdateManyWithWhereWithoutMembersInput>
    deleteMany?: Enumerable<ClubScalarWhereInput>
  }

  export type UserBookUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserBookCreateWithoutUserInput>, Enumerable<UserBookUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserBookCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserBookUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserBookCreateManyUserInputEnvelope
    set?: Enumerable<UserBookWhereUniqueInput>
    disconnect?: Enumerable<UserBookWhereUniqueInput>
    delete?: Enumerable<UserBookWhereUniqueInput>
    connect?: Enumerable<UserBookWhereUniqueInput>
    update?: Enumerable<UserBookUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserBookUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserBookScalarWhereInput>
  }

  export type ResponseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BookCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<BookCreateWithoutAuthorInput>, Enumerable<BookUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutAuthorInput>
    createMany?: BookCreateManyAuthorInputEnvelope
    connect?: Enumerable<BookWhereUniqueInput>
  }

  export type BookUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<BookCreateWithoutAuthorInput>, Enumerable<BookUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutAuthorInput>
    createMany?: BookCreateManyAuthorInputEnvelope
    connect?: Enumerable<BookWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BookUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<BookCreateWithoutAuthorInput>, Enumerable<BookUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<BookUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: BookCreateManyAuthorInputEnvelope
    set?: Enumerable<BookWhereUniqueInput>
    disconnect?: Enumerable<BookWhereUniqueInput>
    delete?: Enumerable<BookWhereUniqueInput>
    connect?: Enumerable<BookWhereUniqueInput>
    update?: Enumerable<BookUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<BookUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<BookScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BookUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<BookCreateWithoutAuthorInput>, Enumerable<BookUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<BookUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: BookCreateManyAuthorInputEnvelope
    set?: Enumerable<BookWhereUniqueInput>
    disconnect?: Enumerable<BookWhereUniqueInput>
    delete?: Enumerable<BookWhereUniqueInput>
    connect?: Enumerable<BookWhereUniqueInput>
    update?: Enumerable<BookUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<BookUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<BookScalarWhereInput>
  }

  export type AuthorCreateNestedOneWithoutBooksInput = {
    create?: XOR<AuthorCreateWithoutBooksInput, AuthorUncheckedCreateWithoutBooksInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutBooksInput
    connect?: AuthorWhereUniqueInput
  }

  export type BookCreateisbnInput = {
    set: Enumerable<string>
  }

  export type GenreCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<GenreCreateWithoutBooksInput>, Enumerable<GenreUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<GenreCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<GenreWhereUniqueInput>
  }

  export type UserBookCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<UserBookCreateWithoutBookInput>, Enumerable<UserBookUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<UserBookCreateOrConnectWithoutBookInput>
    createMany?: UserBookCreateManyBookInputEnvelope
    connect?: Enumerable<UserBookWhereUniqueInput>
  }

  export type ClubBookCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<ClubBookCreateWithoutBookInput>, Enumerable<ClubBookUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ClubBookCreateOrConnectWithoutBookInput>
    createMany?: ClubBookCreateManyBookInputEnvelope
    connect?: Enumerable<ClubBookWhereUniqueInput>
  }

  export type GenreUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<GenreCreateWithoutBooksInput>, Enumerable<GenreUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<GenreCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<GenreWhereUniqueInput>
  }

  export type UserBookUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<UserBookCreateWithoutBookInput>, Enumerable<UserBookUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<UserBookCreateOrConnectWithoutBookInput>
    createMany?: UserBookCreateManyBookInputEnvelope
    connect?: Enumerable<UserBookWhereUniqueInput>
  }

  export type ClubBookUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<ClubBookCreateWithoutBookInput>, Enumerable<ClubBookUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ClubBookCreateOrConnectWithoutBookInput>
    createMany?: ClubBookCreateManyBookInputEnvelope
    connect?: Enumerable<ClubBookWhereUniqueInput>
  }

  export type AuthorUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<AuthorCreateWithoutBooksInput, AuthorUncheckedCreateWithoutBooksInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutBooksInput
    upsert?: AuthorUpsertWithoutBooksInput
    connect?: AuthorWhereUniqueInput
    update?: XOR<AuthorUpdateWithoutBooksInput, AuthorUncheckedUpdateWithoutBooksInput>
  }

  export type BookUpdateisbnInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type GenreUpdateManyWithoutBooksNestedInput = {
    create?: XOR<Enumerable<GenreCreateWithoutBooksInput>, Enumerable<GenreUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<GenreCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<GenreUpsertWithWhereUniqueWithoutBooksInput>
    set?: Enumerable<GenreWhereUniqueInput>
    disconnect?: Enumerable<GenreWhereUniqueInput>
    delete?: Enumerable<GenreWhereUniqueInput>
    connect?: Enumerable<GenreWhereUniqueInput>
    update?: Enumerable<GenreUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<GenreUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<GenreScalarWhereInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserBookUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<UserBookCreateWithoutBookInput>, Enumerable<UserBookUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<UserBookCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<UserBookUpsertWithWhereUniqueWithoutBookInput>
    createMany?: UserBookCreateManyBookInputEnvelope
    set?: Enumerable<UserBookWhereUniqueInput>
    disconnect?: Enumerable<UserBookWhereUniqueInput>
    delete?: Enumerable<UserBookWhereUniqueInput>
    connect?: Enumerable<UserBookWhereUniqueInput>
    update?: Enumerable<UserBookUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<UserBookUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<UserBookScalarWhereInput>
  }

  export type ClubBookUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<ClubBookCreateWithoutBookInput>, Enumerable<ClubBookUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ClubBookCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<ClubBookUpsertWithWhereUniqueWithoutBookInput>
    createMany?: ClubBookCreateManyBookInputEnvelope
    set?: Enumerable<ClubBookWhereUniqueInput>
    disconnect?: Enumerable<ClubBookWhereUniqueInput>
    delete?: Enumerable<ClubBookWhereUniqueInput>
    connect?: Enumerable<ClubBookWhereUniqueInput>
    update?: Enumerable<ClubBookUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<ClubBookUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<ClubBookScalarWhereInput>
  }

  export type GenreUncheckedUpdateManyWithoutBooksNestedInput = {
    create?: XOR<Enumerable<GenreCreateWithoutBooksInput>, Enumerable<GenreUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<GenreCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<GenreUpsertWithWhereUniqueWithoutBooksInput>
    set?: Enumerable<GenreWhereUniqueInput>
    disconnect?: Enumerable<GenreWhereUniqueInput>
    delete?: Enumerable<GenreWhereUniqueInput>
    connect?: Enumerable<GenreWhereUniqueInput>
    update?: Enumerable<GenreUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<GenreUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<GenreScalarWhereInput>
  }

  export type UserBookUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<UserBookCreateWithoutBookInput>, Enumerable<UserBookUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<UserBookCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<UserBookUpsertWithWhereUniqueWithoutBookInput>
    createMany?: UserBookCreateManyBookInputEnvelope
    set?: Enumerable<UserBookWhereUniqueInput>
    disconnect?: Enumerable<UserBookWhereUniqueInput>
    delete?: Enumerable<UserBookWhereUniqueInput>
    connect?: Enumerable<UserBookWhereUniqueInput>
    update?: Enumerable<UserBookUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<UserBookUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<UserBookScalarWhereInput>
  }

  export type ClubBookUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<ClubBookCreateWithoutBookInput>, Enumerable<ClubBookUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ClubBookCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<ClubBookUpsertWithWhereUniqueWithoutBookInput>
    createMany?: ClubBookCreateManyBookInputEnvelope
    set?: Enumerable<ClubBookWhereUniqueInput>
    disconnect?: Enumerable<ClubBookWhereUniqueInput>
    delete?: Enumerable<ClubBookWhereUniqueInput>
    connect?: Enumerable<ClubBookWhereUniqueInput>
    update?: Enumerable<ClubBookUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<ClubBookUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<ClubBookScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutClubsInput = {
    create?: XOR<Enumerable<UserCreateWithoutClubsInput>, Enumerable<UserUncheckedCreateWithoutClubsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutClubsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ClubBookCreateNestedManyWithoutClubInput = {
    create?: XOR<Enumerable<ClubBookCreateWithoutClubInput>, Enumerable<ClubBookUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<ClubBookCreateOrConnectWithoutClubInput>
    createMany?: ClubBookCreateManyClubInputEnvelope
    connect?: Enumerable<ClubBookWhereUniqueInput>
  }

  export type MeetingCreateNestedManyWithoutClubInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutClubInput>, Enumerable<MeetingUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutClubInput>
    createMany?: MeetingCreateManyClubInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type ConversationCreateNestedManyWithoutClubInput = {
    create?: XOR<Enumerable<ConversationCreateWithoutClubInput>, Enumerable<ConversationUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<ConversationCreateOrConnectWithoutClubInput>
    createMany?: ConversationCreateManyClubInputEnvelope
    connect?: Enumerable<ConversationWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutClubsInput = {
    create?: XOR<Enumerable<UserCreateWithoutClubsInput>, Enumerable<UserUncheckedCreateWithoutClubsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutClubsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ClubBookUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<Enumerable<ClubBookCreateWithoutClubInput>, Enumerable<ClubBookUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<ClubBookCreateOrConnectWithoutClubInput>
    createMany?: ClubBookCreateManyClubInputEnvelope
    connect?: Enumerable<ClubBookWhereUniqueInput>
  }

  export type MeetingUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutClubInput>, Enumerable<MeetingUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutClubInput>
    createMany?: MeetingCreateManyClubInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type ConversationUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<Enumerable<ConversationCreateWithoutClubInput>, Enumerable<ConversationUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<ConversationCreateOrConnectWithoutClubInput>
    createMany?: ConversationCreateManyClubInputEnvelope
    connect?: Enumerable<ConversationWhereUniqueInput>
  }

  export type UserUpdateManyWithoutClubsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutClubsInput>, Enumerable<UserUncheckedCreateWithoutClubsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutClubsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutClubsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutClubsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutClubsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ClubBookUpdateManyWithoutClubNestedInput = {
    create?: XOR<Enumerable<ClubBookCreateWithoutClubInput>, Enumerable<ClubBookUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<ClubBookCreateOrConnectWithoutClubInput>
    upsert?: Enumerable<ClubBookUpsertWithWhereUniqueWithoutClubInput>
    createMany?: ClubBookCreateManyClubInputEnvelope
    set?: Enumerable<ClubBookWhereUniqueInput>
    disconnect?: Enumerable<ClubBookWhereUniqueInput>
    delete?: Enumerable<ClubBookWhereUniqueInput>
    connect?: Enumerable<ClubBookWhereUniqueInput>
    update?: Enumerable<ClubBookUpdateWithWhereUniqueWithoutClubInput>
    updateMany?: Enumerable<ClubBookUpdateManyWithWhereWithoutClubInput>
    deleteMany?: Enumerable<ClubBookScalarWhereInput>
  }

  export type MeetingUpdateManyWithoutClubNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutClubInput>, Enumerable<MeetingUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutClubInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutClubInput>
    createMany?: MeetingCreateManyClubInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutClubInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutClubInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type ConversationUpdateManyWithoutClubNestedInput = {
    create?: XOR<Enumerable<ConversationCreateWithoutClubInput>, Enumerable<ConversationUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<ConversationCreateOrConnectWithoutClubInput>
    upsert?: Enumerable<ConversationUpsertWithWhereUniqueWithoutClubInput>
    createMany?: ConversationCreateManyClubInputEnvelope
    set?: Enumerable<ConversationWhereUniqueInput>
    disconnect?: Enumerable<ConversationWhereUniqueInput>
    delete?: Enumerable<ConversationWhereUniqueInput>
    connect?: Enumerable<ConversationWhereUniqueInput>
    update?: Enumerable<ConversationUpdateWithWhereUniqueWithoutClubInput>
    updateMany?: Enumerable<ConversationUpdateManyWithWhereWithoutClubInput>
    deleteMany?: Enumerable<ConversationScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutClubsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutClubsInput>, Enumerable<UserUncheckedCreateWithoutClubsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutClubsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutClubsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutClubsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutClubsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ClubBookUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<Enumerable<ClubBookCreateWithoutClubInput>, Enumerable<ClubBookUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<ClubBookCreateOrConnectWithoutClubInput>
    upsert?: Enumerable<ClubBookUpsertWithWhereUniqueWithoutClubInput>
    createMany?: ClubBookCreateManyClubInputEnvelope
    set?: Enumerable<ClubBookWhereUniqueInput>
    disconnect?: Enumerable<ClubBookWhereUniqueInput>
    delete?: Enumerable<ClubBookWhereUniqueInput>
    connect?: Enumerable<ClubBookWhereUniqueInput>
    update?: Enumerable<ClubBookUpdateWithWhereUniqueWithoutClubInput>
    updateMany?: Enumerable<ClubBookUpdateManyWithWhereWithoutClubInput>
    deleteMany?: Enumerable<ClubBookScalarWhereInput>
  }

  export type MeetingUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutClubInput>, Enumerable<MeetingUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutClubInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutClubInput>
    createMany?: MeetingCreateManyClubInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutClubInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutClubInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type ConversationUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<Enumerable<ConversationCreateWithoutClubInput>, Enumerable<ConversationUncheckedCreateWithoutClubInput>>
    connectOrCreate?: Enumerable<ConversationCreateOrConnectWithoutClubInput>
    upsert?: Enumerable<ConversationUpsertWithWhereUniqueWithoutClubInput>
    createMany?: ConversationCreateManyClubInputEnvelope
    set?: Enumerable<ConversationWhereUniqueInput>
    disconnect?: Enumerable<ConversationWhereUniqueInput>
    delete?: Enumerable<ConversationWhereUniqueInput>
    connect?: Enumerable<ConversationWhereUniqueInput>
    update?: Enumerable<ConversationUpdateWithWhereUniqueWithoutClubInput>
    updateMany?: Enumerable<ConversationUpdateManyWithWhereWithoutClubInput>
    deleteMany?: Enumerable<ConversationScalarWhereInput>
  }

  export type BookCreateNestedOneWithoutEngagementInput = {
    create?: XOR<BookCreateWithoutEngagementInput, BookUncheckedCreateWithoutEngagementInput>
    connectOrCreate?: BookCreateOrConnectWithoutEngagementInput
    connect?: BookWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBooksInput = {
    create?: XOR<UserCreateWithoutBooksInput, UserUncheckedCreateWithoutBooksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBooksInput
    connect?: UserWhereUniqueInput
  }

  export type BookUpdateOneRequiredWithoutEngagementNestedInput = {
    create?: XOR<BookCreateWithoutEngagementInput, BookUncheckedCreateWithoutEngagementInput>
    connectOrCreate?: BookCreateOrConnectWithoutEngagementInput
    upsert?: BookUpsertWithoutEngagementInput
    connect?: BookWhereUniqueInput
    update?: XOR<BookUpdateWithoutEngagementInput, BookUncheckedUpdateWithoutEngagementInput>
  }

  export type UserUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<UserCreateWithoutBooksInput, UserUncheckedCreateWithoutBooksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBooksInput
    upsert?: UserUpsertWithoutBooksInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBooksInput, UserUncheckedUpdateWithoutBooksInput>
  }

  export type BookCreateNestedOneWithoutClubsInput = {
    create?: XOR<BookCreateWithoutClubsInput, BookUncheckedCreateWithoutClubsInput>
    connectOrCreate?: BookCreateOrConnectWithoutClubsInput
    connect?: BookWhereUniqueInput
  }

  export type ClubCreateNestedOneWithoutBooksInput = {
    create?: XOR<ClubCreateWithoutBooksInput, ClubUncheckedCreateWithoutBooksInput>
    connectOrCreate?: ClubCreateOrConnectWithoutBooksInput
    connect?: ClubWhereUniqueInput
  }

  export type ConversationCreateNestedManyWithoutClubBookInput = {
    create?: XOR<Enumerable<ConversationCreateWithoutClubBookInput>, Enumerable<ConversationUncheckedCreateWithoutClubBookInput>>
    connectOrCreate?: Enumerable<ConversationCreateOrConnectWithoutClubBookInput>
    createMany?: ConversationCreateManyClubBookInputEnvelope
    connect?: Enumerable<ConversationWhereUniqueInput>
  }

  export type MeetingCreateNestedManyWithoutClubBookInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutClubBookInput>, Enumerable<MeetingUncheckedCreateWithoutClubBookInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutClubBookInput>
    createMany?: MeetingCreateManyClubBookInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type ConversationUncheckedCreateNestedManyWithoutClubBookInput = {
    create?: XOR<Enumerable<ConversationCreateWithoutClubBookInput>, Enumerable<ConversationUncheckedCreateWithoutClubBookInput>>
    connectOrCreate?: Enumerable<ConversationCreateOrConnectWithoutClubBookInput>
    createMany?: ConversationCreateManyClubBookInputEnvelope
    connect?: Enumerable<ConversationWhereUniqueInput>
  }

  export type MeetingUncheckedCreateNestedManyWithoutClubBookInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutClubBookInput>, Enumerable<MeetingUncheckedCreateWithoutClubBookInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutClubBookInput>
    createMany?: MeetingCreateManyClubBookInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type BookUpdateOneRequiredWithoutClubsNestedInput = {
    create?: XOR<BookCreateWithoutClubsInput, BookUncheckedCreateWithoutClubsInput>
    connectOrCreate?: BookCreateOrConnectWithoutClubsInput
    upsert?: BookUpsertWithoutClubsInput
    connect?: BookWhereUniqueInput
    update?: XOR<BookUpdateWithoutClubsInput, BookUncheckedUpdateWithoutClubsInput>
  }

  export type ClubUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<ClubCreateWithoutBooksInput, ClubUncheckedCreateWithoutBooksInput>
    connectOrCreate?: ClubCreateOrConnectWithoutBooksInput
    upsert?: ClubUpsertWithoutBooksInput
    connect?: ClubWhereUniqueInput
    update?: XOR<ClubUpdateWithoutBooksInput, ClubUncheckedUpdateWithoutBooksInput>
  }

  export type EnumClubBookStatusFieldUpdateOperationsInput = {
    set?: ClubBookStatus
  }

  export type ConversationUpdateManyWithoutClubBookNestedInput = {
    create?: XOR<Enumerable<ConversationCreateWithoutClubBookInput>, Enumerable<ConversationUncheckedCreateWithoutClubBookInput>>
    connectOrCreate?: Enumerable<ConversationCreateOrConnectWithoutClubBookInput>
    upsert?: Enumerable<ConversationUpsertWithWhereUniqueWithoutClubBookInput>
    createMany?: ConversationCreateManyClubBookInputEnvelope
    set?: Enumerable<ConversationWhereUniqueInput>
    disconnect?: Enumerable<ConversationWhereUniqueInput>
    delete?: Enumerable<ConversationWhereUniqueInput>
    connect?: Enumerable<ConversationWhereUniqueInput>
    update?: Enumerable<ConversationUpdateWithWhereUniqueWithoutClubBookInput>
    updateMany?: Enumerable<ConversationUpdateManyWithWhereWithoutClubBookInput>
    deleteMany?: Enumerable<ConversationScalarWhereInput>
  }

  export type MeetingUpdateManyWithoutClubBookNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutClubBookInput>, Enumerable<MeetingUncheckedCreateWithoutClubBookInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutClubBookInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutClubBookInput>
    createMany?: MeetingCreateManyClubBookInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutClubBookInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutClubBookInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type ConversationUncheckedUpdateManyWithoutClubBookNestedInput = {
    create?: XOR<Enumerable<ConversationCreateWithoutClubBookInput>, Enumerable<ConversationUncheckedCreateWithoutClubBookInput>>
    connectOrCreate?: Enumerable<ConversationCreateOrConnectWithoutClubBookInput>
    upsert?: Enumerable<ConversationUpsertWithWhereUniqueWithoutClubBookInput>
    createMany?: ConversationCreateManyClubBookInputEnvelope
    set?: Enumerable<ConversationWhereUniqueInput>
    disconnect?: Enumerable<ConversationWhereUniqueInput>
    delete?: Enumerable<ConversationWhereUniqueInput>
    connect?: Enumerable<ConversationWhereUniqueInput>
    update?: Enumerable<ConversationUpdateWithWhereUniqueWithoutClubBookInput>
    updateMany?: Enumerable<ConversationUpdateManyWithWhereWithoutClubBookInput>
    deleteMany?: Enumerable<ConversationScalarWhereInput>
  }

  export type MeetingUncheckedUpdateManyWithoutClubBookNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutClubBookInput>, Enumerable<MeetingUncheckedCreateWithoutClubBookInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutClubBookInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutClubBookInput>
    createMany?: MeetingCreateManyClubBookInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutClubBookInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutClubBookInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type ClubCreateNestedOneWithoutMeetingsInput = {
    create?: XOR<ClubCreateWithoutMeetingsInput, ClubUncheckedCreateWithoutMeetingsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutMeetingsInput
    connect?: ClubWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutMeetingInput = {
    create?: XOR<ConversationCreateWithoutMeetingInput, ConversationUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMeetingInput
    connect?: ConversationWhereUniqueInput
  }

  export type ClubBookCreateNestedOneWithoutMeetingsInput = {
    create?: XOR<ClubBookCreateWithoutMeetingsInput, ClubBookUncheckedCreateWithoutMeetingsInput>
    connectOrCreate?: ClubBookCreateOrConnectWithoutMeetingsInput
    connect?: ClubBookWhereUniqueInput
  }

  export type ClubUpdateOneRequiredWithoutMeetingsNestedInput = {
    create?: XOR<ClubCreateWithoutMeetingsInput, ClubUncheckedCreateWithoutMeetingsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutMeetingsInput
    upsert?: ClubUpsertWithoutMeetingsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<ClubUpdateWithoutMeetingsInput, ClubUncheckedUpdateWithoutMeetingsInput>
  }

  export type ConversationUpdateOneRequiredWithoutMeetingNestedInput = {
    create?: XOR<ConversationCreateWithoutMeetingInput, ConversationUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMeetingInput
    upsert?: ConversationUpsertWithoutMeetingInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<ConversationUpdateWithoutMeetingInput, ConversationUncheckedUpdateWithoutMeetingInput>
  }

  export type ClubBookUpdateOneWithoutMeetingsNestedInput = {
    create?: XOR<ClubBookCreateWithoutMeetingsInput, ClubBookUncheckedCreateWithoutMeetingsInput>
    connectOrCreate?: ClubBookCreateOrConnectWithoutMeetingsInput
    upsert?: ClubBookUpsertWithoutMeetingsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClubBookWhereUniqueInput
    update?: XOR<ClubBookUpdateWithoutMeetingsInput, ClubBookUncheckedUpdateWithoutMeetingsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClubCreateNestedOneWithoutConversationsInput = {
    create?: XOR<ClubCreateWithoutConversationsInput, ClubUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutConversationsInput
    connect?: ClubWhereUniqueInput
  }

  export type ClubBookCreateNestedOneWithoutConversationsInput = {
    create?: XOR<ClubBookCreateWithoutConversationsInput, ClubBookUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: ClubBookCreateOrConnectWithoutConversationsInput
    connect?: ClubBookWhereUniqueInput
  }

  export type MeetingCreateNestedOneWithoutConversationInput = {
    create?: XOR<MeetingCreateWithoutConversationInput, MeetingUncheckedCreateWithoutConversationInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutConversationInput
    connect?: MeetingWhereUniqueInput
  }

  export type ResponseCreateNestedManyWithoutConversationInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutConversationInput>, Enumerable<ResponseUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutConversationInput>
    createMany?: ResponseCreateManyConversationInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type MeetingUncheckedCreateNestedOneWithoutConversationInput = {
    create?: XOR<MeetingCreateWithoutConversationInput, MeetingUncheckedCreateWithoutConversationInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutConversationInput
    connect?: MeetingWhereUniqueInput
  }

  export type ResponseUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutConversationInput>, Enumerable<ResponseUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutConversationInput>
    createMany?: ResponseCreateManyConversationInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type ClubUpdateOneRequiredWithoutConversationsNestedInput = {
    create?: XOR<ClubCreateWithoutConversationsInput, ClubUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutConversationsInput
    upsert?: ClubUpsertWithoutConversationsInput
    connect?: ClubWhereUniqueInput
    update?: XOR<ClubUpdateWithoutConversationsInput, ClubUncheckedUpdateWithoutConversationsInput>
  }

  export type ClubBookUpdateOneWithoutConversationsNestedInput = {
    create?: XOR<ClubBookCreateWithoutConversationsInput, ClubBookUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: ClubBookCreateOrConnectWithoutConversationsInput
    upsert?: ClubBookUpsertWithoutConversationsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClubBookWhereUniqueInput
    update?: XOR<ClubBookUpdateWithoutConversationsInput, ClubBookUncheckedUpdateWithoutConversationsInput>
  }

  export type MeetingUpdateOneWithoutConversationNestedInput = {
    create?: XOR<MeetingCreateWithoutConversationInput, MeetingUncheckedCreateWithoutConversationInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutConversationInput
    upsert?: MeetingUpsertWithoutConversationInput
    disconnect?: boolean
    delete?: boolean
    connect?: MeetingWhereUniqueInput
    update?: XOR<MeetingUpdateWithoutConversationInput, MeetingUncheckedUpdateWithoutConversationInput>
  }

  export type ResponseUpdateManyWithoutConversationNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutConversationInput>, Enumerable<ResponseUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutConversationInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutConversationInput>
    createMany?: ResponseCreateManyConversationInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutConversationInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutConversationInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type MeetingUncheckedUpdateOneWithoutConversationNestedInput = {
    create?: XOR<MeetingCreateWithoutConversationInput, MeetingUncheckedCreateWithoutConversationInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutConversationInput
    upsert?: MeetingUpsertWithoutConversationInput
    disconnect?: boolean
    delete?: boolean
    connect?: MeetingWhereUniqueInput
    update?: XOR<MeetingUpdateWithoutConversationInput, MeetingUncheckedUpdateWithoutConversationInput>
  }

  export type ResponseUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutConversationInput>, Enumerable<ResponseUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutConversationInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutConversationInput>
    createMany?: ResponseCreateManyConversationInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutConversationInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutConversationInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutResponsesInput = {
    create?: XOR<ConversationCreateWithoutResponsesInput, ConversationUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutResponsesInput
    connect?: ConversationWhereUniqueInput
  }

  export type ResponseCreateNestedOneWithoutRepliesInput = {
    create?: XOR<ResponseCreateWithoutRepliesInput, ResponseUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: ResponseCreateOrConnectWithoutRepliesInput
    connect?: ResponseWhereUniqueInput
  }

  export type ResponseCreateNestedManyWithoutReplyToInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutReplyToInput>, Enumerable<ResponseUncheckedCreateWithoutReplyToInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutReplyToInput>
    createMany?: ResponseCreateManyReplyToInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type ResponseUncheckedCreateNestedManyWithoutReplyToInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutReplyToInput>, Enumerable<ResponseUncheckedCreateWithoutReplyToInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutReplyToInput>
    createMany?: ResponseCreateManyReplyToInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type ConversationUpdateOneWithoutResponsesNestedInput = {
    create?: XOR<ConversationCreateWithoutResponsesInput, ConversationUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutResponsesInput
    upsert?: ConversationUpsertWithoutResponsesInput
    disconnect?: boolean
    delete?: boolean
    connect?: ConversationWhereUniqueInput
    update?: XOR<ConversationUpdateWithoutResponsesInput, ConversationUncheckedUpdateWithoutResponsesInput>
  }

  export type ResponseUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<ResponseCreateWithoutRepliesInput, ResponseUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: ResponseCreateOrConnectWithoutRepliesInput
    upsert?: ResponseUpsertWithoutRepliesInput
    disconnect?: boolean
    delete?: boolean
    connect?: ResponseWhereUniqueInput
    update?: XOR<ResponseUpdateWithoutRepliesInput, ResponseUncheckedUpdateWithoutRepliesInput>
  }

  export type ResponseUpdateManyWithoutReplyToNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutReplyToInput>, Enumerable<ResponseUncheckedCreateWithoutReplyToInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutReplyToInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutReplyToInput>
    createMany?: ResponseCreateManyReplyToInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutReplyToInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutReplyToInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type ResponseUncheckedUpdateManyWithoutReplyToNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutReplyToInput>, Enumerable<ResponseUncheckedCreateWithoutReplyToInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutReplyToInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutReplyToInput>
    createMany?: ResponseCreateManyReplyToInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutReplyToInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutReplyToInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type BookCreateNestedManyWithoutGenreInput = {
    create?: XOR<Enumerable<BookCreateWithoutGenreInput>, Enumerable<BookUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutGenreInput>
    connect?: Enumerable<BookWhereUniqueInput>
  }

  export type BookUncheckedCreateNestedManyWithoutGenreInput = {
    create?: XOR<Enumerable<BookCreateWithoutGenreInput>, Enumerable<BookUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutGenreInput>
    connect?: Enumerable<BookWhereUniqueInput>
  }

  export type BookUpdateManyWithoutGenreNestedInput = {
    create?: XOR<Enumerable<BookCreateWithoutGenreInput>, Enumerable<BookUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutGenreInput>
    upsert?: Enumerable<BookUpsertWithWhereUniqueWithoutGenreInput>
    set?: Enumerable<BookWhereUniqueInput>
    disconnect?: Enumerable<BookWhereUniqueInput>
    delete?: Enumerable<BookWhereUniqueInput>
    connect?: Enumerable<BookWhereUniqueInput>
    update?: Enumerable<BookUpdateWithWhereUniqueWithoutGenreInput>
    updateMany?: Enumerable<BookUpdateManyWithWhereWithoutGenreInput>
    deleteMany?: Enumerable<BookScalarWhereInput>
  }

  export type BookUncheckedUpdateManyWithoutGenreNestedInput = {
    create?: XOR<Enumerable<BookCreateWithoutGenreInput>, Enumerable<BookUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutGenreInput>
    upsert?: Enumerable<BookUpsertWithWhereUniqueWithoutGenreInput>
    set?: Enumerable<BookWhereUniqueInput>
    disconnect?: Enumerable<BookWhereUniqueInput>
    delete?: Enumerable<BookWhereUniqueInput>
    connect?: Enumerable<BookWhereUniqueInput>
    update?: Enumerable<BookUpdateWithWhereUniqueWithoutGenreInput>
    updateMany?: Enumerable<BookUpdateManyWithWhereWithoutGenreInput>
    deleteMany?: Enumerable<BookScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumClubBookStatusFilter = {
    equals?: ClubBookStatus
    in?: Enumerable<ClubBookStatus>
    notIn?: Enumerable<ClubBookStatus>
    not?: NestedEnumClubBookStatusFilter | ClubBookStatus
  }

  export type NestedEnumClubBookStatusWithAggregatesFilter = {
    equals?: ClubBookStatus
    in?: Enumerable<ClubBookStatus>
    notIn?: Enumerable<ClubBookStatus>
    not?: NestedEnumClubBookStatusWithAggregatesFilter | ClubBookStatus
    _count?: NestedIntFilter
    _min?: NestedEnumClubBookStatusFilter
    _max?: NestedEnumClubBookStatusFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type ClubCreateWithoutMembersInput = {
    id?: string
    clubName: string
    books?: ClubBookCreateNestedManyWithoutClubInput
    meetings?: MeetingCreateNestedManyWithoutClubInput
    conversations?: ConversationCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutMembersInput = {
    id?: string
    clubName: string
    books?: ClubBookUncheckedCreateNestedManyWithoutClubInput
    meetings?: MeetingUncheckedCreateNestedManyWithoutClubInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutMembersInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutMembersInput, ClubUncheckedCreateWithoutMembersInput>
  }

  export type UserBookCreateWithoutUserInput = {
    Book: BookCreateNestedOneWithoutEngagementInput
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type UserBookUncheckedCreateWithoutUserInput = {
    id?: number
    bookId: number
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type UserBookCreateOrConnectWithoutUserInput = {
    where: UserBookWhereUniqueInput
    create: XOR<UserBookCreateWithoutUserInput, UserBookUncheckedCreateWithoutUserInput>
  }

  export type UserBookCreateManyUserInputEnvelope = {
    data: Enumerable<UserBookCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ResponseCreateWithoutUserInput = {
    conversation?: ConversationCreateNestedOneWithoutResponsesInput
    replyTo?: ResponseCreateNestedOneWithoutRepliesInput
    replies?: ResponseCreateNestedManyWithoutReplyToInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUncheckedCreateWithoutUserInput = {
    id?: number
    conversationId?: number | null
    replyToId?: number | null
    replies?: ResponseUncheckedCreateNestedManyWithoutReplyToInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseCreateOrConnectWithoutUserInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutUserInput, ResponseUncheckedCreateWithoutUserInput>
  }

  export type ResponseCreateManyUserInputEnvelope = {
    data: Enumerable<ResponseCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserProfileCreateWithoutUserInput = {
    firstName?: string | null
    lastName?: string | null
    updatedOn?: Date | string
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    firstName?: string | null
    lastName?: string | null
    updatedOn?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type ClubUpsertWithWhereUniqueWithoutMembersInput = {
    where: ClubWhereUniqueInput
    update: XOR<ClubUpdateWithoutMembersInput, ClubUncheckedUpdateWithoutMembersInput>
    create: XOR<ClubCreateWithoutMembersInput, ClubUncheckedCreateWithoutMembersInput>
  }

  export type ClubUpdateWithWhereUniqueWithoutMembersInput = {
    where: ClubWhereUniqueInput
    data: XOR<ClubUpdateWithoutMembersInput, ClubUncheckedUpdateWithoutMembersInput>
  }

  export type ClubUpdateManyWithWhereWithoutMembersInput = {
    where: ClubScalarWhereInput
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyWithoutClubsInput>
  }

  export type ClubScalarWhereInput = {
    AND?: Enumerable<ClubScalarWhereInput>
    OR?: Enumerable<ClubScalarWhereInput>
    NOT?: Enumerable<ClubScalarWhereInput>
    id?: StringFilter | string
    clubName?: StringFilter | string
  }

  export type UserBookUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBookWhereUniqueInput
    update: XOR<UserBookUpdateWithoutUserInput, UserBookUncheckedUpdateWithoutUserInput>
    create: XOR<UserBookCreateWithoutUserInput, UserBookUncheckedCreateWithoutUserInput>
  }

  export type UserBookUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBookWhereUniqueInput
    data: XOR<UserBookUpdateWithoutUserInput, UserBookUncheckedUpdateWithoutUserInput>
  }

  export type UserBookUpdateManyWithWhereWithoutUserInput = {
    where: UserBookScalarWhereInput
    data: XOR<UserBookUpdateManyMutationInput, UserBookUncheckedUpdateManyWithoutBooksInput>
  }

  export type UserBookScalarWhereInput = {
    AND?: Enumerable<UserBookScalarWhereInput>
    OR?: Enumerable<UserBookScalarWhereInput>
    NOT?: Enumerable<UserBookScalarWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    userId?: StringFilter | string
    liked?: BoolFilter | boolean
    read?: BoolFilter | boolean
    inProgress?: BoolFilter | boolean
  }

  export type ResponseUpsertWithWhereUniqueWithoutUserInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutUserInput, ResponseUncheckedUpdateWithoutUserInput>
    create: XOR<ResponseCreateWithoutUserInput, ResponseUncheckedCreateWithoutUserInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutUserInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutUserInput, ResponseUncheckedUpdateWithoutUserInput>
  }

  export type ResponseUpdateManyWithWhereWithoutUserInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutCommentsInput>
  }

  export type ResponseScalarWhereInput = {
    AND?: Enumerable<ResponseScalarWhereInput>
    OR?: Enumerable<ResponseScalarWhereInput>
    NOT?: Enumerable<ResponseScalarWhereInput>
    id?: IntFilter | number
    userId?: StringFilter | string
    conversationId?: IntNullableFilter | number | null
    replyToId?: IntNullableFilter | number | null
    body?: StringFilter | string
    createdOn?: DateTimeFilter | Date | string
    editedOn?: DateTimeFilter | Date | string
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    username: string
    password: string
    clubs?: ClubCreateNestedManyWithoutMembersInput
    books?: UserBookCreateNestedManyWithoutUserInput
    comments?: ResponseCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    username: string
    password: string
    clubs?: ClubUncheckedCreateNestedManyWithoutMembersInput
    books?: UserBookUncheckedCreateNestedManyWithoutUserInput
    comments?: ResponseUncheckedCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clubs?: ClubUpdateManyWithoutMembersNestedInput
    books?: UserBookUpdateManyWithoutUserNestedInput
    comments?: ResponseUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clubs?: ClubUncheckedUpdateManyWithoutMembersNestedInput
    books?: UserBookUncheckedUpdateManyWithoutUserNestedInput
    comments?: ResponseUncheckedUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateWithoutAuthorInput = {
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    genre?: GenreCreateNestedManyWithoutBooksInput
    releaseDate?: Date | string | null
    engagement?: UserBookCreateNestedManyWithoutBookInput
    clubs?: ClubBookCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutAuthorInput = {
    id?: number
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    genre?: GenreUncheckedCreateNestedManyWithoutBooksInput
    releaseDate?: Date | string | null
    engagement?: UserBookUncheckedCreateNestedManyWithoutBookInput
    clubs?: ClubBookUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutAuthorInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutAuthorInput, BookUncheckedCreateWithoutAuthorInput>
  }

  export type BookCreateManyAuthorInputEnvelope = {
    data: Enumerable<BookCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type BookUpsertWithWhereUniqueWithoutAuthorInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutAuthorInput, BookUncheckedUpdateWithoutAuthorInput>
    create: XOR<BookCreateWithoutAuthorInput, BookUncheckedCreateWithoutAuthorInput>
  }

  export type BookUpdateWithWhereUniqueWithoutAuthorInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutAuthorInput, BookUncheckedUpdateWithoutAuthorInput>
  }

  export type BookUpdateManyWithWhereWithoutAuthorInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutBooksInput>
  }

  export type BookScalarWhereInput = {
    AND?: Enumerable<BookScalarWhereInput>
    OR?: Enumerable<BookScalarWhereInput>
    NOT?: Enumerable<BookScalarWhereInput>
    id?: IntFilter | number
    authorId?: IntFilter | number
    isbn?: StringNullableListFilter
    synopsys?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    releaseDate?: DateTimeNullableFilter | Date | string | null
  }

  export type AuthorCreateWithoutBooksInput = {
    firstName?: string | null
    lastName?: string | null
    bio?: string | null
    bipoc?: boolean
    lgbtq?: boolean
  }

  export type AuthorUncheckedCreateWithoutBooksInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    bio?: string | null
    bipoc?: boolean
    lgbtq?: boolean
  }

  export type AuthorCreateOrConnectWithoutBooksInput = {
    where: AuthorWhereUniqueInput
    create: XOR<AuthorCreateWithoutBooksInput, AuthorUncheckedCreateWithoutBooksInput>
  }

  export type GenreCreateWithoutBooksInput = {
    genre: string
  }

  export type GenreUncheckedCreateWithoutBooksInput = {
    genre: string
  }

  export type GenreCreateOrConnectWithoutBooksInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutBooksInput, GenreUncheckedCreateWithoutBooksInput>
  }

  export type UserBookCreateWithoutBookInput = {
    User: UserCreateNestedOneWithoutBooksInput
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type UserBookUncheckedCreateWithoutBookInput = {
    id?: number
    userId: string
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type UserBookCreateOrConnectWithoutBookInput = {
    where: UserBookWhereUniqueInput
    create: XOR<UserBookCreateWithoutBookInput, UserBookUncheckedCreateWithoutBookInput>
  }

  export type UserBookCreateManyBookInputEnvelope = {
    data: Enumerable<UserBookCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type ClubBookCreateWithoutBookInput = {
    Club: ClubCreateNestedOneWithoutBooksInput
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    conversations?: ConversationCreateNestedManyWithoutClubBookInput
    meetings?: MeetingCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookUncheckedCreateWithoutBookInput = {
    id?: number
    clubId: string
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    conversations?: ConversationUncheckedCreateNestedManyWithoutClubBookInput
    meetings?: MeetingUncheckedCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookCreateOrConnectWithoutBookInput = {
    where: ClubBookWhereUniqueInput
    create: XOR<ClubBookCreateWithoutBookInput, ClubBookUncheckedCreateWithoutBookInput>
  }

  export type ClubBookCreateManyBookInputEnvelope = {
    data: Enumerable<ClubBookCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type AuthorUpsertWithoutBooksInput = {
    update: XOR<AuthorUpdateWithoutBooksInput, AuthorUncheckedUpdateWithoutBooksInput>
    create: XOR<AuthorCreateWithoutBooksInput, AuthorUncheckedCreateWithoutBooksInput>
  }

  export type AuthorUpdateWithoutBooksInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    bipoc?: BoolFieldUpdateOperationsInput | boolean
    lgbtq?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AuthorUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    bipoc?: BoolFieldUpdateOperationsInput | boolean
    lgbtq?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GenreUpsertWithWhereUniqueWithoutBooksInput = {
    where: GenreWhereUniqueInput
    update: XOR<GenreUpdateWithoutBooksInput, GenreUncheckedUpdateWithoutBooksInput>
    create: XOR<GenreCreateWithoutBooksInput, GenreUncheckedCreateWithoutBooksInput>
  }

  export type GenreUpdateWithWhereUniqueWithoutBooksInput = {
    where: GenreWhereUniqueInput
    data: XOR<GenreUpdateWithoutBooksInput, GenreUncheckedUpdateWithoutBooksInput>
  }

  export type GenreUpdateManyWithWhereWithoutBooksInput = {
    where: GenreScalarWhereInput
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyWithoutGenreInput>
  }

  export type GenreScalarWhereInput = {
    AND?: Enumerable<GenreScalarWhereInput>
    OR?: Enumerable<GenreScalarWhereInput>
    NOT?: Enumerable<GenreScalarWhereInput>
    genre?: StringFilter | string
  }

  export type UserBookUpsertWithWhereUniqueWithoutBookInput = {
    where: UserBookWhereUniqueInput
    update: XOR<UserBookUpdateWithoutBookInput, UserBookUncheckedUpdateWithoutBookInput>
    create: XOR<UserBookCreateWithoutBookInput, UserBookUncheckedCreateWithoutBookInput>
  }

  export type UserBookUpdateWithWhereUniqueWithoutBookInput = {
    where: UserBookWhereUniqueInput
    data: XOR<UserBookUpdateWithoutBookInput, UserBookUncheckedUpdateWithoutBookInput>
  }

  export type UserBookUpdateManyWithWhereWithoutBookInput = {
    where: UserBookScalarWhereInput
    data: XOR<UserBookUpdateManyMutationInput, UserBookUncheckedUpdateManyWithoutEngagementInput>
  }

  export type ClubBookUpsertWithWhereUniqueWithoutBookInput = {
    where: ClubBookWhereUniqueInput
    update: XOR<ClubBookUpdateWithoutBookInput, ClubBookUncheckedUpdateWithoutBookInput>
    create: XOR<ClubBookCreateWithoutBookInput, ClubBookUncheckedCreateWithoutBookInput>
  }

  export type ClubBookUpdateWithWhereUniqueWithoutBookInput = {
    where: ClubBookWhereUniqueInput
    data: XOR<ClubBookUpdateWithoutBookInput, ClubBookUncheckedUpdateWithoutBookInput>
  }

  export type ClubBookUpdateManyWithWhereWithoutBookInput = {
    where: ClubBookScalarWhereInput
    data: XOR<ClubBookUpdateManyMutationInput, ClubBookUncheckedUpdateManyWithoutClubsInput>
  }

  export type ClubBookScalarWhereInput = {
    AND?: Enumerable<ClubBookScalarWhereInput>
    OR?: Enumerable<ClubBookScalarWhereInput>
    NOT?: Enumerable<ClubBookScalarWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    clubId?: StringFilter | string
    status?: EnumClubBookStatusFilter | ClubBookStatus
    upVotes?: IntFilter | number
    startedOn?: DateTimeFilter | Date | string
    completedOn?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutClubsInput = {
    id?: string
    email: string
    username: string
    password: string
    books?: UserBookCreateNestedManyWithoutUserInput
    comments?: ResponseCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClubsInput = {
    id?: string
    email: string
    username: string
    password: string
    books?: UserBookUncheckedCreateNestedManyWithoutUserInput
    comments?: ResponseUncheckedCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClubsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClubsInput, UserUncheckedCreateWithoutClubsInput>
  }

  export type ClubBookCreateWithoutClubInput = {
    Book: BookCreateNestedOneWithoutClubsInput
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    conversations?: ConversationCreateNestedManyWithoutClubBookInput
    meetings?: MeetingCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookUncheckedCreateWithoutClubInput = {
    id?: number
    bookId: number
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    conversations?: ConversationUncheckedCreateNestedManyWithoutClubBookInput
    meetings?: MeetingUncheckedCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookCreateOrConnectWithoutClubInput = {
    where: ClubBookWhereUniqueInput
    create: XOR<ClubBookCreateWithoutClubInput, ClubBookUncheckedCreateWithoutClubInput>
  }

  export type ClubBookCreateManyClubInputEnvelope = {
    data: Enumerable<ClubBookCreateManyClubInput>
    skipDuplicates?: boolean
  }

  export type MeetingCreateWithoutClubInput = {
    title: string
    conversation: ConversationCreateNestedOneWithoutMeetingInput
    clubBook?: ClubBookCreateNestedOneWithoutMeetingsInput
    time: Date | string
    location: string
  }

  export type MeetingUncheckedCreateWithoutClubInput = {
    id?: number
    title: string
    conversationId: number
    bookId?: number | null
    time: Date | string
    location: string
  }

  export type MeetingCreateOrConnectWithoutClubInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutClubInput, MeetingUncheckedCreateWithoutClubInput>
  }

  export type MeetingCreateManyClubInputEnvelope = {
    data: Enumerable<MeetingCreateManyClubInput>
    skipDuplicates?: boolean
  }

  export type ConversationCreateWithoutClubInput = {
    private: boolean
    clubBook?: ClubBookCreateNestedOneWithoutConversationsInput
    meeting?: MeetingCreateNestedOneWithoutConversationInput
    title: string
    body: string
    responses?: ResponseCreateNestedManyWithoutConversationInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationUncheckedCreateWithoutClubInput = {
    id?: number
    private: boolean
    bookId?: number | null
    meeting?: MeetingUncheckedCreateNestedOneWithoutConversationInput
    title: string
    body: string
    responses?: ResponseUncheckedCreateNestedManyWithoutConversationInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationCreateOrConnectWithoutClubInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutClubInput, ConversationUncheckedCreateWithoutClubInput>
  }

  export type ConversationCreateManyClubInputEnvelope = {
    data: Enumerable<ConversationCreateManyClubInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutClubsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutClubsInput, UserUncheckedUpdateWithoutClubsInput>
    create: XOR<UserCreateWithoutClubsInput, UserUncheckedCreateWithoutClubsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutClubsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutClubsInput, UserUncheckedUpdateWithoutClubsInput>
  }

  export type UserUpdateManyWithWhereWithoutClubsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMembersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    createdOn?: DateTimeFilter | Date | string
    updatedOn?: DateTimeFilter | Date | string
  }

  export type ClubBookUpsertWithWhereUniqueWithoutClubInput = {
    where: ClubBookWhereUniqueInput
    update: XOR<ClubBookUpdateWithoutClubInput, ClubBookUncheckedUpdateWithoutClubInput>
    create: XOR<ClubBookCreateWithoutClubInput, ClubBookUncheckedCreateWithoutClubInput>
  }

  export type ClubBookUpdateWithWhereUniqueWithoutClubInput = {
    where: ClubBookWhereUniqueInput
    data: XOR<ClubBookUpdateWithoutClubInput, ClubBookUncheckedUpdateWithoutClubInput>
  }

  export type ClubBookUpdateManyWithWhereWithoutClubInput = {
    where: ClubBookScalarWhereInput
    data: XOR<ClubBookUpdateManyMutationInput, ClubBookUncheckedUpdateManyWithoutBooksInput>
  }

  export type MeetingUpsertWithWhereUniqueWithoutClubInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutClubInput, MeetingUncheckedUpdateWithoutClubInput>
    create: XOR<MeetingCreateWithoutClubInput, MeetingUncheckedCreateWithoutClubInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutClubInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutClubInput, MeetingUncheckedUpdateWithoutClubInput>
  }

  export type MeetingUpdateManyWithWhereWithoutClubInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutMeetingsInput>
  }

  export type MeetingScalarWhereInput = {
    AND?: Enumerable<MeetingScalarWhereInput>
    OR?: Enumerable<MeetingScalarWhereInput>
    NOT?: Enumerable<MeetingScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    clubId?: StringFilter | string
    conversationId?: IntFilter | number
    bookId?: IntNullableFilter | number | null
    time?: DateTimeFilter | Date | string
    location?: StringFilter | string
  }

  export type ConversationUpsertWithWhereUniqueWithoutClubInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutClubInput, ConversationUncheckedUpdateWithoutClubInput>
    create: XOR<ConversationCreateWithoutClubInput, ConversationUncheckedCreateWithoutClubInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutClubInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutClubInput, ConversationUncheckedUpdateWithoutClubInput>
  }

  export type ConversationUpdateManyWithWhereWithoutClubInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutConversationsInput>
  }

  export type ConversationScalarWhereInput = {
    AND?: Enumerable<ConversationScalarWhereInput>
    OR?: Enumerable<ConversationScalarWhereInput>
    NOT?: Enumerable<ConversationScalarWhereInput>
    id?: IntFilter | number
    clubId?: StringFilter | string
    private?: BoolFilter | boolean
    bookId?: IntNullableFilter | number | null
    title?: StringFilter | string
    body?: StringFilter | string
    createdOn?: DateTimeFilter | Date | string
    updatedOn?: DateTimeFilter | Date | string
  }

  export type BookCreateWithoutEngagementInput = {
    Author: AuthorCreateNestedOneWithoutBooksInput
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    genre?: GenreCreateNestedManyWithoutBooksInput
    releaseDate?: Date | string | null
    clubs?: ClubBookCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutEngagementInput = {
    id?: number
    authorId: number
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    genre?: GenreUncheckedCreateNestedManyWithoutBooksInput
    releaseDate?: Date | string | null
    clubs?: ClubBookUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutEngagementInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutEngagementInput, BookUncheckedCreateWithoutEngagementInput>
  }

  export type UserCreateWithoutBooksInput = {
    id?: string
    email: string
    username: string
    password: string
    clubs?: ClubCreateNestedManyWithoutMembersInput
    comments?: ResponseCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBooksInput = {
    id?: string
    email: string
    username: string
    password: string
    clubs?: ClubUncheckedCreateNestedManyWithoutMembersInput
    comments?: ResponseUncheckedCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBooksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBooksInput, UserUncheckedCreateWithoutBooksInput>
  }

  export type BookUpsertWithoutEngagementInput = {
    update: XOR<BookUpdateWithoutEngagementInput, BookUncheckedUpdateWithoutEngagementInput>
    create: XOR<BookCreateWithoutEngagementInput, BookUncheckedCreateWithoutEngagementInput>
  }

  export type BookUpdateWithoutEngagementInput = {
    Author?: AuthorUpdateOneRequiredWithoutBooksNestedInput
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: GenreUpdateManyWithoutBooksNestedInput
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clubs?: ClubBookUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutEngagementInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: GenreUncheckedUpdateManyWithoutBooksNestedInput
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clubs?: ClubBookUncheckedUpdateManyWithoutBookNestedInput
  }

  export type UserUpsertWithoutBooksInput = {
    update: XOR<UserUpdateWithoutBooksInput, UserUncheckedUpdateWithoutBooksInput>
    create: XOR<UserCreateWithoutBooksInput, UserUncheckedCreateWithoutBooksInput>
  }

  export type UserUpdateWithoutBooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clubs?: ClubUpdateManyWithoutMembersNestedInput
    comments?: ResponseUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clubs?: ClubUncheckedUpdateManyWithoutMembersNestedInput
    comments?: ResponseUncheckedUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type BookCreateWithoutClubsInput = {
    Author: AuthorCreateNestedOneWithoutBooksInput
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    genre?: GenreCreateNestedManyWithoutBooksInput
    releaseDate?: Date | string | null
    engagement?: UserBookCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutClubsInput = {
    id?: number
    authorId: number
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    genre?: GenreUncheckedCreateNestedManyWithoutBooksInput
    releaseDate?: Date | string | null
    engagement?: UserBookUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutClubsInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutClubsInput, BookUncheckedCreateWithoutClubsInput>
  }

  export type ClubCreateWithoutBooksInput = {
    id?: string
    clubName: string
    members?: UserCreateNestedManyWithoutClubsInput
    meetings?: MeetingCreateNestedManyWithoutClubInput
    conversations?: ConversationCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutBooksInput = {
    id?: string
    clubName: string
    members?: UserUncheckedCreateNestedManyWithoutClubsInput
    meetings?: MeetingUncheckedCreateNestedManyWithoutClubInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutBooksInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutBooksInput, ClubUncheckedCreateWithoutBooksInput>
  }

  export type ConversationCreateWithoutClubBookInput = {
    club: ClubCreateNestedOneWithoutConversationsInput
    private: boolean
    meeting?: MeetingCreateNestedOneWithoutConversationInput
    title: string
    body: string
    responses?: ResponseCreateNestedManyWithoutConversationInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationUncheckedCreateWithoutClubBookInput = {
    id?: number
    clubId: string
    private: boolean
    meeting?: MeetingUncheckedCreateNestedOneWithoutConversationInput
    title: string
    body: string
    responses?: ResponseUncheckedCreateNestedManyWithoutConversationInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationCreateOrConnectWithoutClubBookInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutClubBookInput, ConversationUncheckedCreateWithoutClubBookInput>
  }

  export type ConversationCreateManyClubBookInputEnvelope = {
    data: Enumerable<ConversationCreateManyClubBookInput>
    skipDuplicates?: boolean
  }

  export type MeetingCreateWithoutClubBookInput = {
    title: string
    club: ClubCreateNestedOneWithoutMeetingsInput
    conversation: ConversationCreateNestedOneWithoutMeetingInput
    time: Date | string
    location: string
  }

  export type MeetingUncheckedCreateWithoutClubBookInput = {
    id?: number
    title: string
    clubId: string
    conversationId: number
    time: Date | string
    location: string
  }

  export type MeetingCreateOrConnectWithoutClubBookInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutClubBookInput, MeetingUncheckedCreateWithoutClubBookInput>
  }

  export type MeetingCreateManyClubBookInputEnvelope = {
    data: Enumerable<MeetingCreateManyClubBookInput>
    skipDuplicates?: boolean
  }

  export type BookUpsertWithoutClubsInput = {
    update: XOR<BookUpdateWithoutClubsInput, BookUncheckedUpdateWithoutClubsInput>
    create: XOR<BookCreateWithoutClubsInput, BookUncheckedCreateWithoutClubsInput>
  }

  export type BookUpdateWithoutClubsInput = {
    Author?: AuthorUpdateOneRequiredWithoutBooksNestedInput
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: GenreUpdateManyWithoutBooksNestedInput
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    engagement?: UserBookUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutClubsInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: GenreUncheckedUpdateManyWithoutBooksNestedInput
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    engagement?: UserBookUncheckedUpdateManyWithoutBookNestedInput
  }

  export type ClubUpsertWithoutBooksInput = {
    update: XOR<ClubUpdateWithoutBooksInput, ClubUncheckedUpdateWithoutBooksInput>
    create: XOR<ClubCreateWithoutBooksInput, ClubUncheckedCreateWithoutBooksInput>
  }

  export type ClubUpdateWithoutBooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    members?: UserUpdateManyWithoutClubsNestedInput
    meetings?: MeetingUpdateManyWithoutClubNestedInput
    conversations?: ConversationUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutBooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    members?: UserUncheckedUpdateManyWithoutClubsNestedInput
    meetings?: MeetingUncheckedUpdateManyWithoutClubNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ConversationUpsertWithWhereUniqueWithoutClubBookInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutClubBookInput, ConversationUncheckedUpdateWithoutClubBookInput>
    create: XOR<ConversationCreateWithoutClubBookInput, ConversationUncheckedCreateWithoutClubBookInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutClubBookInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutClubBookInput, ConversationUncheckedUpdateWithoutClubBookInput>
  }

  export type ConversationUpdateManyWithWhereWithoutClubBookInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutConversationsInput>
  }

  export type MeetingUpsertWithWhereUniqueWithoutClubBookInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutClubBookInput, MeetingUncheckedUpdateWithoutClubBookInput>
    create: XOR<MeetingCreateWithoutClubBookInput, MeetingUncheckedCreateWithoutClubBookInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutClubBookInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutClubBookInput, MeetingUncheckedUpdateWithoutClubBookInput>
  }

  export type MeetingUpdateManyWithWhereWithoutClubBookInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutMeetingsInput>
  }

  export type ClubCreateWithoutMeetingsInput = {
    id?: string
    clubName: string
    members?: UserCreateNestedManyWithoutClubsInput
    books?: ClubBookCreateNestedManyWithoutClubInput
    conversations?: ConversationCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutMeetingsInput = {
    id?: string
    clubName: string
    members?: UserUncheckedCreateNestedManyWithoutClubsInput
    books?: ClubBookUncheckedCreateNestedManyWithoutClubInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutMeetingsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutMeetingsInput, ClubUncheckedCreateWithoutMeetingsInput>
  }

  export type ConversationCreateWithoutMeetingInput = {
    club: ClubCreateNestedOneWithoutConversationsInput
    private: boolean
    clubBook?: ClubBookCreateNestedOneWithoutConversationsInput
    title: string
    body: string
    responses?: ResponseCreateNestedManyWithoutConversationInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationUncheckedCreateWithoutMeetingInput = {
    id?: number
    clubId: string
    private: boolean
    bookId?: number | null
    title: string
    body: string
    responses?: ResponseUncheckedCreateNestedManyWithoutConversationInput
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationCreateOrConnectWithoutMeetingInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMeetingInput, ConversationUncheckedCreateWithoutMeetingInput>
  }

  export type ClubBookCreateWithoutMeetingsInput = {
    Book: BookCreateNestedOneWithoutClubsInput
    Club: ClubCreateNestedOneWithoutBooksInput
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    conversations?: ConversationCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookUncheckedCreateWithoutMeetingsInput = {
    id?: number
    bookId: number
    clubId: string
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    conversations?: ConversationUncheckedCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookCreateOrConnectWithoutMeetingsInput = {
    where: ClubBookWhereUniqueInput
    create: XOR<ClubBookCreateWithoutMeetingsInput, ClubBookUncheckedCreateWithoutMeetingsInput>
  }

  export type ClubUpsertWithoutMeetingsInput = {
    update: XOR<ClubUpdateWithoutMeetingsInput, ClubUncheckedUpdateWithoutMeetingsInput>
    create: XOR<ClubCreateWithoutMeetingsInput, ClubUncheckedCreateWithoutMeetingsInput>
  }

  export type ClubUpdateWithoutMeetingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    members?: UserUpdateManyWithoutClubsNestedInput
    books?: ClubBookUpdateManyWithoutClubNestedInput
    conversations?: ConversationUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutMeetingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    members?: UserUncheckedUpdateManyWithoutClubsNestedInput
    books?: ClubBookUncheckedUpdateManyWithoutClubNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ConversationUpsertWithoutMeetingInput = {
    update: XOR<ConversationUpdateWithoutMeetingInput, ConversationUncheckedUpdateWithoutMeetingInput>
    create: XOR<ConversationCreateWithoutMeetingInput, ConversationUncheckedCreateWithoutMeetingInput>
  }

  export type ConversationUpdateWithoutMeetingInput = {
    club?: ClubUpdateOneRequiredWithoutConversationsNestedInput
    private?: BoolFieldUpdateOperationsInput | boolean
    clubBook?: ClubBookUpdateOneWithoutConversationsNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUpdateManyWithoutConversationNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateWithoutMeetingInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUncheckedUpdateManyWithoutConversationNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubBookUpsertWithoutMeetingsInput = {
    update: XOR<ClubBookUpdateWithoutMeetingsInput, ClubBookUncheckedUpdateWithoutMeetingsInput>
    create: XOR<ClubBookCreateWithoutMeetingsInput, ClubBookUncheckedCreateWithoutMeetingsInput>
  }

  export type ClubBookUpdateWithoutMeetingsInput = {
    Book?: BookUpdateOneRequiredWithoutClubsNestedInput
    Club?: ClubUpdateOneRequiredWithoutBooksNestedInput
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUpdateManyWithoutClubBookNestedInput
  }

  export type ClubBookUncheckedUpdateWithoutMeetingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUncheckedUpdateManyWithoutClubBookNestedInput
  }

  export type ClubCreateWithoutConversationsInput = {
    id?: string
    clubName: string
    members?: UserCreateNestedManyWithoutClubsInput
    books?: ClubBookCreateNestedManyWithoutClubInput
    meetings?: MeetingCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutConversationsInput = {
    id?: string
    clubName: string
    members?: UserUncheckedCreateNestedManyWithoutClubsInput
    books?: ClubBookUncheckedCreateNestedManyWithoutClubInput
    meetings?: MeetingUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutConversationsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutConversationsInput, ClubUncheckedCreateWithoutConversationsInput>
  }

  export type ClubBookCreateWithoutConversationsInput = {
    Book: BookCreateNestedOneWithoutClubsInput
    Club: ClubCreateNestedOneWithoutBooksInput
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    meetings?: MeetingCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookUncheckedCreateWithoutConversationsInput = {
    id?: number
    bookId: number
    clubId: string
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
    meetings?: MeetingUncheckedCreateNestedManyWithoutClubBookInput
  }

  export type ClubBookCreateOrConnectWithoutConversationsInput = {
    where: ClubBookWhereUniqueInput
    create: XOR<ClubBookCreateWithoutConversationsInput, ClubBookUncheckedCreateWithoutConversationsInput>
  }

  export type MeetingCreateWithoutConversationInput = {
    title: string
    club: ClubCreateNestedOneWithoutMeetingsInput
    clubBook?: ClubBookCreateNestedOneWithoutMeetingsInput
    time: Date | string
    location: string
  }

  export type MeetingUncheckedCreateWithoutConversationInput = {
    id?: number
    title: string
    clubId: string
    bookId?: number | null
    time: Date | string
    location: string
  }

  export type MeetingCreateOrConnectWithoutConversationInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutConversationInput, MeetingUncheckedCreateWithoutConversationInput>
  }

  export type ResponseCreateWithoutConversationInput = {
    user: UserCreateNestedOneWithoutCommentsInput
    replyTo?: ResponseCreateNestedOneWithoutRepliesInput
    replies?: ResponseCreateNestedManyWithoutReplyToInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUncheckedCreateWithoutConversationInput = {
    id?: number
    userId: string
    replyToId?: number | null
    replies?: ResponseUncheckedCreateNestedManyWithoutReplyToInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseCreateOrConnectWithoutConversationInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutConversationInput, ResponseUncheckedCreateWithoutConversationInput>
  }

  export type ResponseCreateManyConversationInputEnvelope = {
    data: Enumerable<ResponseCreateManyConversationInput>
    skipDuplicates?: boolean
  }

  export type ClubUpsertWithoutConversationsInput = {
    update: XOR<ClubUpdateWithoutConversationsInput, ClubUncheckedUpdateWithoutConversationsInput>
    create: XOR<ClubCreateWithoutConversationsInput, ClubUncheckedCreateWithoutConversationsInput>
  }

  export type ClubUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    members?: UserUpdateManyWithoutClubsNestedInput
    books?: ClubBookUpdateManyWithoutClubNestedInput
    meetings?: MeetingUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    members?: UserUncheckedUpdateManyWithoutClubsNestedInput
    books?: ClubBookUncheckedUpdateManyWithoutClubNestedInput
    meetings?: MeetingUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubBookUpsertWithoutConversationsInput = {
    update: XOR<ClubBookUpdateWithoutConversationsInput, ClubBookUncheckedUpdateWithoutConversationsInput>
    create: XOR<ClubBookCreateWithoutConversationsInput, ClubBookUncheckedCreateWithoutConversationsInput>
  }

  export type ClubBookUpdateWithoutConversationsInput = {
    Book?: BookUpdateOneRequiredWithoutClubsNestedInput
    Club?: ClubUpdateOneRequiredWithoutBooksNestedInput
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    meetings?: MeetingUpdateManyWithoutClubBookNestedInput
  }

  export type ClubBookUncheckedUpdateWithoutConversationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    meetings?: MeetingUncheckedUpdateManyWithoutClubBookNestedInput
  }

  export type MeetingUpsertWithoutConversationInput = {
    update: XOR<MeetingUpdateWithoutConversationInput, MeetingUncheckedUpdateWithoutConversationInput>
    create: XOR<MeetingCreateWithoutConversationInput, MeetingUncheckedCreateWithoutConversationInput>
  }

  export type MeetingUpdateWithoutConversationInput = {
    title?: StringFieldUpdateOperationsInput | string
    club?: ClubUpdateOneRequiredWithoutMeetingsNestedInput
    clubBook?: ClubBookUpdateOneWithoutMeetingsNestedInput
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type MeetingUncheckedUpdateWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseUpsertWithWhereUniqueWithoutConversationInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutConversationInput, ResponseUncheckedUpdateWithoutConversationInput>
    create: XOR<ResponseCreateWithoutConversationInput, ResponseUncheckedCreateWithoutConversationInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutConversationInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutConversationInput, ResponseUncheckedUpdateWithoutConversationInput>
  }

  export type ResponseUpdateManyWithWhereWithoutConversationInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutResponsesInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    username: string
    password: string
    clubs?: ClubCreateNestedManyWithoutMembersInput
    books?: UserBookCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    username: string
    password: string
    clubs?: ClubUncheckedCreateNestedManyWithoutMembersInput
    books?: UserBookUncheckedCreateNestedManyWithoutUserInput
    createdOn?: Date | string
    updatedOn?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type ConversationCreateWithoutResponsesInput = {
    club: ClubCreateNestedOneWithoutConversationsInput
    private: boolean
    clubBook?: ClubBookCreateNestedOneWithoutConversationsInput
    meeting?: MeetingCreateNestedOneWithoutConversationInput
    title: string
    body: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationUncheckedCreateWithoutResponsesInput = {
    id?: number
    clubId: string
    private: boolean
    bookId?: number | null
    meeting?: MeetingUncheckedCreateNestedOneWithoutConversationInput
    title: string
    body: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type ConversationCreateOrConnectWithoutResponsesInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutResponsesInput, ConversationUncheckedCreateWithoutResponsesInput>
  }

  export type ResponseCreateWithoutRepliesInput = {
    user: UserCreateNestedOneWithoutCommentsInput
    conversation?: ConversationCreateNestedOneWithoutResponsesInput
    replyTo?: ResponseCreateNestedOneWithoutRepliesInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUncheckedCreateWithoutRepliesInput = {
    id?: number
    userId: string
    conversationId?: number | null
    replyToId?: number | null
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseCreateOrConnectWithoutRepliesInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutRepliesInput, ResponseUncheckedCreateWithoutRepliesInput>
  }

  export type ResponseCreateWithoutReplyToInput = {
    user: UserCreateNestedOneWithoutCommentsInput
    conversation?: ConversationCreateNestedOneWithoutResponsesInput
    replies?: ResponseCreateNestedManyWithoutReplyToInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUncheckedCreateWithoutReplyToInput = {
    id?: number
    userId: string
    conversationId?: number | null
    replies?: ResponseUncheckedCreateNestedManyWithoutReplyToInput
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseCreateOrConnectWithoutReplyToInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutReplyToInput, ResponseUncheckedCreateWithoutReplyToInput>
  }

  export type ResponseCreateManyReplyToInputEnvelope = {
    data: Enumerable<ResponseCreateManyReplyToInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clubs?: ClubUpdateManyWithoutMembersNestedInput
    books?: UserBookUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clubs?: ClubUncheckedUpdateManyWithoutMembersNestedInput
    books?: UserBookUncheckedUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ConversationUpsertWithoutResponsesInput = {
    update: XOR<ConversationUpdateWithoutResponsesInput, ConversationUncheckedUpdateWithoutResponsesInput>
    create: XOR<ConversationCreateWithoutResponsesInput, ConversationUncheckedCreateWithoutResponsesInput>
  }

  export type ConversationUpdateWithoutResponsesInput = {
    club?: ClubUpdateOneRequiredWithoutConversationsNestedInput
    private?: BoolFieldUpdateOperationsInput | boolean
    clubBook?: ClubBookUpdateOneWithoutConversationsNestedInput
    meeting?: MeetingUpdateOneWithoutConversationNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateWithoutResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    meeting?: MeetingUncheckedUpdateOneWithoutConversationNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUpsertWithoutRepliesInput = {
    update: XOR<ResponseUpdateWithoutRepliesInput, ResponseUncheckedUpdateWithoutRepliesInput>
    create: XOR<ResponseCreateWithoutRepliesInput, ResponseUncheckedCreateWithoutRepliesInput>
  }

  export type ResponseUpdateWithoutRepliesInput = {
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    conversation?: ConversationUpdateOneWithoutResponsesNestedInput
    replyTo?: ResponseUpdateOneWithoutRepliesNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateWithoutRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    replyToId?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUpsertWithWhereUniqueWithoutReplyToInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutReplyToInput, ResponseUncheckedUpdateWithoutReplyToInput>
    create: XOR<ResponseCreateWithoutReplyToInput, ResponseUncheckedCreateWithoutReplyToInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutReplyToInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutReplyToInput, ResponseUncheckedUpdateWithoutReplyToInput>
  }

  export type ResponseUpdateManyWithWhereWithoutReplyToInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutRepliesInput>
  }

  export type BookCreateWithoutGenreInput = {
    Author: AuthorCreateNestedOneWithoutBooksInput
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    releaseDate?: Date | string | null
    engagement?: UserBookCreateNestedManyWithoutBookInput
    clubs?: ClubBookCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutGenreInput = {
    id?: number
    authorId: number
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    releaseDate?: Date | string | null
    engagement?: UserBookUncheckedCreateNestedManyWithoutBookInput
    clubs?: ClubBookUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutGenreInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutGenreInput, BookUncheckedCreateWithoutGenreInput>
  }

  export type BookUpsertWithWhereUniqueWithoutGenreInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutGenreInput, BookUncheckedUpdateWithoutGenreInput>
    create: XOR<BookCreateWithoutGenreInput, BookUncheckedCreateWithoutGenreInput>
  }

  export type BookUpdateWithWhereUniqueWithoutGenreInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutGenreInput, BookUncheckedUpdateWithoutGenreInput>
  }

  export type BookUpdateManyWithWhereWithoutGenreInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutBooksInput>
  }

  export type UserBookCreateManyUserInput = {
    id?: number
    bookId: number
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type ResponseCreateManyUserInput = {
    id?: number
    conversationId?: number | null
    replyToId?: number | null
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ClubUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    books?: ClubBookUpdateManyWithoutClubNestedInput
    meetings?: MeetingUpdateManyWithoutClubNestedInput
    conversations?: ConversationUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    books?: ClubBookUncheckedUpdateManyWithoutClubNestedInput
    meetings?: MeetingUncheckedUpdateManyWithoutClubNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateManyWithoutClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
  }

  export type UserBookUpdateWithoutUserInput = {
    Book?: BookUpdateOneRequiredWithoutEngagementNestedInput
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBookUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBookUncheckedUpdateManyWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResponseUpdateWithoutUserInput = {
    conversation?: ConversationUpdateOneWithoutResponsesNestedInput
    replyTo?: ResponseUpdateOneWithoutRepliesNestedInput
    replies?: ResponseUpdateManyWithoutReplyToNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    replyToId?: NullableIntFieldUpdateOperationsInput | number | null
    replies?: ResponseUncheckedUpdateManyWithoutReplyToNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    replyToId?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateManyAuthorInput = {
    id?: number
    isbn?: BookCreateisbnInput | Enumerable<string>
    synopsys: string
    imageUrl?: string | null
    releaseDate?: Date | string | null
  }

  export type BookUpdateWithoutAuthorInput = {
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: GenreUpdateManyWithoutBooksNestedInput
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    engagement?: UserBookUpdateManyWithoutBookNestedInput
    clubs?: ClubBookUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: GenreUncheckedUpdateManyWithoutBooksNestedInput
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    engagement?: UserBookUncheckedUpdateManyWithoutBookNestedInput
    clubs?: ClubBookUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateManyWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserBookCreateManyBookInput = {
    id?: number
    userId: string
    liked?: boolean
    read?: boolean
    inProgress?: boolean
  }

  export type ClubBookCreateManyBookInput = {
    id?: number
    clubId: string
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
  }

  export type GenreUpdateWithoutBooksInput = {
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateWithoutBooksInput = {
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateManyWithoutGenreInput = {
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type UserBookUpdateWithoutBookInput = {
    User?: UserUpdateOneRequiredWithoutBooksNestedInput
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBookUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBookUncheckedUpdateManyWithoutEngagementInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    read?: BoolFieldUpdateOperationsInput | boolean
    inProgress?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClubBookUpdateWithoutBookInput = {
    Club?: ClubUpdateOneRequiredWithoutBooksNestedInput
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUpdateManyWithoutClubBookNestedInput
    meetings?: MeetingUpdateManyWithoutClubBookNestedInput
  }

  export type ClubBookUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUncheckedUpdateManyWithoutClubBookNestedInput
    meetings?: MeetingUncheckedUpdateManyWithoutClubBookNestedInput
  }

  export type ClubBookUncheckedUpdateManyWithoutClubsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubBookCreateManyClubInput = {
    id?: number
    bookId: number
    status: ClubBookStatus
    upVotes: number
    startedOn: Date | string
    completedOn: Date | string
  }

  export type MeetingCreateManyClubInput = {
    id?: number
    title: string
    conversationId: number
    bookId?: number | null
    time: Date | string
    location: string
  }

  export type ConversationCreateManyClubInput = {
    id?: number
    private: boolean
    bookId?: number | null
    title: string
    body: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type UserUpdateWithoutClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    books?: UserBookUpdateManyWithoutUserNestedInput
    comments?: ResponseUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    books?: UserBookUncheckedUpdateManyWithoutUserNestedInput
    comments?: ResponseUncheckedUpdateManyWithoutUserNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubBookUpdateWithoutClubInput = {
    Book?: BookUpdateOneRequiredWithoutClubsNestedInput
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUpdateManyWithoutClubBookNestedInput
    meetings?: MeetingUpdateManyWithoutClubBookNestedInput
  }

  export type ClubBookUncheckedUpdateWithoutClubInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: ConversationUncheckedUpdateManyWithoutClubBookNestedInput
    meetings?: MeetingUncheckedUpdateManyWithoutClubBookNestedInput
  }

  export type ClubBookUncheckedUpdateManyWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    status?: EnumClubBookStatusFieldUpdateOperationsInput | ClubBookStatus
    upVotes?: IntFieldUpdateOperationsInput | number
    startedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    completedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUpdateWithoutClubInput = {
    title?: StringFieldUpdateOperationsInput | string
    conversation?: ConversationUpdateOneRequiredWithoutMeetingNestedInput
    clubBook?: ClubBookUpdateOneWithoutMeetingsNestedInput
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type MeetingUncheckedUpdateWithoutClubInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    conversationId?: IntFieldUpdateOperationsInput | number
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type MeetingUncheckedUpdateManyWithoutMeetingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    conversationId?: IntFieldUpdateOperationsInput | number
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ConversationUpdateWithoutClubInput = {
    private?: BoolFieldUpdateOperationsInput | boolean
    clubBook?: ClubBookUpdateOneWithoutConversationsNestedInput
    meeting?: MeetingUpdateOneWithoutConversationNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUpdateManyWithoutConversationNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateWithoutClubInput = {
    id?: IntFieldUpdateOperationsInput | number
    private?: BoolFieldUpdateOperationsInput | boolean
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    meeting?: MeetingUncheckedUpdateOneWithoutConversationNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUncheckedUpdateManyWithoutConversationNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateManyWithoutConversationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    private?: BoolFieldUpdateOperationsInput | boolean
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationCreateManyClubBookInput = {
    id?: number
    clubId: string
    private: boolean
    title: string
    body: string
    createdOn?: Date | string
    updatedOn?: Date | string
  }

  export type MeetingCreateManyClubBookInput = {
    id?: number
    title: string
    clubId: string
    conversationId: number
    time: Date | string
    location: string
  }

  export type ConversationUpdateWithoutClubBookInput = {
    club?: ClubUpdateOneRequiredWithoutConversationsNestedInput
    private?: BoolFieldUpdateOperationsInput | boolean
    meeting?: MeetingUpdateOneWithoutConversationNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUpdateManyWithoutConversationNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateWithoutClubBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubId?: StringFieldUpdateOperationsInput | string
    private?: BoolFieldUpdateOperationsInput | boolean
    meeting?: MeetingUncheckedUpdateOneWithoutConversationNestedInput
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUncheckedUpdateManyWithoutConversationNestedInput
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUpdateWithoutClubBookInput = {
    title?: StringFieldUpdateOperationsInput | string
    club?: ClubUpdateOneRequiredWithoutMeetingsNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMeetingNestedInput
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type MeetingUncheckedUpdateWithoutClubBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    conversationId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseCreateManyConversationInput = {
    id?: number
    userId: string
    replyToId?: number | null
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUpdateWithoutConversationInput = {
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    replyTo?: ResponseUpdateOneWithoutRepliesNestedInput
    replies?: ResponseUpdateManyWithoutReplyToNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableIntFieldUpdateOperationsInput | number | null
    replies?: ResponseUncheckedUpdateManyWithoutReplyToNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateManyWithoutResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    replyToId?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseCreateManyReplyToInput = {
    id?: number
    userId: string
    conversationId?: number | null
    body: string
    createdOn?: Date | string
    editedOn?: Date | string
  }

  export type ResponseUpdateWithoutReplyToInput = {
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    conversation?: ConversationUpdateOneWithoutResponsesNestedInput
    replies?: ResponseUpdateManyWithoutReplyToNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateWithoutReplyToInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    replies?: ResponseUncheckedUpdateManyWithoutReplyToNestedInput
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUncheckedUpdateManyWithoutRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    editedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUpdateWithoutGenreInput = {
    Author?: AuthorUpdateOneRequiredWithoutBooksNestedInput
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    engagement?: UserBookUpdateManyWithoutBookNestedInput
    clubs?: ClubBookUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutGenreInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    isbn?: BookUpdateisbnInput | Enumerable<string>
    synopsys?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    engagement?: UserBookUncheckedUpdateManyWithoutBookNestedInput
    clubs?: ClubBookUncheckedUpdateManyWithoutBookNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}