
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.9.0
 * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
 */
Prisma.prismaVersion = {
  client: "4.9.0",
  engine: "ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.BookScalarFieldEnum = makeEnum({
  id: 'id',
  isbn: 'isbn',
  title: 'title',
  imgUrl: 'imgUrl',
  bipocAuthor: 'bipocAuthor',
  femaleAuthor: 'femaleAuthor',
  createdOn: 'createdOn',
  updatedOn: 'updatedOn'
});

exports.Prisma.ClubBookScalarFieldEnum = makeEnum({
  id: 'id',
  bookId: 'bookId',
  clubId: 'clubId',
  status: 'status',
  upVotes: 'upVotes',
  downVotes: 'downVotes',
  startedOn: 'startedOn',
  completedOn: 'completedOn',
  updatedOn: 'updatedOn'
});

exports.Prisma.ClubMemberScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  clubId: 'clubId',
  role: 'role'
});

exports.Prisma.ClubScalarFieldEnum = makeEnum({
  id: 'id',
  clubName: 'clubName',
  description: 'description',
  createdOn: 'createdOn',
  updatedOn: 'updatedOn'
});

exports.Prisma.ConversationScalarFieldEnum = makeEnum({
  id: 'id',
  clubId: 'clubId',
  private: 'private',
  bookId: 'bookId',
  title: 'title',
  body: 'body',
  createdOn: 'createdOn',
  updatedOn: 'updatedOn'
});

exports.Prisma.MeetingScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  clubId: 'clubId',
  conversationId: 'conversationId',
  bookId: 'bookId',
  time: 'time',
  location: 'location',
  createdOn: 'createdOn',
  updatedOn: 'updatedOn'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.ReactionScalarFieldEnum = makeEnum({
  reaction: 'reaction'
});

exports.Prisma.ResponseScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  conversationId: 'conversationId',
  replyToId: 'replyToId',
  body: 'body',
  createdOn: 'createdOn',
  editedOn: 'editedOn'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserBookScalarFieldEnum = makeEnum({
  id: 'id',
  bookId: 'bookId',
  userId: 'userId',
  upVote: 'upVote',
  downVote: 'downVote',
  read: 'read',
  inProgress: 'inProgress'
});

exports.Prisma.UserProfileScalarFieldEnum = makeEnum({
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  bio: 'bio',
  imgUrl: 'imgUrl'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  createdOn: 'createdOn',
  updatedOn: 'updatedOn'
});
exports.ClubBookStatus = makeEnum({
  PROPOSED: 'PROPOSED',
  IN_QUEUE: 'IN_QUEUE',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
});

exports.ClubMemberRole = makeEnum({
  ADMIN: 'ADMIN',
  USER: 'USER'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  UserProfile: 'UserProfile',
  Book: 'Book',
  Club: 'Club',
  ClubMember: 'ClubMember',
  UserBook: 'UserBook',
  ClubBook: 'ClubBook',
  Meeting: 'Meeting',
  Conversation: 'Conversation',
  Response: 'Response',
  Reaction: 'Reaction'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
